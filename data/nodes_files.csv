file_path:ID(File),content,last_updated,author,version,vector
sc-copilot/DISBURSEMENT/disbursement_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")
def pre_posting_code(postings, effective_date):
    status_code = _get_parameter(vault, ""status_code"", union=True)
    list_payment_schedule = _get_parameter(
        vault, ""list_payment_schedule"", optional=True, default_value=""[]"", is_json=True
    )
    phase = _get_parameter(
        vault,
        ""phase"",
        optional=True,
        union=True,
        default_value=UnionItemValue(key=""CONTRACTING""),
    )
    risk_premium_settled = _get_parameter(vault, ""risk_premium_settlement"")
    _validate_phase(phase)
    _validate_status_code(status_code)
    _control_posting_instructions(postings, status_code)
    _validate_tirage(postings, list_payment_schedule, risk_premium_settled)
    _validate_postings_amount(postings, vault, address=AVAILABLE)


def _validate_phase(phase):
    """"""
    Checks if the phase is good for the disbursement

    Args:
        phase (str)
    Raises:
        Rejected
    """"""
    if phase.lower() != ""management"":
        raise Rejected(
            f""Cannot make transaction; Phase must be at MANAGEMENT"",
            reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
        )


def _validate_status_code(status_code):
    """"""
    Checks if the status_code is good for the disbursement

    Args:
        status_code (str)
    Raises:
        Rejected
    """"""
    if status_code.lower() != ""approved"":
        raise Rejected(
            f""Cannot make transaction; Status code must be APPROVED"",
            reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
        )


def _validate_tirage(postings, list_payment_schedule, risk_premium_settled):
    """"""
    For the first payment_schedule the risk_premium must be settled to be able to realize one Disbursement

    Args:
        postings (List[PostingInstructions])
        list_payment_schedule (List[Dict])
        risk_premium_settled (bool)
    Raises:
        Rejected
    """"""
    for posting in postings:
        if posting.instruction_details[
            ""event_type""
        ] == ""DISBURSEMENT"" and not _risk_premiun_settled(
            list_payment_schedule, risk_premium_settled
        ):
            raise Rejected(
                f""Cannot make a tirage with the risk premium not settled"",
                reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
            )


def _risk_premiun_settled(list_payment_schedule, risk_premium_settled):
    """"""
    For the first payment_schedule the risk_premium must be settled

    Args:
        list_payment_schedule (List[Dict])
        risk_premium_settled (bool)
    Returns:
        bool: If it's valid or not
    """"""
    if not risk_premium_settled and len(list_payment_schedule) == 0:
        return False
    return True


def _validate_postings_amount(postings, vault, address=None):
    """"""
    Check if the address has the right amount requested by the posting, this only validates from postings that aren't from the same account

    Args:
        postings (List[PostingInstruction])
        vault (Vault)
        address: str
    Raises:
        Rejected
    """"""
    for posting in postings:
        if not _posting_account_is_the_same_account(vault, posting):
            continue
        account_address = address if address else posting.account_address
        balance_amount = _get_balance_at(vault, account_address)
        if not _balance_has_available_amount_for_posting(posting, balance_amount):
            raise Rejected(
                f""Cannot make transaction; Address {posting.account_address} has less amount than the requested, current amount :{balance_amount} requested: {posting.amount}"",
                reason_code=RejectedReason.INSUFFICIENT_FUNDS,
            )


def _posting_account_is_the_same_account(vault, posting):
    """"""
    Function to verify if the posting is from the current account

    Args:
        vault (Vault)
        posting (PostingInstruction)
    Returns:
        bool: If it's frokn the account
    """"""
    return posting.account_id == vault.account_id


def _balance_has_available_amount_for_posting(posting, balance_amount):
    """"""
    Function to verify if the posting has the good amount accordingly with the balance

    Args:
        posting (PostingInstruction)
        balance_amount (Decimal): the amount from the balance
    Returns:
        bool: If it's frokn the account
    """"""
    if posting.amount > balance_amount:
        return False
    return True


def _control_posting_instructions(postings, status_code):
    """"""
    Check if the posting has the mandatory fields and has the correct event_type

    Args:
        postings (List[PostingInstruction])
        status_code (str)
    Raises:
        Rejected
    """"""
    for posting in postings:
        has_mandatory_fields, missing_field = _posting_has_mandatory_fields(
            posting, status_code
        )
        if not has_mandatory_fields:
            raise Rejected(
                f""Cannot make transaction; Missing mandatory field in instruction_details : {missing_field}"",
                reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
            )
        if not _posting_has_correct_event_type(posting):
            raise Rejected(
                f""Cannot make transaction; event_type not recognized : {posting.instruction_details['event_type']}"",
                reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
            )


def _posting_has_correct_event_type(posting):
    """"""
    Function to verify if the posting has the correct event_type

    Args:
        posting (PostingInstruction)
    Returns:
        bool
    """"""
    event_type_values = [""TIRAGE"", ""DISBURSEMENT"", ""REALISED"", ""REIMBURSEMENT""]
    if not posting.instruction_details[""event_type""] in event_type_values:
        return False
    return True


def _posting_has_mandatory_fields(posting, status_code):
    """"""
    Function to verify if the posting has all the instruction details accordingly wit the status_code
    Args:
        posting (PostingInstruction)
    Returns:
        bool
    """"""
    mandatory_fields = {
        ""DRAFT"": [""event_type"", ""id_ref"", ""drawing_code"", ""status_code""],
        ""PENDING"": [
            ""id_ref"",
            ""amount"",
            ""buyer_credit_amount"",
            ""drawing_code"",
            ""drawing_currency"",
            ""drawing_date"",
            ""status_code"",
            ""supplier_bae_company_identifier"",
            ""supplier_ret_company_identifier"",
            ""supplier_rgp_actor_code"",
        ],
        ""APPROVED"": [
            ""id_ref"",
            ""amount"",
            ""buyer_credit_amount"",
            ""drawing_code"",
            ""drawing_currency"",
            ""drawing_date"",
            ""status_code"",
            ""supplier_bae_company_identifier"",
            ""supplier_ret_company_identifier"",
            ""supplier_rgp_actor_code"",
        ],
    }
    for field in mandatory_fields[status_code]:
        if (
            field not in posting.instruction_details
            or not posting.instruction_details[field]
        ):
            return (False, field)
    return (True, None)
",2024-02-28T00:00:00Z,Unknown,1.0,"[0.3337547481060028, 0.34116485714912415, -2.946347713470459, -0.8879255056381226, 1.362486481666565, -0.3289721608161926, 0.3229255676269531, 0.41566529870033264, 0.6023015379905701, -1.1697536706924438, -0.4005623757839203, 0.2727750241756439, 0.12807613611221313, -0.2703646123409271, -0.044789403676986694, 0.9889706373214722, -0.004207662306725979, -1.9872380495071411, 0.11399942636489868, -0.015091262757778168, 0.210062637925148, -0.23950934410095215, -0.12574873864650726, 0.228071928024292, 1.4677205085754395, -0.5031428337097168, 0.24426856637001038, -0.8880523443222046, -0.22479188442230225, -0.7602320313453674, -0.5349149107933044, 0.5084723234176636, 0.5926902890205383, -1.293925166130066, -0.4842354655265808, -0.3989875316619873, 0.1909281462430954, 0.2039995789527893, -0.5131595730781555, -0.5380051732063293, 0.16277721524238586, 0.8986190557479858, -0.3366789221763611, 0.24044843018054962, 0.3827487826347351, -0.07605630159378052, 1.8551008701324463, 0.2402835637331009, 0.4822297692298889, -0.47585055232048035, 0.8595479130744934, -1.0967731475830078, -0.11975716054439545, 0.4440581500530243, 0.6719496250152588, 0.8400483131408691, -0.2690872251987457, 0.21717607975006104, -0.25030264258384705, -0.4610395133495331, 0.766470193862915, 0.7306846976280212, -0.07628513872623444, 1.0431389808654785, 0.05554242804646492, -0.055890075862407684, -1.304092526435852, 0.5872775912284851, -0.30996400117874146, -0.4235752820968628, -0.13325811922550201, 0.11278395354747772, 0.4790456295013428, 0.5569051504135132, -0.396681547164917, 1.0589990615844727, -0.42377498745918274, -0.6916813254356384, -0.21556688845157623, 0.4772687256336212, 0.8821023106575012, -0.6503512859344482, 1.7340636253356934, -0.3549123704433441, -0.13978390395641327, -0.25949814915657043, 0.03001227416098118, -0.5512241125106812, 0.481923371553421, 1.3851068019866943, -0.5273697376251221, 0.48330187797546387, 0.6746180057525635, -0.3430008888244629, 0.03190544620156288, 1.1034607887268066, -0.4393599331378937, -0.12946508824825287, -0.4787571430206299, -0.40925508737564087, 0.23525357246398926, -0.8595293760299683, 0.19342027604579926, 0.14830546081066132, -0.4825189411640167, 0.5435180068016052, 0.7182456851005554, 0.10157394409179688, -0.20461547374725342, -0.9444873929023743, -0.903358519077301, 0.8299201130867004, -0.5621086955070496, -0.35030943155288696, 0.4861207902431488, -0.5435290932655334, 1.4724558591842651, -0.7523615956306458, -0.5293586850166321, 0.7088643908500671, -0.9659426212310791, -0.8552674651145935, 0.49576106667518616, 0.754939079284668, 0.13424448668956757, 0.24677978456020355, -0.2793790102005005, 0.6449270844459534, 0.07301430404186249, -1.325230598449707, 0.09053394198417664, -0.049416568130254745, -0.23186834156513214, 0.9283621311187744, -0.55304354429245, 0.3938453495502472, -0.47361981868743896, -0.042174845933914185, -0.22574958205223083, -0.7618368864059448, 0.7454308867454529, -0.18657951056957245, -0.7317594289779663, -0.2531544268131256, 0.6091467142105103, -0.617928147315979, 1.238138198852539, -0.5392573475837708, 0.8937035799026489, -0.10490787774324417, 0.1413569301366806, -0.11635690182447433, 0.5546025633811951, 0.3010402321815491, 0.6007794141769409, -1.0445650815963745, 0.43103301525115967, -0.17886675894260406, 1.3005918264389038, -0.0985381230711937, 1.6711500883102417, 0.26684167981147766, -0.07374011725187302, 0.945002019405365, 0.37938064336776733, -1.0843420028686523, 0.30949440598487854, 0.6602494120597839, 0.4453986585140228, 0.3114131689071655, -0.46468403935432434, -0.5817570686340332, 0.2774324417114258, -0.5384008884429932, -0.19524139165878296, -0.7570087313652039, -0.023078054189682007, -0.46023625135421753, 0.30364394187927246, -1.5124036073684692, -0.3362146317958832, -0.5203880071640015, 1.604400396347046, 0.8424888253211975, -0.0012029267381876707, -0.935219407081604, 1.0167405605316162, -0.888268232345581, -1.1167219877243042, -0.3652772605419159, -1.5072609186172485, 0.3451632261276245, -0.7318693399429321, -0.02872096747159958, -0.4238462448120117, -0.47441861033439636, -0.00581490620970726, -0.27094438672065735, 0.45024779438972473, -0.6092666983604431, -0.10527972131967545, 0.3093629479408264, -1.2706650495529175, 0.4791562855243683, -1.274735450744629, 0.6016648411750793, -0.6902616620063782, 0.8643226027488708, -0.0483129546046257, 0.040956392884254456, 1.1883927583694458, -0.8086457252502441, -0.19870425760746002, 0.4830980598926544, 0.2816130816936493, -0.26584240794181824, 0.27701467275619507, -0.5754488706588745, -1.3353123664855957, 0.3293008506298065, 0.18224316835403442, -0.401336669921875, 0.6802045702934265, -0.09724437445402145, 0.7254312038421631, 0.5889667868614197, -0.7526635527610779, 1.0071570873260498, -0.5905402302742004, -0.4387718141078949, 0.13934190571308136, -1.223836898803711, -0.6981499791145325, 0.4445197582244873, -0.2512739598751068, 0.9270526170730591, -0.020649868994951248, 0.8068447709083557, 1.340891718864441, -0.6237560510635376, 0.1448303461074829, 0.6849822402000427, 0.044122837483882904, 0.42835667729377747, -0.07168257236480713, 0.18636414408683777, 0.4224540591239929, 0.06003965064883232, 0.530149519443512, 1.2474303245544434, 0.6986886858940125, 0.21927349269390106, 1.0568690299987793, 0.3325331509113312, -0.18640194833278656, 0.7496422529220581, -0.30554094910621643, -0.48965808749198914, 0.6051921248435974, 0.13598844408988953, 0.46724438667297363, -1.4689054489135742, 1.5163236856460571, -0.2771677076816559, -0.41273677349090576, -0.10104407370090485, -0.30859026312828064, 0.021466152742505074, 0.19166633486747742, 0.22609034180641174, 0.046251848340034485, 0.0162714384496212, 0.19327324628829956, 0.2469920516014099, 0.2027713507413864, 0.9956756234169006, -0.019451895728707314, 0.5824604034423828, -0.6634779572486877, 0.9898300766944885, -0.04141031578183174, -1.1724251508712769, -0.08858851343393326, 0.27674776315689087, -1.0048233270645142, 0.20571927726268768, 0.428486704826355, 0.32378217577934265, 0.4353865683078766, 0.6581641435623169, 0.6825188994407654, 0.0009258458740077913, -0.38827091455459595, 0.751752495765686, -0.1729981154203415, -0.06410932540893555, 0.3561757802963257, -0.3618833124637604, 0.8158882260322571, -0.6260027885437012, -0.23520448803901672, 0.8590298891067505, 0.20856358110904694, 0.6182233691215515, 0.3214414119720459, -0.5914824604988098, -0.2600495517253876, -0.2326381653547287, 1.032499074935913, -0.05827551335096359, -0.7867792844772339, 0.6033474206924438, -0.3644171357154846, 0.1736179143190384, -0.7638382911682129, 1.1515809297561646, 0.13934342563152313, 0.9710742235183716, 0.7035493850708008, -0.6789247393608093, 0.08183898776769638, -0.3988357186317444, 0.3707546293735504, -0.22893747687339783, 0.26870644092559814, 1.4960439205169678, 0.14117957651615143, 0.5465841889381409, -0.004523484967648983, -0.5757998824119568, 0.7264112234115601, 0.2043571025133133, -0.10906259715557098, -1.21527099609375, -1.0266048908233643, -0.03352591395378113, -0.02509228140115738, 0.09594374895095825, 0.007046944461762905, 0.3986920416355133, 1.8628215789794922, -0.5696235299110413, 0.6431751251220703, -0.9797044396400452, -0.0773288756608963, -0.44193699955940247, -0.33826392889022827, -0.1595115214586258, 0.48565590381622314, 0.3904295861721039, -0.07409465312957764, -0.2001536786556244, -0.06366404891014099, -0.3312082886695862, 0.12068992108106613, 0.3746253550052643, 0.6547642350196838, 0.11054237186908722, 0.07797244936227798, 0.013864814303815365, 0.251787930727005, 0.06329191476106644, -0.7705164551734924, -0.6791894435882568, 0.4256015717983246, 0.6590706706047058, 0.011282425373792648, -0.7298167943954468, 0.5049281120300293, 0.22310705482959747, -0.380460262298584, -0.2625739276409149, 0.18651163578033447, 0.9314901828765869, -0.4795597195625305, -0.31213271617889404, -0.5720615386962891, -1.193109393119812, -0.6614428758621216, 0.39940765500068665, 0.5294801592826843, 0.5796584486961365, -0.4464844763278961, -0.1499670296907425, 0.2571543753147125, 0.1820138543844223, -0.4210706055164337, 0.017529092729091644, 0.32260942459106445, -0.2029116302728653, -0.41342106461524963, -1.049122929573059, -0.4811767339706421, 0.29819580912590027, 0.5067285895347595, -0.5823279619216919, 0.4161246716976166, -0.12632665038108826, 0.47650983929634094, -0.2620728015899658, -0.5040215849876404, -0.734342634677887, 0.4681299328804016, 0.6453832983970642, 0.865175724029541, 0.511245608329773, -0.5296120643615723, -0.1013081967830658, 0.9598383903503418, -0.6929587125778198, 0.2250765711069107, 0.037173833698034286, -1.1494134664535522, -0.7459015250205994, -0.1278069019317627, 0.28704729676246643, 0.7089096903800964, 0.7116124629974365, -1.0908955335617065, -0.5480524301528931, 1.8491896390914917, 0.020181287080049515, 0.6340022683143616, -0.12468595802783966, 0.8600268959999084, -0.06366976350545883, 0.058327194303274155, 0.1891389787197113, 0.3011789917945862, -1.1105053424835205, -0.32956382632255554, 0.8309442400932312, 0.6157785058021545, 0.32321760058403015, -0.46355295181274414, 0.5148241519927979, -0.3285938501358032, 1.058096170425415, 0.8092716932296753, 0.4770835041999817, 0.4084641933441162, -0.6227920055389404, 0.6745426654815674, -0.9528161287307739, -0.8017387986183167, 0.864611804485321, 0.13648927211761475, -0.17707057297229767, -0.4608982801437378, 0.7800952196121216, -0.3707585036754608, 0.19029173254966736, 0.24110107123851776, 0.3596736490726471, 0.26325374841690063, -1.0415517091751099, 0.10875692963600159, 0.3421737551689148, -0.581756591796875, 0.7756857872009277, 0.45221084356307983, -0.4595138728618622, 0.25775444507598877, 0.5030598640441895, 0.5432171821594238, 0.00848126970231533, 0.7344854474067688, -0.6932684183120728, 0.03744816035032272, 1.4046987295150757, -0.5696907043457031, -0.6574409604072571, 0.6067259907722473, -0.4005998373031616, 0.010885564610362053, 0.7796135544776917, -0.8290231227874756, 0.7353019714355469, -0.19471080601215363, -0.00356541620567441, 0.16686345636844635, -0.4772946834564209, -0.4045637249946594, -0.47026681900024414, 0.17650529742240906, 0.6654103398323059, 0.940302848815918, 0.37651297450065613, 0.25727298855781555, -0.9281684756278992, 0.999311089515686, -0.14275170862674713, -0.8785349130630493, 0.04171616584062576, -0.5659751296043396, -0.5475993156433105, -0.7630152106285095, 0.9837381839752197, -0.44116848707199097, -0.43137115240097046, -1.4123286008834839, 0.12555696070194244, -0.18748942017555237, 0.5572799444198608, -0.4967399537563324, -0.12347590178251266, 1.5332655906677246, -0.7386326789855957, -0.3087388575077057, 0.0764133483171463, 0.07506980001926422, 0.04393657669425011, 0.3826651871204376, 0.14732885360717773, 0.7368142604827881, -0.4144107699394226, 1.0062533617019653, 0.14757147431373596, -1.2467622756958008, -0.1626734882593155, -0.15438678860664368, -0.8693260550498962, 0.24667641520500183, -1.0559052228927612, -1.179699182510376, 0.05210494250059128, -0.14981599152088165, -1.3919328451156616, 0.5616738200187683, 0.21198800206184387, -0.053014736622571945, 1.3361929655075073, -0.4717472493648529, -0.360023558139801, 0.2793123424053192, -0.4770861268043518, 0.26722216606140137, -0.247909814119339, -0.17321482300758362, 0.9724082946777344, 0.03972357138991356, 0.7077491283416748, -0.3938877582550049, -0.5960500240325928, -0.7354194521903992, -0.8103088140487671, 0.21580569446086884, -0.21593856811523438, 0.0859726145863533, -0.5517568588256836, 0.45689183473587036, 0.3098158538341522, -0.5540338158607483, -0.035118937492370605, 0.3938743770122528, -1.053116798400879, -0.49939295649528503, -0.16301225125789642, -0.21174949407577515, -0.27884048223495483, 0.30047929286956787, -0.10527633875608444, 0.14071305096149445, 1.1825249195098877, 0.27494505047798157, 0.5603039860725403, -0.16073668003082275, -0.654154896736145, 0.5798272490501404, 0.6496949195861816, -1.0244334936141968, -0.5401732325553894, 0.24538487195968628, -0.052532728761434555, -0.6122158765792847, -0.4455767273902893, -0.29370105266571045, -0.2817494571208954, -0.25476571917533875, -0.32486391067504883, 0.27407118678092957, 0.34911322593688965, 0.917375922203064, 0.5523260831832886, 0.9984477758407593, -1.1920472383499146, -0.7922640442848206, -1.0013335943222046, -0.046282559633255005, -0.0022814914118498564, -0.012274724431335926, 0.30335986614227295, 0.847550630569458, -0.017207467928528786, 0.8333026170730591, 0.3205958306789398, -1.0221534967422485, -1.3947904109954834, -0.06405968219041824, -0.19654545187950134, 0.6463911533355713, 0.7795082330703735, 0.2362135499715805, -0.8110204339027405, 0.4066687226295471, 1.534538745880127, 0.13968509435653687, 0.31898897886276245, -0.6190321445465088, -0.7707318663597107, -0.4833153188228607, -0.027551423758268356, -0.43583250045776367, -0.3600929379463196, 0.7493656873703003, -0.20780545473098755, 1.2142962217330933, -0.15073785185813904, -0.9438876509666443, -0.6517481207847595, -0.5870117545127869, -0.796363353729248, 0.5701248049736023, -0.3215784728527069, 0.39932212233543396, 1.0415711402893066, -0.5187110900878906, -0.5490147471427917, 0.5459758639335632, 0.8541181683540344, -0.10566997528076172, 1.0025500059127808, -0.8347417116165161, -1.1766382455825806, -0.6743296980857849, 0.7688619494438171, -0.5364181399345398, 0.7301396727561951, 0.5941528677940369, 0.47245997190475464, 0.5829999446868896, 0.15630753338336945, -0.31990230083465576, 0.5834777355194092, 0.608399510383606, -0.391690731048584, 0.5587745308876038, 0.7146692276000977, 0.9557850360870361, -0.406080037355423, 1.8170009851455688, 1.8105171918869019, 0.10116937011480331, -0.324240505695343, 0.5517762303352356, -0.6531327366828918, 0.47343549132347107, -0.24606817960739136, -2.368075132369995, -0.4903191030025482, 0.5657304525375366, -0.4723711907863617, -1.5549321174621582, -0.09945077449083328, 0.2846423387527466, -0.18025898933410645, -0.4605320692062378, -0.01058964803814888, -0.5149219632148743, -0.5173184275627136, 1.1854747533798218, -0.23099778592586517, 0.10701648890972137, -0.2893948554992676, 0.250613272190094, -0.5143673419952393, 0.3601369857788086, 0.7444811463356018, -0.21807129681110382, -0.6520344614982605, -0.44089260697364807, 0.286918967962265, -0.020337998867034912, 0.2540251314640045, 0.12472714483737946, -1.0501046180725098, 0.3514276146888733, -0.4507586359977722, 0.36299121379852295, -0.5186372399330139, -0.10603440552949905, -0.5091623067855835, -0.20715183019638062, 0.06654339283704758, -0.6306770443916321, 0.28777995705604553, -0.7516645193099976, -0.7165345549583435, -0.6872720122337341, 0.35591909289360046, 0.08650171756744385, 1.0383107662200928, 0.48538699746131897, 0.7101877927780151, 0.07587382197380066, -0.1033446341753006, -0.007354977540671825, -0.1919168382883072, -0.9787125587463379, -0.5418025851249695, 0.4237603545188904, 0.04709166660904884, -0.8026548624038696, 0.367006778717041, -0.2923942804336548, 0.3424830734729767, -1.009087085723877, -0.20355649292469025, -0.326770156621933, -0.13248558342456818, 0.19069480895996094, -0.25914648175239563, -0.9604719281196594, 0.9798784255981445, -0.06842997670173645, 0.1256827563047409, 0.017446527257561684, -0.28975093364715576, 0.6378493309020996, -1.033024787902832, -0.07311411947011948, -0.35757362842559814, -0.7248952984809875, 1.1164408922195435, -0.8945525288581848, 0.3877498209476471, -0.43649208545684814, -0.5436609387397766, -1.3509491682052612, -0.511042058467865, -0.6976653933525085, 0.511435866355896, 0.015229945071041584, -0.1751265823841095, -0.4001508057117462, -0.605089008808136, -0.8239273428916931, 0.10348377376794815, 0.3945130407810211, -0.028613397851586342, -0.15049496293067932, 0.05388471111655235, -0.36062154173851013, -0.16587811708450317, 0.48706114292144775, 0.9066771864891052, -0.08282338827848434, 0.7559957504272461, 1.7846653461456299, 1.2243889570236206, 0.7535514831542969, -0.36184725165367126, 0.6219838857650757, -0.22095438838005066, -0.6104062795639038, -1.8964108228683472, -1.0712236166000366, -0.43814051151275635]"
sc-copilot/DISBURSEMENT/disbursement_test.py,"def test_post_posting_code_should_send_a_note(self):
    start_date = datetime(month=11, day=22, year=2022)
    default_parameters_values_custom = default_parameters_values.copy()
    default_parameters_values_custom[""sdrDate""] = datetime(month=8, day=16, year=2022)
    default_parameters_values_custom[""date_first_repayment""] = start_date
    default_parameters_values_custom[""date_last_repayment""] = (
        start_date + relativedelta(months=120)
    )
    default_parameters_values_custom[""loan_duration""] = Decimal(""10"")
    default_parameters_values_custom[""last_repayment_date""] = (
        start_date + relativedelta(months=120)
    )
    default_parameters_values_custom[""date_drawing_effective""] = OptionalValue(
        start_date
    )
    default_parameters_values_custom[""amount_registered""] = Decimal(""23823288.28"")
    default_parameters_values_custom[""riskPremiumAmount""] = Decimal(""2366124.64"")
    default_parameters_values_custom[""interestRate""] = Decimal(""1.29"")
    default_parameters_values_custom[""maturityNumber""] = Decimal(""1"")
    default_parameters_values_custom[""list_payment_schedule""] = OptionalValue(
        json.dumps([])
    )
    mock_vault = self.create_mock(
        balance_ts=self.balance_ts,
        denomination=""EUR"",
        postings=self.test_postings,
        **default_parameters_values_custom,
    )
    mock_vault.get_hook_execution_id.return_value = create_execution_id()
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    self.run_function(
        ""post_posting_code"",
        mock_vault,
        postings=test_postings,
        effective_date=self.effective_date,
    )
    self.assertTrue(has_calls(mock_vault, ""add_account_note""))


def test_post_posting_code_shouldn_send_a_note(self):
    start_date = datetime(month=11, day=22, year=2022)
    default_parameters_values_custom = default_parameters_values.copy()
    default_parameters_values_custom[""sdrDate""] = datetime(month=8, day=16, year=2022)
    default_parameters_values_custom[""date_first_repayment""] = start_date
    default_parameters_values_custom[""date_last_repayment""] = (
        start_date + relativedelta(months=120)
    )
    default_parameters_values_custom[""creation_date""] = start_date
    default_parameters_values_custom[""amount_registered""] = Decimal(""23823288.28"")
    default_parameters_values_custom[""riskPremiumAmount""] = Decimal(""2366124.64"")
    default_parameters_values_custom[""interestRate""] = Decimal(""1.29"")
    default_parameters_values_custom[""list_payment_schedule""] = OptionalValue(
        json.dumps([])
    )
    mock_vault = self.create_mock(
        balance_ts=self.balance_ts,
        denomination=""EUR"",
        postings=self.test_postings,
        **default_parameters_values_custom,
    )
    mock_vault.get_hook_execution_id.return_value = create_execution_id()
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""tirage_id"": ""1"", ""event_type"": ""NOTTIRAGE""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )

    self.run_function(
        ""post_posting_code"",
        mock_vault,
        postings=test_postings,
        effective_date=self.effective_date,
    )
    self.assertFalse(has_calls(mock_vault, ""start_workflow""))


def test_post_posting_code_disbursement(self):
    start_date = datetime(month=11, day=22, year=2022)
    default_parameters_values_custom = default_parameters_values.copy()
    default_parameters_values_custom[""sdrDate""] = datetime(month=8, day=16, year=2023)
    default_parameters_values_custom[""date_first_repayment""] = start_date
    default_parameters_values_custom[""date_last_repayment""] = (
        start_date + relativedelta(months=120)
    )
    default_parameters_values_custom[""loan_duration""] = Decimal(""10"")
    default_parameters_values_custom[""last_repayment_date""] = (
        start_date + relativedelta(months=120)
    )
    default_parameters_values_custom[""date_drawing_effective""] = OptionalValue(
        start_date
    )
    default_parameters_values_custom[""amount_registered""] = Decimal(""23823288.28"")
    default_parameters_values_custom[""riskPremiumAmount""] = Decimal(""2366124.64"")
    default_parameters_values_custom[""interestRate""] = Decimal(""1.29"")
    default_parameters_values_custom[""maturityNumber""] = Decimal(""1"")
    default_parameters_values_custom[""list_payment_schedule""] = OptionalValue(
        json.dumps([])
    )
    mock_vault = self.create_mock(
        balance_ts=self.balance_ts,
        denomination=""EUR"",
        postings=self.test_postings,
        **default_parameters_values_custom,
    )
    mock_vault.get_hook_execution_id.return_value = create_execution_id()
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    self.run_function(
        ""post_posting_code"",
        mock_vault,
        postings=test_postings,
        effective_date=self.effective_date,
    )
    self.assertTrue(has_calls(mock_vault, ""make_internal_transfer_instructions""))


def test_do_disbursement(self):
    mock_vault = self.create_mock(
        balance_ts=self.balance_ts,
        denomination=""EUR"",
        postings=self.test_postings,
        **default_parameters_values,
    )
    mock_vault.get_hook_execution_id.return_value = create_execution_id()
    self.run_function(
        ""_do_disbursement"",
        mock_vault,
        vault=mock_vault,
        amount=Decimal(""1000.00""),
    )
    self.assertEqual(count_calls(mock_vault, ""make_internal_transfer_instructions""), 3)


def test_pre_posting_code(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    with self.assertRaises(Rejected) as e:
        result = self.run_function(
            ""pre_posting_code"",
            self.mock_vault,
            postings=test_postings,
            effective_date=self.effective_date,
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_validate_phase(self):
    self.run_function(""_validate_phase"", self.mock_vault, phase=""MANAGEMENT"")

    with self.assertRaises(Rejected) as e:
        self.run_function(""_validate_phase"", self.mock_vault, phase=""CONTRACTING"")
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_validate_status_code(self):
    self.run_function(""_validate_status_code"", self.mock_vault, status_code=""APPROVED"")
    with self.assertRaises(Rejected) as e:
        self.run_function(""_validate_status_code"", self.mock_vault, status_code=""DRAFT"")
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)
    with self.assertRaises(Rejected) as e:
        self.run_function(
            ""_validate_status_code"", self.mock_vault, status_code=""PENDING""
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_validate_status_code(self):
    self.run_function(""_validate_status_code"", self.mock_vault, status_code=""APPROVED"")

    with self.assertRaises(Rejected) as e:
        self.run_function(""_validate_status_code"", self.mock_vault, status_code=""DRAFT"")
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)

    with self.assertRaises(Rejected) as e:
        self.run_function(
            ""_validate_status_code"", self.mock_vault, status_code=""PENDING""
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_validate_tirage(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    self.run_function(
        ""_validate_tirage"",
        self.mock_vault,
        postings=test_postings,
        list_payment_schedule=[],
        risk_premium_settled=True,
    )
    with self.assertRaises(Rejected) as e:
        self.run_function(
            ""_validate_tirage"",
            self.mock_vault,
            postings=test_postings,
            list_payment_schedule=[],
            risk_premium_settled=False,
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)
    self.run_function(
        ""_validate_tirage"",
        self.mock_vault,
        postings=test_postings,
        list_payment_schedule=[
            {
                ""date_tirage"": ""22-11-2023"",
                ""id_tirage"": ""1"",
                ""expected_payment_schedule"": [
                    {
                        ""payment_number"": 1,
                        ""payment_date"": ""22-11-2022"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 1000, ""interests"": 2000},
                        ""loan"": {""principal"": 2000, ""interests"": 1000},
                        ""premium"": {""principal"": 5000, ""interests"": 1000},
                        ""total_principal"": 1000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                    {
                        ""payment_number"": 2,
                        ""payment_date"": ""22-05-2023"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 9000, ""interests"": 2000},
                        ""loan"": {""principal"": 3000, ""interests"": 1000},
                        ""premium"": {""principal"": 1000, ""interests"": 1000},
                        ""total_principal"": 9000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                ],
            },
            {
                ""date_tirage"": ""22-02-2024"",
                ""id_tirage"": ""2"",
                ""expected_payment_schedule"": [
                    {
                        ""payment_number"": 1,
                        ""payment_date"": ""22-11-2022"",
                        ""days"": 5,
                        ""borrower"": {""principal"": 1000, ""interests"": 2000},
                        ""loan"": {""principal"": 2000, ""interests"": 1000},
                        ""premium"": {""principal"": 5000, ""interests"": 1000},
                        ""total_principal"": 1000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                    {
                        ""payment_number"": 2,
                        ""payment_date"": ""22-05-2023"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 9000, ""interests"": 2000},
                        ""loan"": {""principal"": 3000, ""interests"": 1000},
                        ""premium"": {""principal"": 1000, ""interests"": 1000},
                        ""total_principal"": 9000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                ],
            },
        ],
        risk_premium_settled=True,
    )


def test_risk_premiun_settled(self):
    result = self.run_function(
        ""_risk_premiun_settled"",
        self.mock_vault,
        list_payment_schedule=[],
        risk_premium_settled=True,
    )
    self.assertTrue(result)
    result = self.run_function(
        ""_risk_premiun_settled"",
        self.mock_vault,
        list_payment_schedule=[],
        risk_premium_settled=False,
    )
    self.assertFalse(result)
    result = self.run_function(
        ""_risk_premiun_settled"",
        self.mock_vault,
        list_payment_schedule=[
            {
                ""date_tirage"": ""22-11-2023"",
                ""id_tirage"": ""1"",
                ""expected_payment_schedule"": [
                    {
                        ""payment_number"": 1,
                        ""payment_date"": ""22-11-2022"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 1000, ""interests"": 2000},
                        ""loan"": {""principal"": 2000, ""interests"": 1000},
                        ""premium"": {""principal"": 5000, ""interests"": 1000},
                        ""total_principal"": 1000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                    {
                        ""payment_number"": 2,
                        ""payment_date"": ""22-05-2023"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 9000, ""interests"": 2000},
                        ""loan"": {""principal"": 3000, ""interests"": 1000},
                        ""premium"": {""principal"": 1000, ""interests"": 1000},
                        ""total_principal"": 9000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                ],
            },
            {
                ""date_tirage"": ""22-02-2024"",
                ""id_tirage"": ""2"",
                ""expected_payment_schedule"": [
                    {
                        ""payment_number"": 1,
                        ""payment_date"": ""22-11-2022"",
                        ""days"": 5,
                        ""borrower"": {""principal"": 1000, ""interests"": 2000},
                        ""loan"": {""principal"": 2000, ""interests"": 1000},
                        ""premium"": {""principal"": 5000, ""interests"": 1000},
                        ""total_principal"": 1000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                    {
                        ""payment_number"": 2,
                        ""payment_date"": ""22-05-2023"",
                        ""days"": 10,
                        ""borrower"": {""principal"": 9000, ""interests"": 2000},
                        ""loan"": {""principal"": 3000, ""interests"": 1000},
                        ""premium"": {""principal"": 1000, ""interests"": 1000},
                        ""total_principal"": 9000,
                        ""total_interests"": 1000,
                        ""total_treasury"": 2000,
                    },
                ],
            },
        ],
        risk_premium_settled=True,
    )
    self.assertTrue(result)


def test_validate_postings_amount(self):
    balance_dict = create_balances(
        [
            {""key"": LI_ADDRESS, ""value"": Decimal(10)},
            {""key"": P_ADDRESS, ""value"": Decimal(10)},
            {""key"": MF_ADDRESS, ""value"": Decimal(10)},
            {""key"": MFC_ADDRESS, ""value"": Decimal(10)},
            {""key"": SFC_ADDRESS, ""value"": Decimal(10)},
            {""key"": DITC_ADDRESS, ""value"": Decimal(10)},
            {""key"": DIC_ADDRESS, ""value"": Decimal(10)},
            {""key"": AA_ADDRESS, ""value"": Decimal(10000)},
            {""key"": DEFAULT_ADDRESS, ""value"": Decimal(2500)},
        ]
    )
    balance_ts = [(self.effective_date, balance_dict)]
    posting_instruction = self.mock_posting_instruction(
        amount=1000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=ACCOUNT_ID,
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    mock_vault = self.create_mock(
        balance_ts=balance_ts,
        denomination=""EUR"",
        postings=test_postings,
        **default_parameters_values,
    )
    # Not raise an exception
    self.run_function(
        ""_validate_postings_amount"",
        mock_vault,
        postings=test_postings,
        vault=mock_vault,
    )

    balance_dict = create_balances(
        [
            {""key"": LI_ADDRESS, ""value"": Decimal(10)},
            {""key"": P_ADDRESS, ""value"": Decimal(10)},
            {""key"": MF_ADDRESS, ""value"": Decimal(10)},
            {""key"": MFC_ADDRESS, ""value"": Decimal(10)},
            {""key"": SFC_ADDRESS, ""value"": Decimal(10)},
            {""key"": DITC_ADDRESS, ""value"": Decimal(10)},
            {""key"": DIC_ADDRESS, ""value"": Decimal(10)},
            {""key"": AA_ADDRESS, ""value"": Decimal(10000)},
            {""key"": DEFAULT_ADDRESS, ""value"": Decimal(2500)},
        ]
    )
    balance_ts = [(self.effective_date, balance_dict)]
    posting_instruction = self.mock_posting_instruction(
        amount=3000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=ACCOUNT_ID,
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    mock_vault = self.create_mock(
        balance_ts=balance_ts,
        denomination=""EUR"",
        postings=test_postings,
        **default_parameters_values,
    )
    # Raise an exception
    with self.assertRaises(Rejected) as e:
        self.run_function(
            ""_validate_postings_amount"",
            mock_vault,
            postings=test_postings,
            vault=mock_vault,
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.INSUFFICIENT_FUNDS)


def test_control_posting_instructions_without_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    with self.assertRaises(Rejected) as e:
        result = self.run_function(
            ""_control_posting_instructions"",
            self.mock_vault,
            postings=test_postings,
            status_code=""DRAFT"",
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_control_posting_instructions_without_tirage_id(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""tirage_id"": ""1""},
    )
    test_postings = self.create_postings_batch(
        [posting_instruction], self.effective_date
    )
    with self.assertRaises(Rejected) as e:
        result = self.run_function(
            ""_control_posting_instructions"",
            self.mock_vault,
            postings=test_postings,
            status_code=""DRAFT"",
        )
    self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)


def test_posting_has_correct_event_type_incorrect_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""INCORRECT"", ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_correct_event_type"",
        self.mock_vault,
        posting=posting_instruction,
    )
    self.assertEqual(result, False)


def test_posting_has_correct_event_type_none_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": None, ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_correct_event_type"",
        self.mock_vault,
        posting=posting_instruction,
    )
    self.assertEqual(result, False)


def test_posting_has_correct_event_type_blank_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": """", ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_correct_event_type"",
        self.mock_vault,
        posting=posting_instruction,
    )
    self.assertEqual(result, False)


def test_posting_has_correct_event_type_tirage_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_correct_event_type"",
        self.mock_vault,
        posting=posting_instruction,
    )
    self.assertEqual(result, True)


def test_posting_has_mandatory_fields(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={
            ""event_type"": ""DISBURSEMENT"",
            ""tirage_id"": ""1"",
            ""id_ref"": ""1"",
            ""drawing_code"": ""100"",
            ""status_code"": ""DRAFT"",
        },
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""DRAFT"",
    )
    self.assertEqual((True, None), result)


def test_posting_has_mandatory_fields_without_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""DRAFT"",
    )
    self.assertEqual((False, ""event_type""), result)


def test_posting_has_mandatory_fields_empty_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": """", ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""DRAFT"",
    )
    self.assertEqual((False, ""event_type""), result)


def test_posting_has_mandatory_fields_none_event_type(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": None, ""tirage_id"": ""1""},
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""DRAFT"",
    )
    self.assertEqual((False, ""event_type""), result)


def test_posting_has_mandatory_fields_pending(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={
            ""id_ref"": ""1"",
            ""amount"": ""1000"",
            ""buyer_credit_amount"": ""1000"",
            ""drawing_code"": ""100"",
            ""drawing_currency"": ""EUR"",
            ""drawing_date"": ""01-01-2024"",
            ""status_code"": ""PENDING"",
            ""supplier_bae_company_identifier"": ""ID"",
            ""supplier_ret_company_identifier"": ""ID"",
            ""supplier_rgp_actor_code"": ""100"",
        },
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""PENDING"",
    )
    self.assertEqual((True, None), result)

    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={
            ""id_ref"": ""1"",
            ""amount"": ""1000"",
            ""buyer_credit_amount"": ""1000"",
            ""drawing_code"": ""100"",
            ""drawing_date"": ""01-01-2024"",
            ""status_code"": ""PENDING"",
            ""supplier_bae_company_identifier"": ""ID"",
            ""supplier_ret_company_identifier"": ""ID"",
            ""supplier_rgp_actor_code"": ""100"",
        },
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""PENDING"",
    )
    self.assertEqual((False, ""drawing_currency""), result)


def test_posting_has_mandatory_fields_approved(self):
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={
            ""id_ref"": ""1"",
            ""amount"": ""1000"",
            ""buyer_credit_amount"": ""1000"",
            ""drawing_code"": ""100"",
            ""drawing_currency"": ""EUR"",
            ""drawing_date"": ""01-01-2024"",
            ""status_code"": ""APPROVED"",
            ""supplier_bae_company_identifier"": ""ID"",
            ""supplier_ret_company_identifier"": ""ID"",
            ""supplier_rgp_actor_code"": ""100"",
        },
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""APPROVED"",
    )
    self.assertEqual((True, None), result)
    posting_instruction = self.mock_posting_instruction(
        amount=10,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={
            ""id_ref"": ""1"",
            ""amount"": ""1000"",
            ""buyer_credit_amount"": ""1000"",
            ""drawing_code"": ""100"",
            ""drawing_date"": ""01-01-2024"",
            ""status_code"": ""APPROVED"",
            ""supplier_bae_company_identifier"": ""ID"",
            ""supplier_ret_company_identifier"": ""ID"",
            ""supplier_rgp_actor_code"": ""100"",
        },
    )
    result = self.run_function(
        ""_posting_has_mandatory_fields"",
        self.mock_vault,
        posting=posting_instruction,
        status_code=""APPROVED"",
    )
    self.assertEqual((False, ""drawing_currency""), result)


def test_posting_account_is_the_same_account(self):

    posting_instruction = self.mock_posting_instruction(
        amount=1000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=ACCOUNT_ID,
    )

    result = self.run_function(
        ""_posting_account_is_the_same_account"",
        self.mock_vault,
        posting=posting_instruction,
        vault=self.mock_vault,
    )
    self.assertTrue(result)
    posting_instruction = self.mock_posting_instruction(
        amount=1000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=""NOT_"" + ACCOUNT_ID,
    )

    result = self.run_function(
        ""_posting_account_is_the_same_account"",
        self.mock_vault,
        posting=posting_instruction,
        vault=self.mock_vault,
    )

    self.assertFalse(result)


def test_balance_has_available_amount_for_posting(self):

    posting_instruction = self.mock_posting_instruction(
        amount=1000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=ACCOUNT_ID,
    )

    result = self.run_function(
        ""_balance_has_available_amount_for_posting"",
        self.mock_vault,
        posting=posting_instruction,
        balance_amount=10000,
    )
    self.assertTrue(result)
    posting_instruction = self.mock_posting_instruction(
        amount=1000,
        credit=10,
        value_timestamp=self.effective_date + timedelta(days=1),
        instruction_details={""event_type"": ""DISBURSEMENT"", ""tirage_id"": ""1""},
        account_id=ACCOUNT_ID,
    )

    result = self.run_function(
        ""_balance_has_available_amount_for_posting"",
        self.mock_vault,
        posting=posting_instruction,
        balance_amount=900,
    )

    self.assertFalse(result)
",2024-02-28T00:00:00Z,Unknown,1.0,"[0.8133302330970764, 1.3140537738800049, -2.629488468170166, -1.1901425123214722, 1.7662917375564575, -1.1638617515563965, 1.1552835702896118, -0.1754177063703537, 1.5684854984283447, -0.7587544918060303, -1.3407167196273804, -0.00977681577205658, 0.7707422375679016, 1.2040274143218994, 0.12271155416965485, 0.5497796535491943, 0.07775759696960449, -2.181424140930176, -0.35609641671180725, 0.33200573921203613, 0.2171076536178589, -0.7800532579421997, -1.538698434829712, 1.0228482484817505, 1.1450519561767578, 0.5157613754272461, -0.1598089337348938, 0.07601131498813629, -1.0075780153274536, 0.18093812465667725, -0.5642307996749878, -0.20108237862586975, 0.33844810724258423, 0.6283712387084961, -0.3708622455596924, 0.19175168871879578, 0.3235863745212555, -1.0565886497497559, -0.3128902316093445, -1.4892445802688599, -0.6124745011329651, -0.07595068216323853, 0.21689102053642273, 0.5466725826263428, -0.3701406419277191, -0.2730022668838501, 0.9448592662811279, 0.45613953471183777, 0.00854186899960041, 0.34456318616867065, 0.2360527217388153, -1.0677258968353271, 0.16617251932621002, 0.010876720771193504, 0.9885385036468506, 0.6528860330581665, -0.7800458669662476, -0.4686679542064667, 0.23611605167388916, -0.9524049162864685, 1.1805449724197388, 0.9744173884391785, 0.3377969563007355, 0.7034093737602234, 0.41367238759994507, 0.28331220149993896, -0.6030882596969604, 0.6265209317207336, -0.053807176649570465, 0.05066142976284027, 0.8542509078979492, -0.016173020005226135, 0.45038503408432007, -0.19098371267318726, -0.5375258922576904, 0.72802734375, -0.5446007251739502, -0.4496481418609619, -0.5268417596817017, -0.32127729058265686, 0.8323668241500854, -0.1622915267944336, 1.9626585245132446, -0.720307469367981, 0.5639845132827759, -0.5119456648826599, 0.24732676148414612, -0.2764197587966919, 0.033438004553318024, 0.8850888013839722, -0.6768274307250977, 0.44985562562942505, -0.1466967761516571, -0.08292388170957565, -1.0827388763427734, -0.08982943743467331, -0.12224996089935303, -0.1352563202381134, -1.0696762800216675, 0.22253933548927307, -0.5366178750991821, -0.17212003469467163, -0.11980357766151428, -0.15745045244693756, 0.6445200443267822, 0.23094844818115234, -0.22103255987167358, 0.9655254483222961, 0.09620189666748047, -0.27033329010009766, -0.14255008101463318, -0.31972435116767883, -0.2702198624610901, -1.0353484153747559, -0.5027028918266296, 0.44923821091651917, 0.7926020622253418, -0.1707645058631897, -0.5041061639785767, 0.9397205710411072, -0.41910862922668457, -0.009695462882518768, 0.3817477822303772, 0.5945989489555359, -0.683319091796875, -0.7678057551383972, 0.03615101799368858, 0.23891130089759827, -0.055264975875616074, -0.7842211127281189, 0.2804950475692749, -0.4759615659713745, -1.099548101425171, -0.010271288454532623, 0.3823566436767578, 0.6235047578811646, 0.5971722602844238, -0.6821232438087463, 0.12372203171253204, -0.03909580036997795, -0.028877705335617065, -0.17460258305072784, -0.5716137290000916, 0.21409998834133148, -0.04997975006699562, -0.7670814394950867, 1.4536770582199097, -0.38600632548332214, 0.42422693967819214, -0.37702760100364685, -0.2252713441848755, -0.26295384764671326, -0.33164751529693604, -0.45707935094833374, 0.620576798915863, -0.7639452219009399, -0.2807290554046631, -0.09736555814743042, 0.09896944463253021, 0.3542248606681824, 0.269741028547287, 0.03092499077320099, -0.5374031066894531, -0.042086467146873474, -0.4389115571975708, -1.0501296520233154, -0.19286036491394043, 1.0897189378738403, -0.007880356162786484, -0.2088029831647873, -0.48329484462738037, -0.2368929535150528, -1.0087800025939941, -0.47805845737457275, 0.5179075002670288, -0.4901067912578583, 0.16687875986099243, -0.2800328731536865, -0.15057092905044556, -0.6924177408218384, 0.7470171451568604, -0.9130952954292297, 1.4351310729980469, 0.8108502626419067, -0.12234918773174286, -0.20717406272888184, 0.9187160730361938, -0.37628620862960815, -0.3873973488807678, -0.17771665751934052, 0.06705521047115326, -0.04490049183368683, -0.663128674030304, -0.1151573657989502, -0.8977030515670776, -0.4844800531864166, 0.7493017911911011, -0.44308197498321533, 0.2295420914888382, -0.401817262172699, 0.7250168323516846, -0.09372162818908691, 0.1485733985900879, 0.18427880108356476, -0.06256204098463058, 0.4551495909690857, -0.6133140325546265, 0.4715821444988251, 0.5255621671676636, -0.7602016925811768, 1.5956339836120605, -0.9245699644088745, -0.7481569051742554, 0.16526560485363007, -0.3720244765281677, 0.7427793145179749, -0.07462164759635925, -0.04994543269276619, -0.12689323723316193, -0.2053772211074829, 0.5264725685119629, -0.3869320750236511, -0.2653316259384155, -0.021895745769143105, 0.4938724637031555, -0.0594288595020771, -1.3454639911651611, -0.5241119861602783, -0.5363074541091919, -0.5914775133132935, -0.13373151421546936, -0.5202628374099731, -0.7389816045761108, -0.04298274219036102, 0.5362204313278198, 0.5740476846694946, -0.5164101123809814, 0.8214933276176453, 0.4975627064704895, -0.15182457864284515, -0.13252009451389313, 0.8589984178543091, 0.10994589328765869, 0.9653518795967102, -0.41387832164764404, 0.6745740175247192, -0.34950947761535645, -0.13378404080867767, -0.18824973702430725, 0.22486627101898193, -0.2513594627380371, -0.401203453540802, 1.1085021495819092, -0.02860499545931816, 0.14495065808296204, -0.2725362181663513, -0.9357339143753052, -0.02722868323326111, 0.38241589069366455, 0.3324296474456787, 0.09423501789569855, -0.10430002212524414, 1.0780457258224487, 0.5414936542510986, -0.8977158069610596, -0.5939370393753052, -0.02558385208249092, -0.7956331968307495, 0.18696972727775574, -0.3721497356891632, 0.5387491583824158, 0.13912709057331085, -0.48373889923095703, 1.7833166122436523, -0.5236321687698364, -0.2752171754837036, 0.8342839479446411, -0.3546987771987915, -0.05756095424294472, 1.1238006353378296, -0.19782757759094238, -0.7807118892669678, 0.43075311183929443, 1.3745331764221191, -0.7893581390380859, 0.06359075754880905, 0.05962517857551575, 0.2752280533313751, 0.08856721222400665, 0.2640334963798523, 0.7584623694419861, -0.34328797459602356, -1.5413522720336914, 0.578136146068573, -0.9585428237915039, -0.41354793310165405, -0.1720428317785263, 0.4111282527446747, 0.5272533893585205, -0.9593444466590881, 0.03012869507074356, 0.2939284145832062, -0.09786480665206909, 0.8184327483177185, -0.3443998098373413, -0.2877272665500641, 0.7748869061470032, -0.23547041416168213, 0.2944755554199219, 0.6723560094833374, 0.14279699325561523, 0.366913378238678, -0.532920241355896, 0.2859704792499542, -0.17042604088783264, 0.9515666961669922, 1.0790684223175049, 0.4431513547897339, 0.6065190434455872, -0.9561136960983276, -0.08554387092590332, -0.498747318983078, -0.5492737889289856, 0.2078171968460083, -0.1399954855442047, 0.12795178592205048, -0.22255563735961914, 0.8532817363739014, -0.25681400299072266, -0.7001857757568359, 0.9555763006210327, 0.3719615042209625, -0.3194058835506439, -0.6871193647384644, 0.5227628946304321, -0.21757368743419647, 1.3062212467193604, 0.41551488637924194, 0.2814151644706726, -0.4302467107772827, 1.2337435483932495, -0.23743632435798645, -0.07136690616607666, -0.698742687702179, 0.2684232294559479, 0.1797269731760025, -0.6090098023414612, 0.2674334645271301, 0.9360827803611755, 0.29922136664390564, -0.33699101209640503, 0.6200819611549377, 0.11212614923715591, -0.47454920411109924, 0.4906543493270874, -0.8287703990936279, 0.5931046009063721, 0.4954105615615845, -0.4792730510234833, 0.3998463749885559, 1.1192781925201416, 0.4473809599876404, -0.580114483833313, -0.45868587493896484, 0.9284207820892334, 0.5838713645935059, -0.007070295512676239, -0.5037897825241089, -0.12890219688415527, 0.5003868937492371, 0.02511294186115265, -0.41611430048942566, -0.2685041129589081, 0.0997360497713089, -0.0636122077703476, -0.6589536666870117, -1.093775987625122, -0.12914302945137024, -0.8135822415351868, 0.22969329357147217, 0.2977977395057678, 0.16552948951721191, 0.1867317408323288, -0.25524985790252686, -0.6647457480430603, -0.532166063785553, -0.010753583163022995, -0.6120467185974121, 1.0206990242004395, -0.18524833023548126, -0.20649518072605133, -1.3820710182189941, -0.11200948804616928, 0.16875825822353363, 0.5754661560058594, -0.9476227164268494, 0.05424967035651207, -0.5412548184394836, 0.5424925684928894, 0.21672457456588745, -0.4365224838256836, 0.09854389727115631, 0.5904805064201355, -0.48644334077835083, 0.8609246015548706, 0.32612407207489014, 0.40841060876846313, -0.5782898664474487, 0.6757351160049438, -1.5253654718399048, 0.20068301260471344, 0.7986710071563721, -0.5746279954910278, -0.29352566599845886, 0.027116134762763977, -0.34549203515052795, 0.9396366477012634, 0.6596689224243164, 0.42400795221328735, 0.1134273111820221, 0.5996274948120117, 0.20136600732803345, 0.3991580009460449, 0.0997399091720581, -0.009092539548873901, 0.23094777762889862, 0.21004712581634521, 0.3960111737251282, 0.14399781823158264, -0.6931691765785217, -0.4567253589630127, 0.11897755414247513, 1.0596364736557007, 0.15944620966911316, 0.1468532681465149, 0.29517295956611633, 0.9507951736450195, 0.24532975256443024, -0.18460148572921753, 0.8530887961387634, 0.9436584711074829, -0.6618978381156921, -0.21420972049236298, 0.4153260588645935, 0.8288500308990479, 0.6938391923904419, -0.318344384431839, -0.820238471031189, 0.17342731356620789, -0.14529630541801453, -0.34636685252189636, -0.22916632890701294, 0.386787086725235, 0.09607341885566711, 0.4151163101196289, -0.8141241073608398, -0.2040717750787735, 0.18114972114562988, 0.3306865394115448, 0.7206698060035706, 0.5371298789978027, -0.17252959311008453, -0.2884911894798279, 0.5259530544281006, 0.764212965965271, -0.5726338624954224, 1.3544714450836182, -1.2571161985397339, 1.1693967580795288, 0.26355406641960144, -0.4492611289024353, -0.637787401676178, 1.1801388263702393, -0.3930186927318573, 0.10076504945755005, -0.12497811019420624, 0.462882399559021, -0.07012610137462616, 1.1560298204421997, 1.121788501739502, -0.28184759616851807, 0.4427604079246521, -0.6665501594543457, -0.4634435772895813, 0.2231021225452423, 0.19103890657424927, 0.9993352293968201, -1.3017836809158325, 0.8643343448638916, -0.29293927550315857, 0.5183957815170288, -0.5335946083068848, -0.6662149429321289, -0.10377787053585052, 0.5577046871185303, 0.03529246896505356, -1.1627695560455322, 0.26074159145355225, 0.21887987852096558, 0.5840235948562622, 0.49344107508659363, 1.243844747543335, -0.29776036739349365, -0.12931130826473236, -0.2505899667739868, -0.0529196597635746, 0.10691547393798828, -0.9418483376502991, -0.4584384858608246, 0.02235560491681099, 0.2482396513223648, -0.08353842794895172, 0.9134481549263, 0.6131488084793091, 0.7870293855667114, -0.12246529757976532, -0.0009367763996124268, -0.6873534917831421, -1.0955286026000977, 1.0723145008087158, 0.11223484575748444, -0.4920008182525635, -0.34175074100494385, -0.7502872347831726, -1.6813039779663086, -0.629747748374939, 0.09009868651628494, -0.839106559753418, 0.5473933219909668, 0.2753930687904358, 0.0025696158409118652, 0.8117843270301819, -0.36049801111221313, -0.20853012800216675, -0.27324753999710083, -0.1530379205942154, -0.5640561580657959, 0.1435461938381195, 0.35722988843917847, 1.088382363319397, 0.6933376789093018, 0.3209143877029419, -0.14359676837921143, 0.02453848347067833, 1.1155742406845093, -0.5500292181968689, -0.7117408514022827, 0.6029885411262512, 0.6515846252441406, -1.0641180276870728, 0.7550764679908752, 0.35711121559143066, -0.5749305486679077, -0.92027747631073, 0.6098078489303589, 0.09056878089904785, -0.9967270493507385, -1.2406190633773804, -0.9306057691574097, -0.17637914419174194, -0.30393117666244507, 0.31658393144607544, 0.43307337164878845, 0.2967366874217987, -0.2133399397134781, -0.09251433610916138, 0.3414888381958008, -0.8040080070495605, -0.5520679950714111, -0.07194476574659348, 0.31535863876342773, -0.19624808430671692, 0.1648201048374176, -1.2910856008529663, 0.18955659866333008, 0.47558140754699707, -0.48367130756378174, 0.153461754322052, -0.7604050636291504, -0.07606649398803711, -0.1434173882007599, 1.1754640340805054, 0.9004040360450745, 1.3236132860183716, 0.6537119746208191, -0.20250236988067627, -0.5045735836029053, -0.8280988931655884, 0.3043884038925171, -0.5329304933547974, -0.015072911977767944, 0.03104419633746147, -0.4559759497642517, -0.6533594131469727, 0.12002890557050705, 0.1237562894821167, 0.3299347162246704, -0.937181830406189, 0.06303393840789795, -0.6817479133605957, 0.9575364589691162, -0.04861138388514519, 0.11510240286588669, -0.9726526141166687, -0.5992652177810669, 0.3932523727416992, 0.22765302658081055, 0.323853075504303, -0.2588442265987396, 0.11060836911201477, -0.029559433460235596, 0.2632225751876831, -0.0001279190182685852, -0.04694831371307373, 0.3139454126358032, -0.036728229373693466, 1.6547871828079224, 0.28713247179985046, 0.21395859122276306, -0.18868064880371094, -1.1299867630004883, -1.24625825881958, 0.5957807898521423, -0.5055789351463318, 0.2474513053894043, -0.08617910742759705, -0.10798390209674835, -0.4460751414299011, 0.009212467819452286, 1.0446220636367798, -0.3184089660644531, 0.4116150140762329, -1.6666266918182373, -0.4901283085346222, -0.626196026802063, 0.5640918612480164, 0.47444748878479004, 0.4435168504714966, 0.41988083720207214, 0.7838810682296753, -0.16076689958572388, 0.09263856709003448, 0.36636900901794434, 0.3510935604572296, 0.14562825858592987, -0.7723807692527771, 0.04728802666068077, 1.5614502429962158, 0.644539475440979, -0.1945195198059082, 1.458641529083252, 1.1963157653808594, 0.320933073759079, 1.0215736627578735, 0.11853504180908203, -0.5941995978355408, 0.3145875036716461, -0.8916576504707336, -1.1026474237442017, -0.6192182302474976, 0.829513430595398, -0.1391812264919281, -0.2545095384120941, -0.3453860282897949, 0.24583213031291962, -0.09666228294372559, -0.30294960737228394, 0.2777312397956848, -0.45358967781066895, -0.2232663631439209, 1.231303334236145, 0.7804080247879028, 0.0920642837882042, 0.7969253659248352, 0.9364290237426758, -0.004841377958655357, -0.31614017486572266, 0.6546494960784912, -0.03534902632236481, 0.12855497002601624, -0.09913621842861176, 0.6471909284591675, 0.15700989961624146, -0.031233638525009155, -0.1823752522468567, -0.10895892232656479, 0.24952436983585358, 0.38175299763679504, -0.3827997148036957, -0.5620668530464172, -0.23590712249279022, 0.4980458617210388, 0.32205039262771606, -0.0615847222507, -0.5035004615783691, 0.7216504216194153, 0.05517327040433884, -0.5465983152389526, 0.44682592153549194, 0.49671244621276855, -0.5542875528335571, -0.30113399028778076, 0.7533078193664551, 0.3252905011177063, -0.21622034907341003, -0.4620895981788635, 0.3667205274105072, -0.07327932864427567, -0.8813011646270752, -0.7414799928665161, 0.6179291009902954, -0.753852367401123, -1.1785800457000732, 0.09654475003480911, 0.4484548270702362, 0.6986895799636841, -0.5082346200942993, -0.03786466643214226, 0.3550315499305725, -0.8291298747062683, 0.465700626373291, -0.33577585220336914, -0.87778639793396, -1.186501145362854, -0.4653970003128052, 0.20128566026687622, 0.3194176256656647, -0.9951759576797485, -0.5110727548599243, -0.23291204869747162, -0.05726896971464157, 0.19554108381271362, 0.16833175718784332, 0.7729347944259644, -0.05599072575569153, -0.2261677235364914, 0.46248680353164673, -0.8500100374221802, -1.6244328022003174, -0.37020498514175415, -0.8117190599441528, -0.30873000621795654, -0.4471055865287781, 0.231096088886261, 0.28482693433761597, -0.7474784851074219, -0.04845663532614708, 0.1619114875793457, -0.42843642830848694, 0.26855504512786865, -0.38855740427970886, -0.25720900297164917, -0.4774942994117737, -0.2531763017177582, 0.7556695938110352, -0.03265140950679779, 0.06408555060625076, 0.5361777544021606, 1.3251259326934814, 0.5602661371231079, -0.3195374310016632, -0.05634763091802597, 0.936800479888916, -0.24361154437065125, -0.8995877504348755, -1.5836617946624756, -0.1856594830751419, -0.3883986473083496]"
sc-copilot/DISBURSEMENT/disbursement_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")
def post_posting_code(postings, effective_date):
    vault.add_account_note(
        body=f""Initializing the calculation: {len(postings)}"",
        note_type=NoteType.RAW_TEXT,
        is_visible_to_customer=True,
        date=datetime.utcnow(),
    )
    for posting in postings:
        amount = posting.amount
        if posting.instruction_details[""event_type""] == ""DISBURSEMENT"":
            vault.add_account_note(
                body=""DISBURSEMENT"",
                note_type=NoteType.RAW_TEXT,
                is_visible_to_customer=True,
                date=datetime.utcnow(),
            )

            _do_disbursement(vault, amount)


def _do_disbursement(vault, amount):
    """"""
    Do disbursement postings
    AVAILABLE -> PENDING_OUTSTANDING
    PENDING_DISBURSEMENT -> TOTAL_DISBURSEMENT
    PENDING_OUTSTANDING -> DEFAULT

    Args:
        vault (vault object): It can be a mock_vault or the vault object
        amount: The amount to be transfered
    """"""
    posting_disbursment = vault.make_internal_transfer_instructions(
        amount=amount,
        denomination=""EUR"",
        client_transaction_id=""DISBURSEMENT_1_""
        + vault.account_id
        + ""_""
        + _make_timestamp(),
        from_account_id=vault.account_id,
        from_account_address=AVAILABLE,
        to_account_id=vault.account_id,
        to_account_address=PENDING_OUTSTANDING,
        pics=[],
        instruction_details={""amount"": str(amount), ""operation_code"": ""VLD""},
        asset=DEFAULT_ASSET,
    )
    instructions = []
    instructions.extend(posting_disbursment)
    vault.instruct_posting_batch(
        posting_instructions=instructions, effective_date=datetime.utcnow()
    )
    posting_pending = vault.make_internal_transfer_instructions(
        amount=amount,
        denomination=""EUR"",
        client_transaction_id=""DISBURSEMENT_2_""
        + vault.account_id
        + ""_""
        + _make_timestamp(),
        from_account_id=vault.account_id,
        from_account_address=PENDING_DISBURSEMENT,
        to_account_id=vault.account_id,
        to_account_address=TOTAL_DISBURSEMENT,
        pics=[],
        instruction_details={""amount"": str(amount), ""operation_code"": ""RLD""},
        asset=DEFAULT_ASSET,
    )
    instructions = []
    instructions.extend(posting_pending)
    vault.instruct_posting_batch(
        posting_instructions=instructions, effective_date=datetime.utcnow()
    )
    posting_pending = vault.make_internal_transfer_instructions(
        amount=amount,
        denomination=""EUR"",
        client_transaction_id=""DISBURSEMENT_3_""
        + vault.account_id
        + ""_""
        + _make_timestamp(),
        from_account_id=vault.account_id,
        from_account_address=PENDING_OUTSTANDING,
        to_account_id=vault.account_id,
        to_account_address=DEFAULT,
        pics=[],
        instruction_details={""amount"": str(amount), ""operation_code"": ""RLD""},
        asset=DEFAULT_ASSET,
    )
    instructions = []
    instructions.extend(posting_pending)
    vault.instruct_posting_batch(
        posting_instructions=instructions, effective_date=datetime.utcnow()
    )
",2024-02-28T00:00:00Z,Unknown,1.0,"[0.657944917678833, 0.09702593088150024, -2.555528402328491, -0.8445867300033569, 0.2218261957168579, -0.5131149888038635, 0.507354736328125, -0.13556599617004395, 0.19124151766300201, -1.1448942422866821, -2.102079153060913, 0.5140889883041382, 0.9496511816978455, -0.40767690539360046, 0.5219159722328186, 0.21778832376003265, 0.4443300664424896, -0.6750894784927368, -0.24423934519290924, 0.513309121131897, 0.34604915976524353, -1.3140349388122559, -0.5729779601097107, -0.019625475630164146, 0.9919624924659729, 0.4039115309715271, 0.37081238627433777, -0.2596210539340973, -1.2162185907363892, -0.42634785175323486, 0.8651873469352722, -0.08170643448829651, 0.11857808381319046, -0.5618019700050354, 0.3901921510696411, -0.20644675195217133, 0.17405280470848083, -1.1291123628616333, 0.053833477199077606, -0.8869182467460632, -0.13481780886650085, -0.058960508555173874, 0.14116504788398743, -0.019340315833687782, -0.019202768802642822, -0.21394082903862, 1.9236875772476196, -0.37294748425483704, -0.013476834632456303, -0.28962019085884094, -0.09129370003938675, 0.6129708886146545, -0.6389210820198059, 0.5299267172813416, 0.6605588793754578, -0.2876669764518738, -0.762134313583374, -0.07146377116441727, 1.1932376623153687, -0.4685128927230835, 1.8485047817230225, 0.27995565533638, 0.7946357727050781, 0.1392049491405487, 0.9112371206283569, 0.7261354923248291, 0.2603837251663208, 0.968055009841919, 0.3685249090194702, -0.8347402215003967, 0.3327166736125946, 0.589117705821991, -0.1755463033914566, 0.07873592525720596, 0.0635988786816597, 0.34166380763053894, -0.3116687536239624, -0.6680305004119873, -0.029723569750785828, -0.18976470828056335, 0.03695013374090195, -0.5308215022087097, 0.49180710315704346, -0.6968686580657959, 0.4085482954978943, -0.41842561960220337, 0.15555833280086517, 0.4664982557296753, -0.6118367314338684, 1.2766326665878296, -0.9183595180511475, 1.0330666303634644, 0.45188459753990173, 0.8893312215805054, -1.173770785331726, -0.16131238639354706, -0.2987420856952667, 0.2650250792503357, -1.299198031425476, -0.2940943241119385, 0.10124605894088745, -0.6923773288726807, 0.14661821722984314, 0.5002798438072205, 0.4517802596092224, 1.1047179698944092, 0.21761688590049744, -0.6706079244613647, -0.4075368046760559, -0.10233349353075027, -0.4038461148738861, -0.7820337414741516, -0.5205245614051819, 0.5488317608833313, 0.549483597278595, 0.30424028635025024, 1.0693706274032593, -0.2780787944793701, 0.26038578152656555, 0.9506946206092834, -0.4714384377002716, -0.10820029675960541, 0.023909270763397217, -0.23227733373641968, -0.6245693564414978, -0.2771469056606293, -0.21853965520858765, -0.7967039942741394, 0.680583119392395, -0.3999452292919159, 0.5039682984352112, 0.4134727716445923, -0.6166801452636719, 0.5528809428215027, 0.43055397272109985, 0.5865155458450317, 0.05458875000476837, -1.678415298461914, 0.3839253783226013, 0.2827416956424713, 0.10497310012578964, -0.14402486383914948, -0.3531215190887451, -0.4075663685798645, -0.5613773465156555, -1.0462802648544312, 0.6616215109825134, -0.5318403840065002, -0.27157285809516907, 0.10578423738479614, -0.5467489361763, -0.4659673273563385, -0.05279311165213585, 0.6632635593414307, 0.6366747617721558, -0.7073327898979187, -0.9175261855125427, -0.13181130588054657, 0.956966757774353, 0.7203192710876465, -0.11455580592155457, -0.15948814153671265, -0.06642363965511322, -0.08496370911598206, -0.16721372306346893, -0.9668915271759033, 0.02771913632750511, 0.9060503840446472, 0.5643321871757507, -0.31797319650650024, 0.35197678208351135, 0.10925130546092987, -0.6998746991157532, -0.017003491520881653, 0.052047938108444214, 0.8478025794029236, 0.770828366279602, -0.14493851363658905, -0.5015381574630737, -0.9811633229255676, 0.3384944200515747, -1.4015095233917236, 1.3115055561065674, -0.11546401679515839, -0.8008744716644287, -0.3059545159339905, 1.1203118562698364, -0.4252919554710388, 0.006143242120742798, -1.2165539264678955, 0.40116140246391296, -0.32979390025138855, -0.3718281388282776, -0.2773674428462982, -1.0509965419769287, -0.4312586784362793, 0.25683075189590454, -0.34755897521972656, -0.05795004591345787, 0.012102922424674034, 0.035426657646894455, -0.38599950075149536, 0.5549025535583496, 0.5014289617538452, 0.5505174398422241, 0.7279224991798401, -0.23887522518634796, 1.520233392715454, -0.2283988893032074, -0.04074591398239136, 0.8912593126296997, -0.6810508370399475, -0.18981096148490906, 0.14332957565784454, -0.021026650443673134, 0.7983492612838745, 0.9415249824523926, -0.4585191309452057, 0.13569694757461548, 0.15281690657138824, -0.12120576947927475, -0.22975076735019684, 0.5687559843063354, -0.30611008405685425, 1.2905985116958618, -0.7341593503952026, -0.5277457237243652, -0.49658629298210144, -0.377125084400177, -0.8434984683990479, -0.34231138229370117, -0.47889697551727295, -0.12251307815313339, -0.04820249229669571, -0.14067310094833374, 0.001161270309239626, -0.6866891980171204, 1.0168118476867676, -0.7092067003250122, -0.11856125295162201, 0.17330504953861237, 0.46451282501220703, -0.29300010204315186, 0.8892099857330322, -0.2832448184490204, 0.3716967701911926, 0.16782468557357788, 0.25203558802604675, -0.11395314335823059, 0.29370301961898804, 0.1631697565317154, 0.5961010456085205, 0.4338233470916748, -0.28453245759010315, 0.012777573429048061, -0.3521488308906555, -1.7481635808944702, 0.10093699395656586, -0.2795822024345398, 0.26820385456085205, 0.19623851776123047, 0.2031058967113495, 1.2614871263504028, -0.1314273625612259, -0.6238314509391785, 0.07723111659288406, -0.435199499130249, 0.8634096384048462, 0.9987978935241699, -0.2463378608226776, -0.23662595450878143, 0.8809497952461243, -0.4099171757698059, 1.2646827697753906, -0.6405861377716064, 0.11267700791358948, 0.6554228067398071, -0.1380651593208313, -0.39695730805397034, 0.3908686935901642, -0.06760411709547043, -1.2050098180770874, 0.4682706296443939, 0.8645330667495728, -0.9422929883003235, 0.4666544795036316, 0.09354705363512039, 1.3114490509033203, 0.2145681381225586, -0.10560570657253265, 1.5250036716461182, 0.18213610351085663, -0.6714895367622375, 0.43258634209632874, -0.19195425510406494, 0.1412842571735382, 0.5283001065254211, 1.0142405033111572, 0.6553208231925964, -1.4137295484542847, 0.2359156459569931, 0.3035064935684204, 0.32074105739593506, 0.7664802670478821, -0.8650749921798706, -1.083608627319336, -0.14852401614189148, 0.766754150390625, -0.5161485075950623, -0.7216894626617432, -0.34165647625923157, -0.2502702474594116, -0.7485154867172241, 0.02731647901237011, 0.20831644535064697, 0.20980922877788544, 0.7355349659919739, 0.5278148055076599, 0.5197473168373108, -0.40614840388298035, -0.17437101900577545, 0.46977388858795166, 0.3521103858947754, -0.37823721766471863, 0.4780634343624115, 0.31074094772338867, -0.14008072018623352, 0.5886350274085999, -0.7765716314315796, -0.7804579138755798, 0.7144090533256531, 0.35173025727272034, 0.23893821239471436, -0.41507238149642944, -0.335468053817749, -0.14527960121631622, 0.6011191010475159, 0.02085615135729313, -0.4113518297672272, -0.06931054592132568, 0.5786953568458557, -0.8929529786109924, -0.44943490624427795, -0.3111293315887451, 0.0523964986205101, -0.709895133972168, -0.2667156755924225, 0.3654315173625946, 1.0789486169815063, 0.7700352072715759, -0.4928921163082123, 1.0758967399597168, 0.007954464294016361, -0.11119066923856735, 0.34244415163993835, -0.16960610449314117, -0.411467045545578, 1.1237356662750244, -0.04871831834316254, 0.02177662029862404, 0.8806213736534119, 0.6130420565605164, -0.4565143585205078, -1.0205711126327515, 0.40629318356513977, 0.5872353911399841, 1.2661038637161255, -0.9202321767807007, 0.7999463677406311, 0.8814302086830139, -1.3058799505233765, 0.5103365778923035, -0.14458423852920532, -0.4792892634868622, 0.33829066157341003, -0.6471511125564575, -0.2820946276187897, -0.7248613238334656, -0.7301191687583923, 0.7727792263031006, 0.29031962156295776, 0.3002496361732483, -0.3985713720321655, -0.6724686622619629, -0.347231924533844, 0.06196165829896927, -0.2709277868270874, -0.3928239345550537, 0.15391524136066437, -0.17451369762420654, -0.034861236810684204, -0.5140661001205444, 0.3051794469356537, 0.2738920748233795, 0.8705185651779175, -0.7057304978370667, 0.7488701343536377, 0.3566948473453522, -0.013456440530717373, -0.2851810157299042, -0.5384693145751953, 0.21449431777000427, 0.9704049825668335, -1.0384461879730225, -0.19836756587028503, 0.5159469246864319, -0.2912396192550659, -0.104749895632267, 0.11519273370504379, -0.4577708840370178, 1.4021811485290527, 0.5260908007621765, -0.34904390573501587, -0.04056667536497116, 0.4731189012527466, -0.22723080217838287, 0.3276327848434448, 0.05434584245085716, -0.4277154505252838, 0.5974087119102478, 0.7684875130653381, 0.41377994418144226, 0.7820190787315369, -0.737385630607605, 0.7188661694526672, 0.46598055958747864, 0.5495252013206482, -0.477040559053421, -0.04786616936326027, -1.3873459100723267, -0.23057536780834198, -0.07396314293146133, 0.8617841601371765, 0.05786595866084099, -0.8234674334526062, 0.6381241083145142, 0.3946843147277832, 0.6331442594528198, -0.13767142593860626, 0.9338727593421936, 1.0882571935653687, -0.6457768082618713, 0.03796028718352318, -0.04355202987790108, 0.9028505086898804, 0.5925670862197876, 0.40839883685112, -0.5886072516441345, 0.9879108667373657, -0.2633380591869354, 0.08326756954193115, 0.2502979040145874, 0.7335783243179321, -0.004106472712010145, 1.0685926675796509, 0.09611546248197556, 0.13855305314064026, -0.12112359702587128, -0.17895688116550446, 0.5589215755462646, -0.29926884174346924, 1.1452007293701172, -0.2530931532382965, 0.26418063044548035, 0.4460006356239319, -0.583292543888092, 0.5237906575202942, -0.4170313775539398, 0.632280707359314, 0.5744052529335022, -0.3476678133010864, -0.47630301117897034, -0.2324504256248474, -0.034415073692798615, 0.4996711015701294, -0.2669791877269745, 0.4650202989578247, -0.9684708714485168, 0.7861722111701965, 0.2691240608692169, -0.2552551329135895, 0.41057828068733215, -0.584149956703186, -0.49433112144470215, -0.46169570088386536, 0.4773466885089874, 0.33726316690444946, -0.9905641674995422, 1.111252784729004, 0.17241960763931274, 0.3676087260246277, -0.3227819800376892, 0.27172350883483887, -0.29671216011047363, -0.3807889521121979, -0.3760351240634918, -0.37415140867233276, -0.24163895845413208, 0.6638693809509277, -0.16175006330013275, 0.7712684869766235, 1.1322460174560547, -1.1757842302322388, 0.4093242883682251, 0.9049317240715027, -0.6436848640441895, -0.09716539829969406, -0.31027835607528687, -1.1424262523651123, 0.4487580955028534, 0.0829920545220375, -0.04386809840798378, 0.33039942383766174, -0.0424799919128418, 0.17894501984119415, -0.2140369862318039, -0.07791344076395035, -0.8397390842437744, 0.1436500996351242, -0.12288619577884674, -0.18358488380908966, 0.006904687732458115, 0.05966545641422272, -0.45495977997779846, -1.3979792594909668, 0.09817459434270859, 0.4762420952320099, -0.8249035477638245, 0.06375070661306381, -0.3253164291381836, -0.2410212606191635, 0.28833287954330444, -0.3464854657649994, -0.018961453810334206, -0.03163401782512665, -0.44251376390457153, -1.1353166103363037, -0.03672144562005997, 0.18164792656898499, 0.21744860708713531, 0.39995723962783813, 0.09849658608436584, -0.739564836025238, 0.06430123001337051, -0.06059042736887932, -1.0769286155700684, 0.19221441447734833, 0.8103762269020081, 0.7504618763923645, -0.6072539687156677, 0.764286458492279, 0.05469958484172821, -0.023167088627815247, -1.179518699645996, 0.12466681748628616, 0.17688417434692383, -0.3639932870864868, -0.48177632689476013, -1.0194505453109741, 0.3365018367767334, 0.45247969031333923, -0.2991166412830353, 1.3617525100708008, 1.0079971551895142, 0.27082574367523193, 0.27742403745651245, -0.5790593028068542, -1.117745041847229, 0.16683818399906158, 0.5538651943206787, 0.6266278028488159, -0.39812204241752625, -1.7688766717910767, -0.6999810338020325, 0.20714908838272095, -0.5758175849914551, 0.4918077886104584, -0.851386308670044, -0.5771113634109497, -0.2821360230445862, 0.02814069576561451, 0.7763147354125977, 1.2247076034545898, 0.1915494054555893, 0.05888154357671738, 0.37616875767707825, -0.23250091075897217, -1.2163174152374268, 0.6393786072731018, -0.04440153017640114, -0.7812989354133606, 0.08518095314502716, 0.23559029400348663, -1.242617130279541, 0.07874147593975067, 0.5509576201438904, 0.5182660818099976, -1.204959750175476, -0.41542693972587585, -0.5591683387756348, -0.11832614243030548, 0.6540006399154663, 1.0598859786987305, -0.36555343866348267, -0.44575801491737366, 1.063300371170044, 0.28877848386764526, 0.5795663595199585, 0.16171421110630035, -0.28620654344558716, 0.7516798377037048, 0.08161775022745132, -0.45566561818122864, -0.4040740132331848, 0.6483829617500305, -0.1507672518491745, 0.7828381061553955, 0.8774224519729614, 0.9400476813316345, -0.7707321047782898, -0.5588028430938721, -0.4606338441371918, 0.522352397441864, 0.24133247137069702, -0.3454650044441223, -0.1004943996667862, -0.8124926686286926, -0.644770085811615, -0.42404064536094666, 0.9172406196594238, -0.4128420054912567, 0.24106672406196594, -2.0030181407928467, -0.43071603775024414, 0.012751532718539238, 1.0104368925094604, 0.12367589771747589, 1.0863202810287476, -0.3323056101799011, 0.925829291343689, 1.0949876308441162, -0.13292160630226135, -0.08200781047344208, 0.46510687470436096, -0.02244817093014717, -1.4227615594863892, 0.23130470514297485, 0.5929976105690002, 0.4211365878582001, -0.5007660388946533, 1.7088655233383179, 1.3389695882797241, 0.561186671257019, 0.6247302889823914, 0.6174167990684509, -0.9543390870094299, -0.020239077508449554, -0.163508340716362, -1.37696373462677, -0.6397868990898132, 0.4805077314376831, 0.3746754825115204, -0.6889714002609253, 0.029502863064408302, 0.4861981272697449, 0.2976432144641876, 0.012756921350955963, 0.861810564994812, -0.76618492603302, -1.0552862882614136, 0.34262749552726746, 0.08250121027231216, 0.1909257173538208, 0.02997308038175106, 0.7149228453636169, -0.050409309566020966, 0.34327608346939087, -0.19403980672359467, -0.2981817424297333, 0.4612773060798645, -0.2632412612438202, 0.7041131854057312, -0.055927205830812454, 0.14135031402111053, -0.31234240531921387, 0.2582266628742218, -0.014638672582805157, 0.5879533290863037, -0.4391748607158661, -0.9650501012802124, -0.6661215424537659, 0.12065105885267258, 0.09082431346178055, -0.23727431893348694, -0.01938113383948803, 0.9200752973556519, -0.2658027112483978, -1.1099926233291626, 0.36483216285705566, 0.7838561534881592, 0.3014698028564453, 0.046251267194747925, 1.116685390472412, -0.04615895822644234, -0.27292826771736145, -0.5137598514556885, -0.23456573486328125, -0.025113768875598907, -0.728513777256012, -0.6985952258110046, 0.38870325684547424, -0.3469238877296448, -0.3430154621601105, -0.6747360229492188, -0.13296300172805786, 0.3707858622074127, -0.19304721057415009, -0.2364359349012375, -0.21165511012077332, 0.047190360724925995, 0.14830952882766724, -0.10520195215940475, -1.6101536750793457, -0.9371451139450073, -0.07111188769340515, 0.6223083734512329, -0.5354540348052979, -1.04497492313385, -0.43140530586242676, -0.8212149739265442, 0.023042457178235054, 0.20064403116703033, -0.823604941368103, 0.9343938231468201, -0.3274092972278595, 0.1292456090450287, -0.3346644937992096, -1.119803786277771, -0.22101187705993652, -1.136968970298767, -1.443835973739624, -0.33895793557167053, -0.3711976110935211, 0.48476365208625793, -0.4065866768360138, -0.6738396883010864, -0.1359763890504837, 0.008090737275779247, 0.11762000620365143, 0.64860600233078, -0.28868409991264343, -0.41607794165611267, -0.7106578350067139, -0.6562649607658386, 0.5070100426673889, -0.2141476273536682, 0.7061008214950562, 0.7677127122879028, 1.4029865264892578, 0.7251909375190735, 0.5364540815353394, 0.4391498863697052, 0.777324914932251, 0.1738731414079666, -0.49503961205482483, -1.9700554609298706, -0.3001056909561157, -0.37552058696746826]"
sc-copilot/INTEREST/interest_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef interest_pre_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.5166363716125488, 0.2611117362976074, -3.3677239418029785, -0.9011532664299011, 1.8516771793365479, -0.16153743863105774, 1.2261059284210205, 0.03299274295568466, -0.051146991550922394, -0.8320733308792114, -0.7341402769088745, 0.25665369629859924, 1.0580523014068604, 0.9191296100616455, -0.11475378274917603, 0.10184663534164429, 0.06953581422567368, -0.938664436340332, -0.21406003832817078, 0.9334920644760132, 0.3596472442150116, -0.18889087438583374, -0.534180760383606, -1.1777187585830688, 0.8217594623565674, 0.8897112607955933, 0.05000241845846176, -0.17517048120498657, -0.6292380094528198, 0.8764867782592773, 0.029121503233909607, 0.1444084495306015, 0.11380387097597122, -0.9869983792304993, 0.07077527046203613, -0.7193336486816406, 0.2034352868795395, 0.0530921034514904, -0.23074185848236084, -1.465345025062561, 0.5991677641868591, 0.5732442140579224, 0.46272456645965576, 0.4053044021129608, 0.5091657638549805, -0.38503319025039673, 1.5164014101028442, -0.3896118998527527, 0.20268283784389496, -1.8039098978042603, 0.10326078534126282, -0.10901675373315811, 0.2334328144788742, -0.13389888405799866, 1.3534860610961914, 0.8593734502792358, -0.05473944544792175, 1.263321876525879, -0.3907777667045593, -0.33348536491394043, 2.068140983581543, 0.7308323383331299, -0.4315854609012604, 1.0111148357391357, 0.526297926902771, 0.2877618074417114, -0.8557621836662292, 0.25650209188461304, -0.6255548000335693, -0.5796640515327454, -0.22511206567287445, 0.6761116981506348, -0.34356409311294556, 0.13789939880371094, 0.06247662752866745, 0.7353206872940063, -0.7473000884056091, -1.9541822671890259, -0.3753207325935364, 0.657733142375946, -0.044151630252599716, 0.13767637312412262, 1.503037452697754, -0.5567538738250732, 0.6791766881942749, -0.2695280909538269, -0.21536731719970703, -0.1852639764547348, 0.05040523409843445, 0.9534940719604492, 0.059723831713199615, -0.633202314376831, 0.39605912566185, -0.038356270641088486, -0.6100705862045288, -0.19881129264831543, -0.34306734800338745, 0.0008234791457653046, -0.3132614195346832, -0.5403040647506714, -0.13736885786056519, 0.12386766076087952, 0.24582327902317047, 0.20120349526405334, -0.6845256090164185, 0.3685363829135895, 1.0971368551254272, 0.263895183801651, -0.437656968832016, -1.473372459411621, -0.38452982902526855, 1.0408873558044434, -0.13262790441513062, 0.009129352867603302, -0.39895933866500854, -0.5702608227729797, 1.7296161651611328, -0.43282824754714966, -0.5253853797912598, 0.631371259689331, -0.8806729316711426, -0.8595800399780273, 1.8802969455718994, 1.5102012157440186, -0.67767333984375, -0.2670234143733978, 0.09082196652889252, 0.6449676156044006, 0.2506405711174011, -0.8825237154960632, 0.5131990313529968, -0.09997862577438354, -0.9796659350395203, 0.6207292079925537, -0.0018253698945045471, 0.30175939202308655, -0.1647641956806183, -0.5070885419845581, -0.11409172415733337, 0.7033172845840454, 0.7873989343643188, -0.3175196349620819, -0.36608368158340454, -1.2210066318511963, -0.1415899693965912, -0.6846798658370972, 0.3509412407875061, -0.35265299677848816, 1.000815510749817, 0.14145058393478394, -0.17947210371494293, -0.07731916010379791, 0.6311088800430298, 0.9162353873252869, 1.0832252502441406, -1.2405674457550049, 0.7018568515777588, -0.746761679649353, 0.2197970151901245, -0.18300095200538635, 1.0590109825134277, -0.13060390949249268, 0.21116198599338531, 1.3461847305297852, -0.15484954416751862, -0.8744703531265259, -0.1029614806175232, 0.7632988691329956, -0.12734068930149078, 1.282813310623169, -0.7168651819229126, -0.22341398894786835, 0.0335262306034565, -0.9060962200164795, 0.8274214863777161, -0.012794755399227142, 0.8547666072845459, -0.8317800760269165, 0.4142451882362366, -1.1284663677215576, 0.26085275411605835, -0.3895742893218994, 0.4192679226398468, 0.5137498378753662, -1.36582612991333, -0.28401151299476624, 1.1202800273895264, -0.6763672232627869, -0.5702205300331116, -0.38155531883239746, -0.6872101426124573, 0.8314080238342285, -1.3405766487121582, -0.05189795419573784, -0.8724228739738464, -0.28563112020492554, 0.8811584711074829, -0.4673224687576294, 0.198190838098526, 0.27806708216667175, -0.21911238133907318, -0.04474414885044098, -0.14952799677848816, 0.37573006749153137, -0.9388324022293091, 0.8373680710792542, 0.03937841206789017, 0.7644612193107605, 0.35316184163093567, -0.14792266488075256, 1.2684065103530884, -0.13881604373455048, -0.4492916464805603, 0.1136406809091568, -0.7379028797149658, -0.2240476906299591, -0.5012651085853577, -0.09695743024349213, -0.6297407150268555, 0.11604899168014526, -0.011137053370475769, -0.624950647354126, -0.012634806334972382, 0.5443997383117676, -0.40451574325561523, -0.7581211924552917, -0.6356496214866638, 0.14913557469844818, -0.2769972085952759, -0.0859498679637909, -0.34648585319519043, -0.49110162258148193, -0.3273742198944092, 0.5033349990844727, -0.077463798224926, 1.1646062135696411, -0.13146942853927612, 0.18118731677532196, 0.9052791595458984, -0.30821871757507324, 0.07352565228939056, 0.9343798756599426, 0.947739839553833, 0.708952784538269, 0.18158629536628723, 0.3041633367538452, 0.08487657457590103, -0.01060415804386139, -0.2674637734889984, 1.0449167490005493, 0.14507076144218445, -0.35804781317710876, 0.29887545108795166, 0.5843183994293213, -0.32930809259414673, -0.2893681228160858, -1.089870572090149, -0.6608908772468567, 0.06587603688240051, 0.2298160344362259, 1.1581425666809082, 0.19697067141532898, 1.1736094951629639, -0.3543011546134949, -0.6615176200866699, -0.11604312807321548, -0.8340044021606445, 0.34956181049346924, 0.7021097540855408, 0.08153225481510162, 0.9170970916748047, 0.006904862821102142, 0.6063821315765381, 0.9619701504707336, 0.0010658465325832367, 0.09576866030693054, 0.34533560276031494, -0.597958505153656, 0.11125653982162476, 1.550299882888794, -0.19151079654693604, -0.9074194431304932, -0.04933832585811615, 0.6617295145988464, -1.0620636940002441, -0.23493146896362305, 0.48583129048347473, 0.5829509496688843, -0.34625181555747986, 0.01976975053548813, 1.0444329977035522, -0.13226976990699768, -0.6561120748519897, 0.670038104057312, -0.9119064807891846, -0.11226031184196472, 0.5952719449996948, 0.00510198250412941, 0.02614365518093109, -0.9341705441474915, -0.011799577623605728, 0.823832094669342, 0.6471259593963623, 0.7607042193412781, 0.12614472210407257, -0.7517485618591309, 0.5832754969596863, -0.17842836678028107, 0.08131591230630875, -0.09243308007717133, 0.2747454047203064, -0.28171372413635254, -1.4109668731689453, 0.6762460470199585, -1.207310438156128, 1.0866692066192627, 0.4251739978790283, 0.6483858227729797, 0.14734433591365814, -0.6901605725288391, 0.745680570602417, -1.1925549507141113, -0.6891453266143799, -0.6424505710601807, 0.27107518911361694, 1.0449423789978027, -0.17494097352027893, 0.45240604877471924, -0.066209577023983, 0.18188287317752838, 0.8844180107116699, 0.38325315713882446, 0.36039891839027405, -0.8711931109428406, -0.271165668964386, 0.19268541038036346, 0.24129165709018707, 0.12143664062023163, -0.23815028369426727, 0.7627659440040588, 0.7572063207626343, -0.42872631549835205, 0.15172751247882843, -0.38548994064331055, -0.17342817783355713, -0.37773898243904114, -0.550000786781311, -0.30359163880348206, 0.8894122242927551, 0.4979599714279175, -0.8154977560043335, 0.614611029624939, -0.10476502031087875, 0.08761134743690491, 0.24035680294036865, -0.11885347217321396, 1.306694746017456, 0.8012332916259766, -0.19493435323238373, 0.44515979290008545, 0.8795400857925415, 0.18003961443901062, -0.022792592644691467, -0.34953993558883667, 0.7006291151046753, 0.6844478845596313, 0.3484891355037689, 0.06164067983627319, 0.3728310465812683, 0.6906803250312805, 0.1654575616121292, -0.11184203624725342, -0.297995388507843, 0.790030300617218, 0.24121776223182678, -0.0813831090927124, -0.8033895492553711, -0.40463513135910034, -0.4023219048976898, 0.554017961025238, 0.7692872881889343, -0.27211201190948486, 0.01389368250966072, 0.30602115392684937, 0.06978058815002441, -0.33195704221725464, 0.19410407543182373, 0.021100860089063644, 0.09092409908771515, 0.017894431948661804, -0.053177036345005035, -0.43324053287506104, -0.19325649738311768, 0.3849390149116516, 0.50240159034729, -1.0062947273254395, 0.3819498121738434, 0.2694629430770874, 0.8101010322570801, 0.6253613233566284, -0.7894258499145508, -1.0015662908554077, 0.7234776020050049, 0.025024697184562683, 0.3992546796798706, 0.2527569532394409, -0.6497971415519714, -1.22028386592865, 1.0587996244430542, -0.9646024107933044, 0.7362009286880493, 0.31139469146728516, -0.2918761372566223, -0.4119226932525635, 0.6201002597808838, 0.34459012746810913, 0.7560806274414062, 0.22075867652893066, -0.4608329236507416, -0.7032157778739929, 1.043994426727295, 0.728657066822052, 0.6879332065582275, 0.0813506692647934, 0.25962549448013306, 0.4101024866104126, 0.3220657706260681, 0.12544217705726624, 0.18491679430007935, -1.5820424556732178, -0.4541332721710205, 0.933434009552002, 0.49524497985839844, -0.2589854896068573, -0.6064813137054443, 0.16671431064605713, 0.09731188416481018, 0.5118920803070068, -0.215316504240036, 0.5925569534301758, -0.2972346842288971, -0.49473413825035095, 0.043763089925050735, -0.1643427014350891, 0.051823537796735764, 1.030909776687622, 0.033071376383304596, -0.06029181927442551, -0.06390830874443054, 0.7595393061637878, 0.32409173250198364, 0.31954360008239746, 0.6549026966094971, 0.22921176254749298, 0.8050444722175598, -1.5009782314300537, -0.8046022653579712, 0.04098134487867355, -0.08708412945270538, 0.43290001153945923, 0.4611508250236511, -0.13935449719429016, -0.6601839065551758, 0.6505436897277832, 0.11302167177200317, 0.038465507328510284, 0.6007786989212036, -1.4167397022247314, 0.6482203006744385, 0.5156721472740173, -0.9786266684532166, -0.08023080229759216, 0.8008491396903992, -0.6063355207443237, 0.27001193165779114, 0.363033264875412, 0.9256210327148438, -0.23698067665100098, 0.5069390535354614, 0.7935238480567932, -0.2805008292198181, 0.002827666699886322, -1.0172686576843262, -0.39085739850997925, -0.6704440116882324, 0.6223107576370239, 0.587803304195404, -0.3726431429386139, 0.29382914304733276, -0.047802217304706573, 0.7682535648345947, 0.07581649720668793, -0.028229381889104843, -0.19677521288394928, 0.08214348554611206, -0.6359922885894775, -0.48586946725845337, 0.23141071200370789, 0.3936823010444641, 0.17673656344413757, -0.30188748240470886, 0.06388277560472488, -0.8646360039710999, -0.1361803263425827, 0.27295830845832825, 0.30389338731765747, 0.38734549283981323, -1.4947134256362915, -1.121619462966919, -0.43143415451049805, -0.2924076318740845, 0.47263213992118835, 0.9619358777999878, -0.23647648096084595, 0.8333658576011658, -0.3726142346858978, 0.8347334861755371, -0.35629332065582275, -1.2560828924179077, 0.18225276470184326, 0.07123174518346786, -0.2855050265789032, -0.14438718557357788, -0.7178041338920593, -1.1083904504776, 0.4916592240333557, -0.29574573040008545, -0.7583521604537964, 0.9891594648361206, -0.6070626974105835, -0.4709326922893524, 0.2518025040626526, -0.34615087509155273, -0.26250123977661133, 0.390680730342865, -0.2888352572917938, -0.5421755909919739, -0.07206958532333374, -0.006949819624423981, -0.6098570823669434, 0.44000673294067383, 0.2424854338169098, 0.12289389967918396, 0.3440623879432678, 0.5690162777900696, -1.5213372707366943, 0.5663554668426514, -0.10715914517641068, 0.1737409234046936, -1.9324843883514404, 0.8870608806610107, -0.5721524953842163, -0.3681541085243225, -0.9574891328811646, -0.2890097498893738, 0.3279268741607666, -0.6248716115951538, -0.8399370908737183, -0.5982029438018799, -0.3438987135887146, 0.558275580406189, 0.38576188683509827, 0.34633225202560425, 0.16041292250156403, 0.2553454041481018, 0.4476305842399597, 0.44024959206581116, 0.7102372646331787, -0.06919525563716888, 0.5495517253875732, -0.16418060660362244, -1.139787197113037, 0.08153484761714935, -0.3944256901741028, -0.09679830074310303, 0.37664198875427246, -0.72102290391922, -0.046509839594364166, -1.3725296258926392, -0.10831516236066818, 0.012961812317371368, -0.14440475404262543, -0.24948948621749878, 0.9556929469108582, 0.3866780698299408, -0.5383832454681396, -0.0878337174654007, -0.9599506258964539, 0.2641927897930145, -0.9548130035400391, -0.4865449070930481, 0.32538115978240967, 0.022883117198944092, -0.17757005989551544, 0.1682075560092926, 1.3254188299179077, -0.5512468218803406, -1.1062744855880737, 0.09559863805770874, -0.3937833905220032, 0.33815497159957886, -0.5524935126304626, 1.207392692565918, -1.1523122787475586, -0.233879953622818, 1.3040591478347778, 0.3846207857131958, -0.006392620503902435, -0.3638341426849365, -0.5671350955963135, -0.4793168306350708, -0.2818406820297241, -0.10906662791967392, -0.5497103929519653, 0.806049644947052, -1.1797091960906982, 0.7572916746139526, 0.6129598021507263, -0.7165756225585938, -0.5494939088821411, -0.2950749397277832, -0.9772765040397644, 1.4701499938964844, -0.17886056005954742, 0.30556243658065796, 0.29223111271858215, -0.7103093266487122, -0.29143959283828735, -0.42155224084854126, 0.742910623550415, 0.17978978157043457, 1.336479902267456, -1.6519184112548828, -1.3013250827789307, -0.8990925550460815, 0.33262374997138977, 0.2465876042842865, 0.9931688904762268, 0.03429773449897766, 1.0296002626419067, 0.5305958986282349, 0.298928439617157, 0.28467926383018494, 0.4934648275375366, -0.04703248292207718, -0.6464856863021851, 0.7012794613838196, 0.5282397270202637, 0.8183622360229492, 0.3041490912437439, 2.1041548252105713, 0.6264790296554565, 0.9327242970466614, 0.3870806396007538, 0.5092700719833374, -0.816705584526062, 0.7083330154418945, -1.7345960140228271, -1.7985944747924805, -0.2800350785255432, -0.20608410239219666, -0.5345824956893921, -0.2792857587337494, 0.025648722425103188, 0.7122399806976318, -0.3990243077278137, -0.051576294004917145, -0.2485027313232422, -0.8013564348220825, -0.20966476202011108, 0.4489898085594177, 0.18878662586212158, 1.0703538656234741, 0.011104114353656769, 0.6470844745635986, 0.03441113978624344, 0.3139289617538452, 0.8281115889549255, 0.1818709671497345, -0.14314323663711548, 0.9586502909660339, 0.10859547555446625, 0.32130253314971924, -0.8337246775627136, 0.13754548132419586, -0.4424901008605957, 0.02447608858346939, -0.5546634197235107, -0.3415294587612152, -0.6908199787139893, -0.3830583989620209, -0.5244791507720947, 0.4126046299934387, 0.11236975342035294, -0.22972141206264496, 0.022236237302422523, -0.032541945576667786, -1.562558889389038, -0.05737997964024544, 0.5867732763290405, -0.6887187361717224, 0.11949445307254791, 1.2035791873931885, -0.21811191737651825, 0.09583425521850586, -0.12517791986465454, -0.16713371872901917, -0.6405289173126221, -1.2325315475463867, -0.9643071293830872, -0.5246345400810242, -0.1386404186487198, -0.47616803646087646, 0.19678163528442383, 0.8952997326850891, 0.003017731010913849, -0.20487534999847412, -1.2725744247436523, 0.025593101978302002, -0.557733952999115, 0.8128155469894409, -0.04993509501218796, -1.427961826324463, -0.22800172865390778, -0.1852835714817047, 0.20701591670513153, 0.16417324542999268, -0.30468666553497314, -0.26572883129119873, -0.4462474584579468, -0.5818507075309753, -0.6860276460647583, -0.6670501232147217, 1.0373984575271606, -0.9662222266197205, -0.19062834978103638, -0.21050897240638733, 0.3261340856552124, -0.8334829211235046, 0.09982290863990784, -1.0459327697753906, -0.11124417185783386, -0.7098199725151062, 1.0604588985443115, -0.4158293604850769, 0.051050879061222076, -0.3261913061141968, 0.37046292424201965, 0.27926477789878845, 0.27279797196388245, -0.6613495349884033, -0.13127480447292328, -0.9582301378250122, -0.1801101565361023, 0.20486730337142944, -0.3756239414215088, 0.09006576985120773, 0.5133305191993713, 2.1859588623046875, 0.4540037512779236, 0.4900653064250946, -0.26736992597579956, 0.8186992406845093, 0.4955540895462036, -0.5902484655380249, -1.0487476587295532, -0.47173961997032166, -0.45686453580856323]"
sc-copilot/INTEREST/interest_schedule_code.py,def interest_schedule_code():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[-0.3970905542373657, 1.0306131839752197, -3.640340805053711, -0.7645745277404785, 0.7465356588363647, -0.7681839466094971, 0.5420200824737549, -0.6829993724822998, -0.04734313488006592, -0.8608238697052002, -0.5671173334121704, 1.1091771125793457, 1.2434606552124023, 0.39263325929641724, -0.6980046033859253, 0.017815694212913513, -0.18084688484668732, -0.5609223246574402, -1.1092033386230469, 0.8046344518661499, 0.4670864939689636, 0.5462888479232788, -0.3641679286956787, -1.147473692893982, 0.8528038263320923, 0.9424371719360352, 0.7623679637908936, -0.24892102181911469, -1.1158552169799805, 0.9951590299606323, -0.7572339773178101, 0.6976925730705261, 0.34374845027923584, -0.9140866994857788, -0.4360712766647339, -0.44864127039909363, 0.19030599296092987, 0.6194620132446289, 0.09744176268577576, -0.7377667427062988, -0.5199729204177856, 0.785010814666748, 0.20440928637981415, 0.6950512528419495, 1.8615374565124512, -1.0954008102416992, 1.9495905637741089, 0.027843475341796875, 0.22175708413124084, -1.2530502080917358, 1.3252990245819092, -0.2585028409957886, 0.5737296938896179, -0.255649209022522, 0.8740890026092529, 0.697237491607666, -0.2041037380695343, 0.9216583967208862, 0.05510776489973068, -0.049746956676244736, 2.1733832359313965, 1.5351035594940186, -0.5452480316162109, 1.05685555934906, 0.027449484914541245, 0.7209426760673523, -0.7507729530334473, 0.7049492001533508, -0.5500233173370361, 0.022715449333190918, -0.586440920829773, 0.4271370768547058, 0.1702214628458023, -0.7903833389282227, -0.23192861676216125, 0.9266092777252197, -0.13291336596012115, -0.4383620619773865, -0.5048907995223999, 0.3773305416107178, -0.5323651432991028, -0.036780714988708496, 0.49205493927001953, 0.09503640979528427, 0.3132736384868622, -0.3261899948120117, -0.06169872730970383, -0.9129897356033325, -0.10715645551681519, 1.785589337348938, -0.2659551203250885, -0.9290341734886169, 0.05082597956061363, 0.2806623876094818, -1.3782055377960205, 0.1598110795021057, -0.6416751742362976, -0.1081274077296257, -0.42026451230049133, -0.5175284743309021, -0.22240249812602997, -0.39505523443222046, 0.24787944555282593, -0.21529234945774078, -0.6238092184066772, -0.2622142732143402, 0.295550674200058, -0.009097895585000515, 0.11595844477415085, -0.5991024374961853, -0.295526921749115, 1.4002830982208252, -0.5163718461990356, -0.43179139494895935, -0.5330690145492554, -0.4291175901889801, 0.9359904527664185, -1.2677092552185059, -0.22583873569965363, 0.349141001701355, -1.4788872003555298, -1.2445470094680786, 1.2805123329162598, 1.8878285884857178, -0.22911903262138367, 1.288495659828186, -0.45200490951538086, 1.3417727947235107, 0.5629556179046631, -1.5406334400177002, 0.5658887624740601, -0.2076350748538971, -1.1419103145599365, 0.16277678310871124, -0.4914624094963074, -0.19295960664749146, -0.4894276261329651, -1.1324905157089233, -0.28867074847221375, 0.712445855140686, 0.20359939336776733, -0.510373592376709, -0.14613495767116547, -1.347946047782898, -0.5890401601791382, -0.07430814206600189, -0.20471760630607605, -1.218948483467102, -0.1885490119457245, -0.3410513997077942, -0.09558946639299393, 1.5041680335998535, 0.22641463577747345, -0.05366549268364906, 0.7623776197433472, -1.1236658096313477, 0.5493645071983337, -0.8176546692848206, 0.2168765515089035, 0.6632987260818481, 1.344170093536377, -0.1094990000128746, -0.48840463161468506, 0.9861225485801697, -0.7033190727233887, -1.1681733131408691, 0.409189909696579, 1.3861192464828491, -0.7188899517059326, 0.1985313594341278, -0.7539949417114258, -0.768132746219635, -0.5680270195007324, -0.6280307173728943, 0.68373703956604, -0.5119061470031738, 0.46321284770965576, 0.3991868495941162, 1.0973081588745117, -0.7202914953231812, -0.1533975899219513, -0.5112497806549072, -0.09595049917697906, 0.8402626514434814, -1.4261727333068848, -0.2890632748603821, 0.6356366872787476, -1.0323970317840576, -1.066504955291748, -0.8165907263755798, -0.5274728536605835, 0.5658190846443176, -0.430675745010376, -0.1713251769542694, -1.2123386859893799, -0.30154383182525635, 0.3334267735481262, 0.6167288422584534, 0.35707032680511475, 0.4285399317741394, -0.697609007358551, -0.26881515979766846, -0.8661559820175171, 0.2464192509651184, -0.6955684423446655, 1.1965285539627075, -0.09970656037330627, 0.010597757995128632, -0.1842295229434967, -0.12923504412174225, 1.844097375869751, 0.15368805825710297, -1.1253827810287476, 0.47990280389785767, 0.05610725283622742, -0.3143571615219116, -0.6749258041381836, -0.22038212418556213, -1.1876842975616455, 0.71262526512146, 1.2430205345153809, -1.0403170585632324, -0.036878276616334915, -0.3069513738155365, 0.22620350122451782, -0.47229301929473877, -0.4520860016345978, 0.9074320793151855, -0.15593481063842773, 0.08834323287010193, -0.42404595017433167, -1.2872929573059082, -0.8250162601470947, 0.2746192514896393, 0.17342987656593323, 1.2298147678375244, 0.5211908221244812, 0.905316948890686, 1.4574787616729736, -1.1672461032867432, -0.3108656406402588, 0.9410718679428101, 0.43324729800224304, 0.2916998565196991, -0.3901141285896301, -0.20237937569618225, -0.22695603966712952, 0.32069337368011475, 0.056071698665618896, 0.9991427063941956, -0.45805442333221436, -0.009398523718118668, -0.11469177901744843, 0.9012746810913086, 0.10102295130491257, -0.30982744693756104, -0.5294122099876404, -1.3393487930297852, 0.7551392316818237, -0.2112686187028885, 0.8404979109764099, 0.5813146829605103, 2.175431728363037, -0.6734364032745361, -1.3148174285888672, -0.9585104584693909, -0.030867986381053925, 0.3390979766845703, -0.39247873425483704, -0.30072230100631714, -0.18581295013427734, -0.09170550107955933, 0.7200995683670044, 0.8453826904296875, -0.5420517325401306, -0.36607789993286133, 0.452553927898407, -0.36739426851272583, -0.7377539873123169, 1.3018388748168945, -0.2730264663696289, -1.5784516334533691, -0.5405901074409485, 0.25891003012657166, -0.4978654384613037, 0.6472598314285278, 0.2579854428768158, 0.539738118648529, 0.14060047268867493, -0.2727234661579132, 0.9498052597045898, 0.019882630556821823, -0.4360632300376892, 0.9561386108398438, -0.1260336935520172, -0.2698172926902771, 1.0004565715789795, 0.277884840965271, 0.26294180750846863, -0.5806439518928528, -0.22359104454517365, 0.7404190301895142, 0.1392461359500885, 1.0825326442718506, -0.447407990694046, -1.1465418338775635, 1.0299267768859863, -0.7643246650695801, 0.032788217067718506, 0.5575652718544006, 0.5099499225616455, -0.3432462513446808, -1.1257585287094116, 0.3179338574409485, -1.3180663585662842, 1.2284176349639893, 0.3173862099647522, 0.12507042288780212, 0.8690258264541626, -0.3018346428871155, 0.8772299885749817, -0.5359165668487549, 0.45183977484703064, -1.0226490497589111, -0.15691204369068146, 1.5668601989746094, -0.6426961421966553, 0.2217019945383072, 0.8056764602661133, 0.02428753674030304, 0.42295414209365845, 0.6732425689697266, 0.1852065622806549, -1.0327717065811157, 0.035108909010887146, -0.0904916524887085, 0.07179736346006393, 0.3294878602027893, -0.5261040925979614, 0.9220731854438782, 0.6114597916603088, -0.39237672090530396, 0.4895198941230774, -1.6466896533966064, -0.7139385938644409, -0.3225286602973938, -0.36139634251594543, -0.5786595940589905, 0.6857534646987915, -0.1521618664264679, -1.122559905052185, -0.25034981966018677, -0.0690966248512268, 0.3188619911670685, 0.597400963306427, -0.31174516677856445, 1.1914719343185425, 0.7104625105857849, -0.5546586513519287, 0.1501057744026184, 0.42740198969841003, 0.007899152114987373, -0.7323895692825317, -0.35237187147140503, -0.14923763275146484, 0.15813472867012024, 0.9143549203872681, 0.17006352543830872, 0.393562376499176, 0.28775712847709656, -0.2385595738887787, 0.20291770994663239, 0.5748106241226196, 1.126199722290039, 0.8010042309761047, 0.3540610074996948, -2.0767340660095215, 0.31916433572769165, 0.10899518430233002, 0.5420932173728943, 0.8339045643806458, -0.06062042713165283, 0.1872173547744751, -0.2981306314468384, 0.06101716309785843, 0.11413992941379547, 0.3174239993095398, 0.319912850856781, -0.2987585961818695, 0.4523850679397583, -0.18558698892593384, -0.014508560299873352, -0.5603682994842529, 0.5613146424293518, 0.43504977226257324, -1.1496024131774902, 0.4982738196849823, 0.7636707425117493, 0.5145654678344727, 0.27733099460601807, -0.17803345620632172, -1.532282829284668, 0.5830606818199158, 0.003485061228275299, 0.21741777658462524, 1.1338329315185547, -0.6275627613067627, -1.476973533630371, 0.09655268490314484, -0.684088945388794, 0.189156174659729, 0.2346298098564148, -0.08013911545276642, -0.16970199346542358, 0.43504831194877625, -0.16815882921218872, 1.000305414199829, 1.1632797718048096, -0.4253002107143402, -0.41438305377960205, 1.0517359972000122, 0.8777879476547241, 0.169569194316864, -0.04602964222431183, -0.17132000625133514, 0.2200189232826233, 0.6181136965751648, 0.08119872957468033, 0.15767160058021545, -1.7125922441482544, -0.44387272000312805, 1.3914899826049805, 0.7926800847053528, -0.6337997913360596, -0.9924878478050232, -0.4092395305633545, 0.5194264650344849, 0.9565889835357666, -0.21629929542541504, 0.9780583381652832, -0.3678341805934906, -0.9294198751449585, -0.06123736500740051, -0.9972418546676636, 0.33616694808006287, 1.5856629610061646, -0.2271658480167389, -0.7423783540725708, -0.3273024559020996, 1.0549815893173218, 1.1992149353027344, 0.9196439981460571, -0.02747008204460144, 0.850167989730835, 1.2952632904052734, -0.853432297706604, -0.4448776841163635, 0.200028657913208, 0.7728518843650818, 1.348340630531311, 0.24394911527633667, -0.27807703614234924, -1.028707504272461, 0.14280660450458527, 0.24351587891578674, 0.37548595666885376, 0.9183106422424316, -0.7765724658966064, 0.5013726949691772, 1.3831284046173096, -0.029938843101263046, 0.11099620908498764, 0.5872094035148621, -0.428323894739151, 0.30998939275741577, -0.11739496886730194, 0.31122589111328125, 0.26842379570007324, 1.0325087308883667, 1.0615993738174438, -0.6344296932220459, -0.4147176146507263, -0.9094043374061584, -0.12254489958286285, -0.5533021688461304, 0.4599529504776001, 0.9258820414543152, -0.8044390082359314, 0.5136725306510925, -0.4808690547943115, 1.0314176082611084, 0.7592548727989197, 0.4637749195098877, -0.3264462947845459, -0.24045833945274353, -0.004493172280490398, 0.144687682390213, 1.2858283519744873, 0.9916279315948486, 0.04522903263568878, 0.3059903085231781, 0.3937018811702728, -1.0253899097442627, -1.1315155029296875, 1.059872031211853, 0.8679063320159912, 0.7827550172805786, -0.5836187601089478, -1.6599245071411133, -0.01911398023366928, 0.0646166130900383, 0.6846129298210144, 0.6504200100898743, -0.5682324171066284, 0.5116533041000366, -0.5374921560287476, 0.4984091520309448, -1.4152501821517944, -1.1430320739746094, 0.24827717244625092, 0.08921679854393005, -0.31964972615242004, -0.8695594072341919, -0.06585732102394104, -1.0910475254058838, 0.6683017015457153, -0.5065338611602783, -1.7087507247924805, 0.743489682674408, -0.4330148696899414, -0.4263381361961365, 0.17234642803668976, -0.5999131202697754, -0.5430575013160706, 0.3916513919830322, -0.43619096279144287, -0.6466246247291565, -0.4759547710418701, -0.09628038853406906, -0.32052668929100037, 0.4471738636493683, 1.0722174644470215, 0.8601226806640625, 0.43477728962898254, -0.475352019071579, -1.3600834608078003, 0.12073574215173721, -0.4555129408836365, -0.11403393000364304, -1.5871021747589111, 0.7734664678573608, -0.1336057335138321, -0.024381548166275024, -0.8229318857192993, -0.6900478601455688, 0.4565022587776184, -0.02968725562095642, -0.9808213710784912, -0.7015366554260254, -0.7004449367523193, 1.0918868780136108, 0.544123649597168, 0.0016032643616199493, 0.33142074942588806, 0.7742936611175537, 0.22182558476924896, 0.17909808456897736, 0.16855449974536896, -0.18883934617042542, 0.3120902180671692, -0.43472349643707275, -0.932573139667511, 0.26454421877861023, -0.3371402621269226, -0.2881626784801483, -0.139003187417984, 0.20192377269268036, -1.187476396560669, -0.7524865865707397, -0.6821240186691284, 0.6924999952316284, -0.18255707621574402, -0.359582781791687, 0.6408239006996155, 0.08508997410535812, -0.1849212795495987, 0.6535778045654297, -0.9219605922698975, 0.23433813452720642, -1.0920677185058594, -0.31567859649658203, 0.2701975703239441, 0.5936376452445984, 0.18839018046855927, 0.09133286774158478, 0.8249571323394775, -0.7829227447509766, -0.76517653465271, 0.02454085648059845, -0.3441559076309204, 0.018867559731006622, 0.1945301592350006, 0.6167003512382507, -1.3112256526947021, -0.36992737650871277, 2.147794485092163, -0.32095110416412354, 0.8653485774993896, -0.0820530578494072, -0.22107364237308502, 0.3344460129737854, 0.6622793078422546, 0.35741108655929565, 0.09982546418905258, 0.6984742879867554, -0.3654857277870178, 1.5775035619735718, -0.120337575674057, 0.13024312257766724, -0.8374954462051392, -0.48513907194137573, -0.6858034729957581, 1.7800073623657227, 0.2692772448062897, 0.7737706899642944, 0.6380048394203186, -1.2143524885177612, -0.7222364544868469, 0.1351795494556427, 1.2283380031585693, -0.0001341700553894043, 1.0808967351913452, -2.074854850769043, -1.1396796703338623, -1.3380866050720215, 0.20425893366336823, -0.816120982170105, 0.9206964373588562, -0.1248944103717804, 1.2190850973129272, 0.5946564078330994, 0.47021225094795227, 0.6532995700836182, 0.296098917722702, 0.5273549556732178, -1.3786194324493408, 1.5322468280792236, 0.8291736245155334, 1.4980850219726562, -0.5296074151992798, 2.100222110748291, 0.7837059497833252, 0.6042036414146423, 0.7911701202392578, -0.011921457946300507, -0.7696377038955688, 0.4663717746734619, -1.753823161125183, -1.3904435634613037, -0.5542818903923035, -0.538043737411499, -0.061061929911375046, -0.6177778840065002, -0.12781520187854767, 1.2487210035324097, 0.11219055205583572, 0.3357783555984497, 0.5343595743179321, -0.9994165897369385, -1.204606056213379, 0.2761855721473694, 0.47982192039489746, 0.7161651849746704, -0.3005007803440094, 0.22714892029762268, 0.6827439665794373, -0.05111739784479141, 0.6548172235488892, -0.221368670463562, -0.6819267272949219, 0.36482924222946167, 0.30564194917678833, 0.2001352608203888, -0.2705839276313782, -0.13453081250190735, -0.3220411539077759, 0.3530900180339813, -0.8361822962760925, -0.9481251239776611, -1.2687861919403076, -0.21734586358070374, -0.10659467428922653, 0.3578096628189087, -0.9262205362319946, 0.18753427267074585, -0.25900307297706604, 0.09599697589874268, -0.5064173936843872, -0.06378881633281708, 1.3313329219818115, 0.2509863078594208, 1.4190043210983276, 1.127113699913025, 0.12987735867500305, -0.5123146772384644, -0.20991671085357666, -0.836751401424408, -0.9091228246688843, -0.8787415027618408, -1.2590570449829102, -0.05082414671778679, 0.7954175472259521, -0.18361276388168335, 0.13996803760528564, 0.36572396755218506, 0.38175156712532043, -0.7328774929046631, -1.6558873653411865, 0.19477388262748718, -0.4272863268852234, 0.43302208185195923, -0.31422656774520874, -0.8802378177642822, 0.5202329754829407, -0.23631873726844788, 0.5056175589561462, 0.18989968299865723, -0.8864701986312866, -0.27174925804138184, -0.5117548704147339, 0.5592554211616516, -1.1588152647018433, -0.48709046840667725, 1.366779088973999, 0.44755667448043823, 0.36986470222473145, -0.84513258934021, -0.4726911783218384, -1.2399978637695312, -0.3488413989543915, -1.1575100421905518, 0.875141441822052, -0.41229069232940674, 0.8554304838180542, 0.17543905973434448, 0.1317281275987625, -0.3658328652381897, -0.2775700092315674, 1.3941419124603271, 0.31719720363616943, -0.488785982131958, 0.1975494623184204, -1.2224699258804321, 0.16283176839351654, 0.6945720911026001, 0.8572636842727661, -0.2810699939727783, 1.2745119333267212, 2.593223810195923, 0.017282625660300255, 0.7878322005271912, -0.5973836183547974, -0.14847597479820251, 0.4601157307624817, -0.12505310773849487, -0.5067129731178284, -0.553934633731842, -0.9935344457626343]"
sc-copilot/INTEREST/interest_test.py,def test_interest_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.014159396290779114, 0.6765474081039429, -3.493624448776245, -0.7709086537361145, 0.7713769674301147, -0.8947194218635559, 0.9399802684783936, -0.648091733455658, 0.6107150316238403, -0.37421295046806335, -0.23057618737220764, 1.2828128337860107, 0.4218364357948303, 0.4877926707267761, -1.2322523593902588, -0.44283297657966614, 0.4548766613006592, -0.7311530113220215, -0.5524598956108093, 0.2802966833114624, 0.7952074408531189, 0.07574380189180374, -0.8342569470405579, -0.9713221192359924, 0.9184724688529968, 0.36969566345214844, 0.261771559715271, 0.15836486220359802, -0.6712876558303833, 0.37696412205696106, -0.36977773904800415, 0.2758769989013672, 0.9354106187820435, -1.4234459400177002, -0.7001948356628418, -0.6255369782447815, 0.16656668484210968, 0.8024763464927673, -0.0984867513179779, -0.22334672510623932, -0.2504692077636719, 1.2832391262054443, 0.08159972727298737, 0.38062065839767456, 2.2019052505493164, -0.901073694229126, 1.5412211418151855, 1.083718180656433, 0.2267470359802246, -1.1790497303009033, 0.8807500600814819, -0.6327810883522034, 0.7492681741714478, -0.025102172046899796, 0.8989466428756714, 0.5851715207099915, -0.7458052635192871, 0.9832218289375305, 0.4511822462081909, -0.7132188081741333, 1.19374680519104, 1.1050615310668945, -0.5688520669937134, 0.558993935585022, -0.13965775072574615, 0.6017829179763794, -0.8655795454978943, -0.05326944589614868, -0.41798973083496094, 0.3613619804382324, 0.14416125416755676, 0.2862352132797241, 0.24965886771678925, -0.8264473676681519, -0.26008474826812744, 0.4589378833770752, -0.21506023406982422, -0.2398143857717514, -0.9437068104743958, 0.011953218840062618, -0.2272392213344574, -0.5608871579170227, 0.5698070526123047, 0.530732274055481, 0.6403031349182129, -0.7592928409576416, -0.022339247167110443, -1.1268054246902466, -0.2334681749343872, 1.6465703248977661, -0.0014261305332183838, -0.4103182554244995, -0.28023606538772583, 0.6416672468185425, -1.3409667015075684, 0.09471262246370316, -0.2564546763896942, 0.5437624454498291, -0.5692833662033081, 0.02202807366847992, -0.2252337634563446, -0.45771870017051697, 0.049862876534461975, -0.6736676096916199, -1.1788792610168457, -0.13383075594902039, -0.12725143134593964, -0.32748648524284363, -0.06501206755638123, -0.8920143842697144, -0.3529585003852844, 1.3240509033203125, -1.0573310852050781, -0.023426774889230728, -0.7033654451370239, -0.2314903736114502, 0.9382920265197754, -0.5321236848831177, -0.6202507019042969, 0.22027301788330078, -1.3228994607925415, -0.4422473907470703, 0.47446408867836, 2.130065679550171, -0.7631953954696655, 1.3288534879684448, -0.9569634199142456, 1.2689158916473389, 0.5621662139892578, -0.5266662836074829, 0.47963276505470276, 0.22762441635131836, -1.2976816892623901, -0.22279873490333557, -0.9939318895339966, -0.2108629047870636, -0.1733299046754837, -0.5391864776611328, -0.6179193258285522, 0.32957154512405396, -0.7104736566543579, -0.37878912687301636, -0.23487362265586853, -0.15350088477134705, -0.01711432635784149, -0.2356252670288086, 0.15526342391967773, -1.187140941619873, -0.46304577589035034, -0.44809263944625854, 0.20384106040000916, 1.0170022249221802, 0.8022204637527466, -0.12704706192016602, 0.2751748263835907, -0.6502155065536499, 0.11770837008953094, -0.7059544920921326, 0.6273667812347412, 1.1335262060165405, 0.4595167934894562, -0.16612614691257477, -0.6907010078430176, 0.48674508929252625, -0.8290209174156189, -0.9320542812347412, 0.3024783730506897, 2.0062716007232666, 0.1268967092037201, -0.37310975790023804, -0.7208735942840576, -1.129501223564148, -0.46827003359794617, -0.8491932153701782, 0.18853846192359924, -0.07299740612506866, 0.5499131679534912, 0.06222523748874664, 1.2877461910247803, -0.2759769558906555, -0.04386884719133377, -0.48723384737968445, -0.09940450638532639, 1.0272257328033447, -0.8789591193199158, -0.8057992458343506, 0.9685006141662598, -0.9164276123046875, -0.4579981863498688, -0.6492301225662231, 0.2840638756752014, -0.16684456169605255, -0.9636240601539612, -0.33467593789100647, -1.1101772785186768, -1.0437169075012207, -0.09782642126083374, 0.6474279761314392, 0.6112920045852661, 0.2711978852748871, -0.48701074719429016, -0.3302680552005768, -0.6188644170761108, 0.3744199275970459, -0.5818837285041809, 0.23864781856536865, -0.37025904655456543, -0.7628883123397827, -0.1623326539993286, -0.2330915927886963, 1.8951886892318726, 0.25482118129730225, -0.8653759956359863, 0.6315124034881592, 0.5848369598388672, 0.046389881521463394, -0.6006746292114258, -0.34788721799850464, -0.9859191179275513, 0.7850732803344727, 1.3061497211456299, -1.2107470035552979, 0.11157333850860596, -0.5555086731910706, 0.28563421964645386, 0.2205335795879364, -0.5281695127487183, 0.7918314933776855, -0.43615344166755676, -0.2523772716522217, 0.05688086524605751, -1.5297067165374756, -0.46388712525367737, 0.2452741265296936, 0.22864823043346405, 1.3894221782684326, -0.08846993744373322, 0.8273434638977051, 0.954480767250061, -0.8824319243431091, -0.28034284710884094, 0.8622186779975891, 0.20169690251350403, 0.5692618489265442, -0.050116490572690964, -0.08676333725452423, -0.3037010133266449, 0.3291281461715698, 0.293383926153183, 1.0598713159561157, -0.3383204936981201, 0.7810988426208496, -0.25524386763572693, 0.7690984010696411, 0.24444794654846191, 0.261549174785614, 0.10594630241394043, -1.2012512683868408, 0.4166862964630127, 0.07923970371484756, 0.7334752678871155, -0.2506883442401886, 2.2465646266937256, -0.4633273482322693, -1.3473418951034546, -1.4927432537078857, -0.38254815340042114, -0.08640691637992859, -0.6889203786849976, -0.2886015772819519, -0.44007188081741333, 0.19634227454662323, 1.2880549430847168, 0.8665125370025635, -0.324765682220459, -0.5207006335258484, 0.41515052318573, -0.4408905506134033, -0.3588642179965973, 1.0055409669876099, -0.40929606556892395, -0.9115790128707886, -0.21224400401115417, 0.3511374592781067, -0.1351875364780426, 0.31546640396118164, -0.038190484046936035, 0.04214408993721008, 0.4553672671318054, 0.03341059386730194, 1.0077210664749146, 0.0990082249045372, -0.16967074573040009, 1.3378584384918213, -0.10008420795202255, -0.30027079582214355, 0.4098713994026184, -0.014977551065385342, 0.3842916190624237, -0.5075322389602661, 0.034671880304813385, 0.9878547191619873, 0.38032668828964233, 1.3207799196243286, 0.16349664330482483, -0.7346867322921753, 0.6166020631790161, -0.9895840883255005, 0.3899040222167969, 0.4737818241119385, 0.15156911313533783, 0.2054956704378128, -1.068787932395935, 0.1043761819601059, -1.315902829170227, 0.8188769817352295, 0.4180755615234375, 0.24234969913959503, 0.44062185287475586, -0.6539748311042786, 0.836868166923523, -0.15354909002780914, 0.43554049730300903, -0.8709648847579956, -0.32260534167289734, 0.5951438546180725, -0.31434550881385803, 0.46786028146743774, -0.02708624117076397, -0.11116994172334671, 0.7934999465942383, 0.9765321016311646, 0.369398295879364, -0.7982844710350037, 0.3049665689468384, -0.47304362058639526, 0.03993157297372818, 0.5027424097061157, -1.042580485343933, 1.0112873315811157, 0.5997713804244995, -0.5024327635765076, 0.7962696552276611, -1.4636259078979492, -0.14285770058631897, -0.40377509593963623, 0.24080264568328857, 0.18517687916755676, 0.7779504060745239, -0.2997017502784729, -0.9806498289108276, 0.027906805276870728, -0.24154162406921387, -0.11481873691082001, 0.8971849083900452, -0.24810999631881714, 0.9781022071838379, 0.7485525012016296, 4.827417433261871e-05, -0.010534103959798813, 0.156528502702713, 0.03539395332336426, -0.4237087368965149, -0.7635082006454468, 0.313518226146698, 0.33557307720184326, 0.7729279398918152, 0.4346834421157837, 0.7196131944656372, 0.6347617506980896, -0.640188992023468, 0.6141462922096252, 0.7770833969116211, 1.415565848350525, 1.2083144187927246, 0.311139315366745, -1.841314435005188, 0.7207791209220886, -0.1255066841840744, 0.6523982286453247, 0.9443583488464355, -0.20109286904335022, 0.1242961436510086, -0.3903619945049286, 0.18521404266357422, -0.2318304479122162, 0.38451555371284485, 0.24798686802387238, -0.08351624011993408, 0.1595742553472519, 0.21891897916793823, 0.10262904316186905, -0.6030893325805664, 0.6861733794212341, 0.7334699630737305, -1.1070261001586914, 0.5342342853546143, 0.6294976472854614, 0.3595920205116272, 0.0808623880147934, -0.03532123565673828, -1.1962931156158447, 0.6723066568374634, 0.362460732460022, -0.1575571745634079, 0.32445359230041504, -1.3361097574234009, -1.1849561929702759, -0.1949477195739746, 0.03387725353240967, -0.053289055824279785, -0.13409671187400818, -0.17486491799354553, -0.4917997121810913, 0.024364762008190155, -0.20656734704971313, 1.2838636636734009, 0.8960188627243042, -0.5085620284080505, 0.2366637885570526, 0.725250244140625, 0.10809826105833054, 0.36007606983184814, -0.39232897758483887, -0.6235033273696899, -0.25152158737182617, 0.5573785305023193, 0.45647233724594116, 0.518290102481842, -1.928110957145691, -0.63921058177948, 0.7540619373321533, 0.20714817941188812, -0.4092004895210266, -0.6711265444755554, -0.40509462356567383, 0.059558574110269547, 1.0316803455352783, -0.24530841410160065, 0.5586486458778381, -0.6728450059890747, -0.9875417947769165, -0.01981262117624283, -0.6903983950614929, 0.35876375436782837, 1.954677700996399, 0.185943141579628, -0.5974016189575195, -0.20728987455368042, 0.3329983353614807, 0.1171700656414032, 0.7252897024154663, 0.05927196145057678, 0.9220083951950073, 0.48772764205932617, -1.1914080381393433, 0.023926690220832825, 0.11859022080898285, 0.4546540081501007, 1.3010704517364502, 0.07760090380907059, -0.2738521099090576, -0.6900461912155151, 0.5127863883972168, 0.5775780081748962, 0.5976529717445374, 0.7977051138877869, -0.8424184918403625, 0.14626789093017578, 0.8588264584541321, -0.2620036005973816, -0.3190809488296509, 0.7532119750976562, -0.3283958435058594, 0.13192057609558105, -0.07395943999290466, 0.31578612327575684, 0.9604640007019043, 0.2634938657283783, 0.6396328210830688, -0.6446033120155334, -0.7238067388534546, -1.2073414325714111, -0.2568695843219757, 0.006181821227073669, 0.6633655428886414, 0.9092679619789124, -0.6333267688751221, 0.5417332053184509, -0.674020528793335, 0.8312313556671143, 0.25704553723335266, 0.35934099555015564, -0.36743617057800293, -0.10875461995601654, -0.3377712368965149, 0.6084239482879639, 1.07178795337677, 0.4498208165168762, 0.013992682099342346, 0.024463698267936707, 0.8755348324775696, -0.5708025693893433, -1.0541884899139404, 0.2810661792755127, 0.29967036843299866, 0.7774195671081543, -1.0488771200180054, -1.566651701927185, -0.4435839056968689, -0.3941444754600525, 0.8304109573364258, 0.5979866981506348, -0.19751349091529846, 1.1055845022201538, -0.08914917707443237, 0.44284090399742126, -1.4587364196777344, -1.22110915184021, -0.0650530755519867, 0.13567528128623962, -0.12973672151565552, -0.5191124081611633, 0.012772195041179657, -1.1685601472854614, 0.5737720131874084, -0.6960192918777466, -1.3146135807037354, 0.7871422171592712, -0.32800939679145813, -0.06077420711517334, 0.35604363679885864, -0.8146542310714722, -0.30798235535621643, 0.3264836072921753, -0.6481393575668335, -0.5152072906494141, -0.5775548219680786, 0.02120319753885269, -0.13538646697998047, 0.3721906542778015, 0.7786107659339905, 0.6269164085388184, 0.40886446833610535, -0.2727103531360626, -1.4278595447540283, -0.34386518597602844, -0.4932096004486084, -0.1478448510169983, -1.6837244033813477, 0.11689452826976776, 0.06719216704368591, -0.5173470377922058, -0.9065608978271484, -0.2778415083885193, 0.7085686922073364, 0.17578718066215515, -0.9148176312446594, -0.6074919700622559, -0.9828182458877563, 1.1572190523147583, 0.2870481014251709, -0.3195956349372864, 0.41035324335098267, 0.24592317640781403, 0.09888103604316711, -0.3379387855529785, -0.07207222282886505, 0.09538314491510391, 0.6189067959785461, 0.017097163945436478, -0.7418686151504517, 0.734451174736023, -1.017778992652893, -0.8318624496459961, -0.25742703676223755, 0.41613590717315674, -0.5930684804916382, 0.1981971114873886, -0.8415724635124207, 0.7775472402572632, -0.10486172139644623, 0.3854394257068634, 0.8827683329582214, 0.5455886125564575, -0.11020021885633469, 0.6941869258880615, -0.3441840410232544, -0.14317764341831207, -0.7627633810043335, -1.0261139869689941, -0.1809101700782776, 0.9768284559249878, -0.23869365453720093, 0.2886222004890442, 0.5107128024101257, -0.905660092830658, -0.6857466101646423, -0.3654974699020386, 0.10416974872350693, 0.23218902945518494, 0.19902455806732178, 0.8275549411773682, -1.6012617349624634, -0.060191571712493896, 2.203744411468506, 0.08062756806612015, 1.2995256185531616, -0.09868789464235306, -0.1806308776140213, 0.46948832273483276, 0.7115398645401001, 0.10045796632766724, 0.21908864378929138, 0.5350933074951172, -0.47864654660224915, 1.6556105613708496, -0.7191271185874939, -0.05395400524139404, -0.4169866442680359, -0.21655555069446564, -0.08678006380796432, 1.6536706686019897, -0.02123834937810898, 0.5838278532028198, 0.500375509262085, -0.8297544717788696, -0.7220895886421204, 0.5523269772529602, 1.1200456619262695, -0.5604994893074036, 1.0476579666137695, -2.043482780456543, -1.5848605632781982, -1.212433099746704, 0.4187621772289276, -0.8536559343338013, 1.0117548704147339, 0.35206326842308044, 1.1037895679473877, 0.6273004412651062, 0.5746598243713379, 0.09754060208797455, -0.23225952684879303, 0.34014222025871277, -1.3835456371307373, 1.4927703142166138, 0.9767816066741943, 1.7085554599761963, -0.3205774128437042, 2.272306203842163, 1.1110764741897583, 0.10968592762947083, 0.4053801894187927, -0.14673958718776703, -0.4515259265899658, 0.5538599491119385, -0.989006757736206, -0.8461454510688782, -0.5247548818588257, -0.652819812297821, -0.2150954306125641, -0.4036397635936737, -0.17076949775218964, 1.0664863586425781, 0.3293614387512207, 0.14053085446357727, 0.0453823059797287, -0.2305532693862915, -1.4892826080322266, 0.9997720718383789, 0.6115500926971436, 0.47343793511390686, -0.1751728653907776, 0.7685098648071289, 0.17361775040626526, 0.1589684784412384, 1.1457676887512207, -0.35179537534713745, -1.0069884061813354, -0.19451653957366943, 0.1022888720035553, 1.0630837678909302, 0.0029809698462486267, -0.07097518444061279, -0.45417410135269165, -0.3031310439109802, -0.6655077338218689, -0.640540599822998, -1.1888887882232666, -0.3670583665370941, 0.3958117365837097, 0.6092586517333984, -0.5086271166801453, 0.4128129482269287, -0.26686254143714905, 0.32967543601989746, -0.4181355834007263, -0.22362065315246582, 0.6430855989456177, 0.07790165394544601, 1.7934679985046387, 0.8301002979278564, 0.47383567690849304, -0.181799978017807, -0.8194195032119751, -0.6012318134307861, -0.9306256771087646, -1.1417009830474854, -1.2204351425170898, 0.16871613264083862, 1.241440773010254, 0.27213457226753235, 0.09803859889507294, 0.24525713920593262, 0.19952479004859924, -1.0531665086746216, -1.2555890083312988, -0.2376309633255005, -0.693132758140564, 0.6948561668395996, -0.5660918951034546, -0.2994913160800934, 0.5742600560188293, -0.14636573195457458, -0.05996210128068924, 0.6360848546028137, -0.1173962950706482, 0.4043123126029968, -0.8681736588478088, 0.7892669439315796, -1.1773985624313354, -0.5641425251960754, 1.1347812414169312, 0.14901293814182281, 0.672981858253479, -0.6755402088165283, -0.20944787561893463, -1.2914927005767822, -0.5195881724357605, -0.7751480340957642, 0.949901282787323, 0.08208898454904556, 0.22550924122333527, 0.3303433656692505, -0.13983716070652008, -0.5437496900558472, 0.26251518726348877, 0.9983302354812622, -0.06272906064987183, -0.5754899382591248, -0.432758092880249, -0.907812237739563, 0.1899830400943756, 0.33910369873046875, 0.8456991910934448, -0.2699677646160126, 0.9592037796974182, 2.960383653640747, -0.18666893243789673, 0.4275819659233093, -0.39021235704421997, -0.32385027408599854, 0.38808345794677734, -0.5588126182556152, -0.9483023881912231, 0.03008030168712139, -0.9014961123466492]"
sc-copilot/INTEREST/interest_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef interest_post_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.5525926351547241, 0.20815587043762207, -3.3277316093444824, -0.885078489780426, 1.9841351509094238, -0.18591824173927307, 1.1321052312850952, 0.04229941591620445, 0.03970339521765709, -0.801103949546814, -0.6413513422012329, 0.04523121193051338, 1.0465716123580933, 0.8350507020950317, -0.12796084582805634, 0.10405620187520981, 0.0896555632352829, -1.0165575742721558, -0.3044774532318115, 0.9038448333740234, 0.5269008874893188, -0.16748791933059692, -0.4924309253692627, -1.0799492597579956, 1.0850199460983276, 1.0655722618103027, 0.11727692931890488, -0.1716552972793579, -0.626832127571106, 0.7483552694320679, -0.04954768717288971, 0.0821402296423912, 0.23337049782276154, -0.7979546785354614, 0.11515524983406067, -0.6584872007369995, 0.20576661825180054, -0.11094067245721817, -0.21757665276527405, -1.2977588176727295, 0.4625803530216217, 0.5444137454032898, 0.3722844421863556, 0.4956934452056885, 0.461393803358078, -0.481253981590271, 1.3814363479614258, -0.3560653626918793, 0.15980592370033264, -1.8353021144866943, 0.13629154860973358, -0.32276651263237, 0.3139515519142151, -0.16340184211730957, 1.2191540002822876, 0.785132884979248, 0.05453848838806152, 1.3139793872833252, -0.4282606840133667, -0.37991863489151, 1.9831269979476929, 0.6176567077636719, -0.5116130113601685, 0.9116238355636597, 0.3471584916114807, 0.29666072130203247, -0.8152543306350708, 0.25419163703918457, -0.6855147480964661, -0.5365653038024902, -0.2241261601448059, 0.55116868019104, -0.20462189614772797, 0.20878437161445618, -0.014360588043928146, 0.8268040418624878, -0.7148098945617676, -2.013798236846924, -0.413789838552475, 0.7826528549194336, -0.1720566749572754, -0.06400824338197708, 1.4493589401245117, -0.5022088289260864, 0.6326892971992493, -0.37803125381469727, -0.10817375779151917, -0.12530165910720825, 0.1016475111246109, 0.9036571383476257, 0.11490610986948013, -0.6880154609680176, 0.4319310188293457, -0.0857437252998352, -0.551715612411499, -0.2604050040245056, -0.15507055819034576, -0.0860353335738182, -0.37352511286735535, -0.3296557068824768, -0.1715756207704544, 0.23459428548812866, 0.29430636763572693, 0.10619784891605377, -0.5567023754119873, 0.48614782094955444, 1.2908926010131836, 0.4832204580307007, -0.5899280905723572, -1.4967955350875854, -0.30074989795684814, 0.8827524185180664, -0.045150887221097946, -0.10509280115365982, -0.35031816363334656, -0.6000814437866211, 1.731555700302124, -0.5422548055648804, -0.6264985799789429, 0.6670292615890503, -0.7936233282089233, -0.7120317220687866, 1.789265513420105, 1.4783623218536377, -0.4803520441055298, -0.35712486505508423, 0.222097247838974, 0.4905607998371124, -0.008288927376270294, -0.9279093742370605, 0.5659923553466797, -0.10256567597389221, -1.0494098663330078, 0.4985913634300232, 0.10403640568256378, 0.28342553973197937, -0.0716276615858078, -0.5164477825164795, 0.08623641729354858, 0.5724116563796997, 0.7314983606338501, -0.26320192217826843, -0.24829907715320587, -1.1569781303405762, -0.06576795130968094, -0.7334665060043335, 0.201753169298172, -0.374142050743103, 0.9997740983963013, 0.02426430955529213, -0.20813655853271484, -0.1286815106868744, 0.7359959483146667, 0.8131168484687805, 1.015027403831482, -1.2241976261138916, 0.7130507826805115, -0.6510764360427856, 0.26027193665504456, -0.12146897614002228, 1.1812599897384644, -0.10232000052928925, 0.014656901359558105, 1.3680033683776855, -0.0723375529050827, -0.912224531173706, -0.06775953620672226, 0.5573410391807556, -0.13336290419101715, 1.307811975479126, -0.7878909707069397, -0.33331388235092163, 0.11737397313117981, -0.9243859052658081, 0.7879546880722046, -0.13518421351909637, 0.7945239543914795, -0.9387099146842957, 0.3803253471851349, -1.172563910484314, 0.29467499256134033, -0.527662992477417, 0.4570755064487457, 0.3876420259475708, -1.2251923084259033, -0.1176212728023529, 1.1875991821289062, -0.8018624186515808, -0.8203873634338379, -0.3029116690158844, -0.5412383675575256, 0.7174000144004822, -1.311384677886963, 0.12198144197463989, -1.0199811458587646, -0.1965673267841339, 0.8680080771446228, -0.6471068859100342, 0.21023154258728027, 0.3285922408103943, -0.23105888068675995, 0.019580742344260216, -0.16026359796524048, 0.34519168734550476, -0.9054183959960938, 0.7336533069610596, -0.07916197180747986, 0.8954904675483704, 0.27484217286109924, -0.026233557611703873, 1.1449427604675293, -0.17220713198184967, -0.5238974094390869, 0.18642286956310272, -1.0462490320205688, -0.4225500226020813, -0.38490819931030273, -0.08183792978525162, -0.6846892833709717, 0.05596115440130234, 0.34006088972091675, -0.5335009098052979, 0.05838724970817566, 0.48199865221977234, -0.39009368419647217, -0.6657760143280029, -0.7318833470344543, 0.2885957360267639, -0.1278298795223236, -0.053858812898397446, -0.20617184042930603, -0.4845237731933594, -0.3013383746147156, 0.4786641299724579, 0.04293864965438843, 1.1951754093170166, 0.030821505934000015, 0.261056512594223, 1.109918236732483, -0.33354073762893677, 0.06868419051170349, 0.8343108892440796, 1.0881694555282593, 0.5707361698150635, 0.23649248480796814, 0.5093772411346436, -0.1893729418516159, 0.04225658252835274, -0.2594043016433716, 0.9703741073608398, 0.12150520086288452, -0.459534615278244, 0.20784781873226166, 0.6550189256668091, -0.22969761490821838, -0.4802098274230957, -1.1355844736099243, -0.7110140323638916, 0.1185753270983696, 0.3877776861190796, 1.2143430709838867, 0.06642153114080429, 1.0367414951324463, -0.30538031458854675, -0.6873430609703064, -0.23050984740257263, -0.6751208901405334, 0.4782503545284271, 0.6068553328514099, 0.0370880626142025, 0.8480083346366882, 0.09574561566114426, 0.6969085931777954, 0.9766055345535278, -0.008100088685750961, 0.010143790394067764, 0.48447185754776, -0.6831390261650085, 0.03081183135509491, 1.435460090637207, -0.209854394197464, -0.9061000347137451, -0.08348234742879868, 0.5837085843086243, -1.1529210805892944, -0.37353184819221497, 0.37766730785369873, 0.5710614919662476, -0.44831472635269165, 0.11063893884420395, 1.140986442565918, -0.16841121017932892, -0.7738946080207825, 0.7383836507797241, -0.8755046725273132, -0.10984967648983002, 0.6887900829315186, -0.11050570011138916, -0.06563006341457367, -1.1314406394958496, 0.019660625606775284, 0.7676111459732056, 0.6881408095359802, 0.9163812398910522, 0.1593286395072937, -0.6840618252754211, 0.5064825415611267, -0.2793586254119873, -0.02987048774957657, 0.3415184020996094, 0.5999027490615845, -0.1413118541240692, -1.0448499917984009, 0.7085028886795044, -1.089590311050415, 1.0120136737823486, 0.32096388936042786, 0.5334113836288452, 0.020723946392536163, -0.7392897605895996, 0.938023567199707, -1.3188979625701904, -0.5921468734741211, -0.5576393008232117, 0.44672471284866333, 1.1176894903182983, -0.33046194911003113, 0.4717707335948944, -0.06312522292137146, 0.08705547451972961, 0.8343071341514587, 0.3456612825393677, 0.26067596673965454, -0.852541983127594, -0.2806040942668915, 0.3162670135498047, 0.2677505612373352, 0.1729755401611328, -0.07192017138004303, 0.6772506237030029, 0.6902646422386169, -0.5053432583808899, 0.2462039589881897, -0.5020816326141357, -0.1869296133518219, -0.32912886142730713, -0.7473870515823364, -0.3916245102882385, 0.7845464944839478, 0.5505551099777222, -0.7591323852539062, 0.5781813263893127, 0.09493206441402435, 0.0046478211879730225, 0.16574928164482117, -0.12954631447792053, 1.4172258377075195, 0.8302040100097656, -0.13741955161094666, 0.5296617150306702, 0.8410806655883789, 0.2925065755844116, 0.09796309471130371, -0.4222888946533203, 0.626157283782959, 0.8464785814285278, 0.34285831451416016, 0.04874016344547272, 0.19555114209651947, 0.5895448923110962, -0.008039012551307678, -0.2215171456336975, -0.31887581944465637, 0.7650961875915527, 0.2643558979034424, -0.08539333939552307, -0.8660946488380432, -0.38030335307121277, -0.5463250875473022, 0.7303637266159058, 0.7834988832473755, -0.276151567697525, -0.01652943342924118, 0.2191110998392105, 0.12149717658758163, -0.4162745773792267, 0.1253664493560791, 0.0787758007645607, 0.02246326580643654, 0.013677112758159637, -0.013715541921555996, -0.597537100315094, -0.14166045188903809, 0.3345286548137665, 0.5640860199928284, -1.0872302055358887, 0.16749243438243866, 0.3433123230934143, 0.7722548246383667, 0.6178301572799683, -0.6045256853103638, -1.2005339860916138, 0.6406350135803223, 0.05156908929347992, 0.3824078142642975, 0.20029115676879883, -0.7295905351638794, -1.2112746238708496, 1.0483864545822144, -0.9552522301673889, 0.6638583540916443, 0.3862797021865845, -0.30246061086654663, -0.5555071234703064, 0.6151660680770874, 0.31274011731147766, 0.7347437143325806, 0.29882895946502686, -0.5112814903259277, -0.8200299739837646, 1.143031120300293, 0.664531946182251, 0.6444331407546997, 0.022644050419330597, 0.3802780508995056, 0.32883819937705994, 0.391631543636322, 0.20633947849273682, 0.19006267189979553, -1.6346358060836792, -0.45286595821380615, 0.9384541511535645, 0.5901479721069336, -0.06624571979045868, -0.5063339471817017, 0.11205102503299713, 0.1676332950592041, 0.6381261944770813, 0.01708969660103321, 0.53902667760849, -0.17944630980491638, -0.6236530542373657, 0.09233690053224564, -0.21083714067935944, 0.03540845960378647, 0.9958183765411377, -0.05460703372955322, -0.18126247823238373, -0.08202733099460602, 0.48847347497940063, 0.267780065536499, 0.24239453673362732, 0.44118261337280273, 0.17511975765228271, 0.9049831032752991, -1.5649343729019165, -0.8285121917724609, 0.08707104623317719, -0.1102772057056427, 0.5301656126976013, 0.29315605759620667, -0.3279746174812317, -0.716044008731842, 0.6629633903503418, 0.12016107141971588, 0.018094435334205627, 0.5211904048919678, -1.4625296592712402, 0.6582413911819458, 0.5095469951629639, -1.018855333328247, 0.044672366231679916, 0.8251687288284302, -0.6545867919921875, 0.2840797007083893, 0.19882434606552124, 0.9331332445144653, -0.06654594093561172, 0.5149784088134766, 0.6913443803787231, -0.2337610423564911, -0.15099316835403442, -0.7640629410743713, -0.37286174297332764, -0.775711715221405, 0.5226852893829346, 0.40034183859825134, -0.5488374829292297, 0.23921555280685425, -0.027253855019807816, 0.7289746403694153, 0.15142881870269775, -0.039017725735902786, -0.21660290658473969, 0.12081432342529297, -0.5030938386917114, -0.4943258762359619, 0.0574924498796463, 0.3004157245159149, 0.14780984818935394, -0.2743470370769501, -0.03381291776895523, -0.8550931811332703, 0.02632259577512741, 0.030021533370018005, 0.44472935795783997, 0.5935717821121216, -1.4448121786117554, -1.00473952293396, -0.5432824492454529, -0.23018917441368103, 0.34704720973968506, 1.0128273963928223, -0.20821905136108398, 0.7513303160667419, -0.3306112289428711, 0.8021609783172607, -0.3097265064716339, -1.2656307220458984, 0.1246294230222702, 0.25771644711494446, -0.25309616327285767, -0.13174456357955933, -0.9168415665626526, -0.994138777256012, 0.5061542987823486, -0.5548011064529419, -0.8458417057991028, 1.0893957614898682, -0.5899361371994019, -0.47713637351989746, 0.3419520854949951, -0.43043968081474304, -0.39830392599105835, 0.3173710107803345, -0.3899694085121155, -0.416597843170166, 0.07577742636203766, 0.015768498182296753, -0.47628289461135864, 0.5845330953598022, 0.25840145349502563, 0.00277106836438179, 0.34401220083236694, 0.5556979775428772, -1.5626118183135986, 0.7305339574813843, -0.20724600553512573, 0.13934394717216492, -1.7368098497390747, 0.8223649859428406, -0.521348237991333, -0.3440344035625458, -1.0327870845794678, -0.2027360498905182, 0.23646613955497742, -0.5732302665710449, -0.8217622637748718, -0.7216757535934448, -0.49081748723983765, 0.6204378604888916, 0.4366668462753296, 0.38273781538009644, 0.2499355971813202, 0.22470569610595703, 0.35807645320892334, 0.423552930355072, 0.6745300889015198, -0.16423964500427246, 0.524031400680542, -0.040503449738025665, -1.0036500692367554, 0.1797778457403183, -0.4232661724090576, -0.09222458302974701, 0.39279836416244507, -0.7244290113449097, 0.048091065138578415, -1.5673505067825317, -0.056670304387807846, 0.14752879738807678, -0.2549504041671753, -0.22694014012813568, 1.0232287645339966, 0.3907160758972168, -0.5029944181442261, -0.17711088061332703, -0.9514819383621216, 0.4457343518733978, -0.8037475347518921, -0.28419411182403564, 0.25303134322166443, -0.0890766903758049, 0.07027824223041534, 0.18768461048603058, 1.1224188804626465, -0.6222229599952698, -1.1910148859024048, 0.13899052143096924, -0.4021994471549988, 0.5959658622741699, -0.5927119255065918, 1.1541552543640137, -1.1743733882904053, -0.2857033610343933, 1.458007574081421, 0.4436228573322296, -0.25872328877449036, -0.5092334151268005, -0.7282569408416748, -0.6531474590301514, -0.1078450083732605, -0.11539818346500397, -0.18974891304969788, 0.7393138408660889, -1.1733605861663818, 0.6585557460784912, 0.55440354347229, -0.8154623508453369, -0.47873029112815857, -0.43922820687294006, -1.1877269744873047, 1.5357234477996826, -0.17991921305656433, 0.21408692002296448, 0.35580408573150635, -0.7293360829353333, -0.20030248165130615, -0.43048369884490967, 0.771877646446228, 0.1630314588546753, 1.422922134399414, -1.6676386594772339, -1.484252691268921, -1.114060401916504, 0.3216979205608368, 0.12421128153800964, 1.1377646923065186, 0.09804530441761017, 1.1256914138793945, 0.3476354479789734, 0.2202776074409485, 0.2531304955482483, 0.5437098741531372, -0.0874519869685173, -0.7695177793502808, 0.6788540482521057, 0.522699236869812, 0.7166991233825684, 0.39987197518348694, 2.291170835494995, 0.7387281060218811, 0.8758697509765625, 0.5631975531578064, 0.5991840362548828, -0.6363781690597534, 0.5067314505577087, -1.6202890872955322, -1.5518426895141602, -0.2878780663013458, -0.21593798696994781, -0.4366922676563263, -0.1416940689086914, -0.20817840099334717, 0.5541878938674927, -0.4554062485694885, -0.1778903305530548, -0.30920976400375366, -0.7647271156311035, -0.19048234820365906, 0.5262569189071655, 0.08590727299451828, 1.0820987224578857, 0.3087449073791504, 0.72816002368927, -0.05604841560125351, 0.27626746892929077, 0.7966345548629761, 0.21497488021850586, -0.06352993845939636, 1.1651250123977661, 0.06294317543506622, 0.27547866106033325, -0.7739397287368774, 0.25261178612709045, -0.43545737862586975, 0.23057010769844055, -0.4963315427303314, -0.2708672285079956, -0.6827000379562378, -0.23188769817352295, -0.3762032985687256, 0.3942716121673584, 0.13069525361061096, -0.4375828504562378, 0.2419944703578949, -0.016642052680253983, -1.516515851020813, 0.05978039652109146, 0.5582026243209839, -0.6478095054626465, 0.1835756003856659, 1.0793187618255615, -0.20385318994522095, 0.2270117700099945, -0.24446791410446167, -0.2692732512950897, -0.8369252681732178, -1.231257438659668, -0.9406543374061584, -0.25467240810394287, -0.13902635872364044, -0.4477004408836365, 0.20310695469379425, 1.0351171493530273, 0.0002692565321922302, -0.23256070911884308, -1.1526646614074707, -0.03455495834350586, -0.5424054861068726, 0.9293253421783447, -0.09223541617393494, -1.303346872329712, -0.31214839220046997, -0.23342159390449524, 0.23589208722114563, 0.17189133167266846, -0.4347309470176697, -0.18416368961334229, -0.43715980648994446, -0.5340868234634399, -0.6289739608764648, -0.644803524017334, 0.8498268127441406, -0.9060916900634766, -0.28281882405281067, -0.03358180820941925, 0.3106749653816223, -0.8614869117736816, 0.09495840966701508, -0.8343386054039001, -0.28623831272125244, -0.5386855602264404, 1.0986247062683105, -0.39690685272216797, -0.052821800112724304, -0.4284272789955139, 0.44271641969680786, 0.5905611515045166, 0.23326638340950012, -0.6313923597335815, -0.14705917239189148, -1.1226575374603271, -0.13548538088798523, 0.29463082551956177, -0.373344361782074, 0.31002503633499146, 0.5064423084259033, 2.177987575531006, 0.549747109413147, 0.4796198606491089, -0.20688581466674805, 0.6159995794296265, 0.3894686996936798, -0.5997147560119629, -1.152043342590332, -0.46057432889938354, -0.3974936008453369]"
sc-copilot/MANAGEMENT FEES/management_fees_test.py,def test_management_fees_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.3496516942977905, 0.40887340903282166, -3.062666416168213, -0.43399545550346375, 0.6010226011276245, -0.8962634801864624, 0.8637616038322449, -0.33494311571121216, 0.4483652412891388, -0.08675289899110794, -0.15428327023983002, 0.7658774256706238, 1.1312296390533447, 1.1479125022888184, -1.0552597045898438, -1.067213535308838, 0.4318256974220276, -0.6227335333824158, -0.026686526834964752, -0.0332612507045269, 0.7500917911529541, -0.12973926961421967, -1.230155348777771, -1.469516634941101, 1.3193073272705078, -0.2688489556312561, 0.1733449399471283, 0.6479713320732117, -0.09049484878778458, 0.5588893890380859, 0.5136937499046326, -0.06833570450544357, 1.3025729656219482, -1.5180096626281738, -0.8111536502838135, -1.000966191291809, 0.9068561792373657, 0.46563848853111267, -0.32888099551200867, -0.29581817984580994, 0.3718532919883728, -0.3756704330444336, -0.6742556095123291, -0.050111979246139526, 1.6385992765426636, -0.41333645582199097, 0.6890895366668701, 1.4029837846755981, -0.04002609848976135, -0.4376757740974426, 1.118080496788025, -0.8448466062545776, 0.792422890663147, 0.2752491533756256, 0.7384620904922485, 0.29596853256225586, -0.4375903606414795, 1.0704984664916992, -0.03766598179936409, -0.3502022922039032, 1.7414801120758057, 0.7587725520133972, -0.39634108543395996, 0.530568540096283, -0.04576825723052025, -0.05088408291339874, -0.5501232147216797, -0.2464449405670166, -0.20684824883937836, 0.5176642537117004, 0.4782900810241699, 0.22452914714813232, 0.560572624206543, -0.9933015704154968, 0.06637022644281387, 0.1233782097697258, -0.23058544099330902, -0.06633923947811127, -0.43652212619781494, -0.3407430052757263, -0.34312015771865845, -0.3405524492263794, 0.5038390755653381, 0.47843804955482483, 0.9942139983177185, -0.39476484060287476, 0.48926448822021484, -0.6345493793487549, -0.36715373396873474, 2.1740469932556152, -0.48906391859054565, -0.9772131443023682, -0.47593894600868225, 1.2725656032562256, -1.241005778312683, -0.3530992865562439, 0.06546957790851593, 0.5575218796730042, -0.4634787142276764, -0.22555899620056152, 0.4773305356502533, 0.012196257710456848, 0.43673017621040344, -0.6813055276870728, -0.6206233501434326, 0.27722859382629395, -0.22082039713859558, -0.12783926725387573, -0.5237276554107666, -0.43008002638816833, -0.5961127877235413, 1.331704020500183, -0.7843227982521057, 0.41025757789611816, -0.41522032022476196, -0.580473780632019, 1.6069972515106201, -0.6536290049552917, -0.933463454246521, 0.19652517139911652, -0.678592324256897, -0.6633569002151489, 0.2558578848838806, 1.2092258930206299, -0.3061375319957733, 1.4413771629333496, -1.4265227317810059, 0.7968595027923584, 1.1990528106689453, -0.917236864566803, -0.042768239974975586, 0.0016344767063856125, -1.136552095413208, -0.1730748862028122, -0.8056906461715698, -0.04779437184333801, 0.4408803880214691, -0.16818277537822723, -0.7741345167160034, -0.20294463634490967, -0.7978038787841797, -0.10652988404035568, -0.3575119376182556, 0.6455273032188416, 0.33886289596557617, -0.3131920099258423, 0.7523485422134399, -1.0998700857162476, -0.5686230659484863, -0.27282238006591797, 0.7283111810684204, 0.6347829103469849, 0.752187967300415, 0.5255284905433655, 0.3095313310623169, -0.24431432783603668, 0.30013778805732727, -0.5650060176849365, 0.6056141257286072, 1.3693987131118774, -0.26121985912323, -0.48393648862838745, -0.7488341331481934, 0.18705053627490997, -0.8153829574584961, -1.2242848873138428, 0.20738539099693298, 1.9839690923690796, 0.2047928273677826, -0.7317141890525818, -0.8501889109611511, -0.9126042127609253, -0.03566921874880791, -0.36066073179244995, 0.1460203379392624, 0.39944422245025635, 0.24644243717193604, -0.051091793924570084, 1.2081929445266724, -0.2899635434150696, 0.38406646251678467, 0.08689478039741516, 0.1911795735359192, 1.0146591663360596, -0.7137503623962402, -0.48773854970932007, 0.38975822925567627, -1.0122355222702026, -0.6215917468070984, -0.7783284187316895, 0.7834373712539673, 0.1406131088733673, -0.5753498077392578, -0.5243387222290039, -0.8602391481399536, -1.1596672534942627, -0.04476446658372879, 0.5210884809494019, 0.7646594047546387, -0.17501485347747803, -0.04405166208744049, -0.20909348130226135, -0.5983909368515015, 0.12605059146881104, -0.5582267642021179, -0.4706113338470459, -0.8209483623504639, -0.6880947351455688, -0.3172966241836548, -0.2702030539512634, 1.7359092235565186, 0.21343430876731873, -0.5988367795944214, 0.2970043420791626, 1.3611266613006592, -0.6253190040588379, -0.5866904258728027, -0.5388982892036438, -0.286965548992157, 0.3633594512939453, 0.615425705909729, -0.997145414352417, 0.04077218472957611, -0.4662784934043884, 0.7872776389122009, -0.07543757557868958, -0.563666582107544, 0.44218623638153076, -0.8465365767478943, -0.6829395890235901, 0.1540953814983368, -1.3918825387954712, -0.17157873511314392, 0.34984979033470154, 0.3629853427410126, 1.5136890411376953, -0.13595038652420044, 0.8527137041091919, 1.2674298286437988, 0.24762825667858124, -0.461390882730484, 0.9620017409324646, 0.24887436628341675, 0.004466548562049866, -0.1442871242761612, -0.011676564812660217, -0.37802404165267944, -0.2747187912464142, -0.004173047840595245, 1.2741150856018066, -0.5510631203651428, 0.6895749568939209, 0.31384003162384033, 0.5771450996398926, 0.3369870185852051, 0.458846777677536, -0.32006457448005676, -1.2940425872802734, 0.16124208271503448, 0.4066952168941498, 0.3860902488231659, 0.014691946096718311, 1.8255603313446045, -1.124120831489563, -1.1392650604248047, -1.3139431476593018, -0.5241292119026184, 0.42504000663757324, -0.10308968275785446, -0.21724292635917664, -0.21317929029464722, 0.3690471649169922, 1.6137075424194336, 0.43033739924430847, 0.5120797157287598, -0.5881685018539429, 0.37396812438964844, -0.2798144221305847, -0.2201593816280365, 0.3345715403556824, -0.037266552448272705, -0.9193181991577148, 0.18061932921409607, 0.08182468265295029, 0.5689394474029541, 0.2896132171154022, -0.07738350331783295, 0.04029165208339691, 0.14988619089126587, 0.2635123133659363, 0.9759988784790039, -0.07261214405298233, -0.14375662803649902, 1.0936764478683472, -0.11903958022594452, -0.7835137248039246, 0.9430125951766968, 0.3435622453689575, -0.6229101419448853, -0.47890791296958923, 0.21773424744606018, 0.701931357383728, 0.8447506427764893, 1.285505771636963, 0.2541767358779907, 0.16156138479709625, 0.6095028519630432, -0.7708266973495483, 0.403022825717926, 0.29770970344543457, 0.489269495010376, 0.0797441303730011, -1.3237510919570923, 0.295457124710083, -1.4571263790130615, 0.9647246599197388, 0.2909392714500427, 0.319377601146698, 0.1693967580795288, -0.3596789538860321, 0.2084035575389862, -0.9673408269882202, 0.11045865714550018, -1.3201509714126587, 0.049886662513017654, 0.4161747992038727, -0.4086664915084839, 0.6019309759140015, -0.22263678908348083, 0.005310036242008209, 0.9906408786773682, 0.9846636652946472, 0.7488304972648621, -1.0673633813858032, 0.16455382108688354, -0.5416591167449951, 0.14163890480995178, 0.28604844212532043, -0.4881967306137085, 0.7276101112365723, 0.8370540738105774, -0.5236668586730957, 0.8818453550338745, -1.8431167602539062, -0.350722074508667, -0.8614734411239624, -0.16634148359298706, 0.6627615690231323, 0.37903499603271484, -0.10013298690319061, -0.450719952583313, 0.38824209570884705, -0.017562806606292725, -0.3454246520996094, 0.7686822414398193, -0.054097771644592285, 1.1371629238128662, 0.5809850692749023, 0.5532512664794922, 0.004553250968456268, 0.19662201404571533, 0.21689294278621674, -0.29009708762168884, -0.6757915019989014, 0.7533900737762451, 0.7767235636711121, 0.3290042281150818, 1.1028722524642944, 0.1928277611732483, 0.3996056616306305, -0.6944981813430786, 0.6154898405075073, 0.4811567962169647, 1.1707909107208252, 1.0221405029296875, 0.3232010006904602, -1.0922720432281494, 0.91640305519104, -0.009750515222549438, 0.8525004982948303, 0.8702175617218018, -1.2170957326889038, 0.1753547042608261, -0.35801947116851807, -0.022524762898683548, 0.22316230833530426, 0.137344092130661, 0.019472040235996246, 0.14376668632030487, 0.29486191272735596, 0.18492938578128815, -0.30601540207862854, 0.2138199657201767, 0.6554520130157471, 0.3678438663482666, -0.32689177989959717, 0.7870086431503296, 0.39714157581329346, 0.5279706716537476, 0.44518861174583435, 0.5037540197372437, -1.125942587852478, 0.6754160523414612, -0.14037461578845978, -0.46310514211654663, 0.13295963406562805, -1.2639700174331665, -1.267551302909851, 0.18912719190120697, 0.40875542163848877, -0.10110600292682648, -0.6773906350135803, -0.14053723216056824, -0.3974508047103882, -0.261040598154068, -0.356012761592865, 0.914250373840332, 0.8280206918716431, -0.9304866790771484, 0.6981991529464722, 0.4577455520629883, 0.20882461965084076, -0.3673766255378723, -0.2583814263343811, -0.433572381734848, -0.05329519510269165, 0.44360315799713135, 0.7681279182434082, 0.611539363861084, -1.9588593244552612, -0.6788713335990906, 0.46978244185447693, -0.1308811902999878, -0.11898302286863327, -0.46851667761802673, -0.37984880805015564, -0.15677502751350403, 1.0938674211502075, 0.1721954494714737, 0.12907065451145172, -0.5716386437416077, -1.2042462825775146, -0.2975633144378662, -0.6487253904342651, 0.022192619740962982, 1.5861551761627197, 1.2369458675384521, -0.4177517592906952, -0.7753426432609558, 0.016806118190288544, -0.3833928108215332, 0.6253482103347778, 0.2542148232460022, 0.8638819456100464, 0.5235555171966553, -1.1489026546478271, 0.4520629048347473, 0.1596425324678421, 0.6009562611579895, 0.6204859018325806, -0.20276892185211182, 0.46750128269195557, -0.7765007019042969, 0.8685896396636963, 0.3462858498096466, 0.42281174659729004, 0.8558533191680908, 0.1229255348443985, 0.016517549753189087, 1.1348240375518799, -0.3472515642642975, -0.6534243822097778, 0.7932509779930115, -0.8022634983062744, -0.06276208162307739, -0.0016745850443840027, 0.5198157429695129, 0.49569398164749146, 0.8226288557052612, 0.9630230665206909, -0.5938706398010254, -0.7902076244354248, -1.1978702545166016, -0.6168817281723022, -0.33797404170036316, 1.3116331100463867, 0.9599345922470093, -1.0392837524414062, 0.16064688563346863, -0.8255023956298828, 0.6049308180809021, 0.1352112591266632, -0.03738055378198624, -0.0750485211610794, -0.24104443192481995, 0.0876406878232956, -0.21334315836429596, 0.9857755899429321, 0.6330742239952087, -0.33582454919815063, 0.1172550618648529, 0.6375998258590698, -0.41535621881484985, -0.6084486246109009, 0.09735101461410522, -0.1565798968076706, 0.479218065738678, -0.31083619594573975, -1.7421057224273682, -0.06343689560890198, -0.09674707800149918, 0.5290451645851135, 1.0123023986816406, 0.3736618757247925, 0.6665979027748108, -0.24582970142364502, 0.3164025545120239, -1.1183750629425049, -1.1959428787231445, -0.3680133819580078, 0.06073082983493805, -0.31464892625808716, 0.46345654129981995, -0.10298857092857361, -1.2632420063018799, -0.08034493029117584, -0.5543469190597534, -0.7789108753204346, 0.3827037811279297, -0.19213034212589264, -0.5420162677764893, 0.28106817603111267, -0.6491585969924927, -0.690489649772644, -0.35233741998672485, -0.7546625733375549, -0.3884633779525757, -0.40130946040153503, 0.07556235790252686, 0.385659396648407, 0.24736306071281433, 0.04818902909755707, 0.47328680753707886, 0.5654740333557129, 0.40878844261169434, -1.4067585468292236, -0.5007330775260925, -0.537537693977356, 0.1394374519586563, -1.8492556810379028, 0.07482890039682388, -0.24000206589698792, -1.0586165189743042, -0.8542490005493164, 0.07264693081378937, 1.0114562511444092, 0.0011482276022434235, -0.5215030908584595, -1.1191127300262451, -0.5917174220085144, 1.1656478643417358, 0.4153384566307068, 0.09968215972185135, 0.28022536635398865, -0.009718339890241623, -0.08215989172458649, 0.025174126029014587, 0.1653730720281601, 0.1462194174528122, 0.9045065641403198, -0.24902507662773132, -0.3087468147277832, 0.40231144428253174, -1.1495275497436523, -0.6475296020507812, 0.2831209599971771, 0.5938985347747803, -0.33952224254608154, 0.020879298448562622, -0.857579231262207, 1.026806116104126, 0.1172294169664383, 0.6198740005493164, 1.1027717590332031, 0.09649709612131119, 0.026187360286712646, -0.34008166193962097, -0.13269498944282532, -0.30281737446784973, -0.38212525844573975, -0.8313204646110535, -0.20725122094154358, 0.37135422229766846, -0.07450900971889496, 0.5317305326461792, 0.5971765518188477, -0.7831381559371948, -0.7388100624084473, -0.24590396881103516, -0.05763331800699234, 0.48407450318336487, -0.0687517374753952, 0.5992900133132935, -1.4017516374588013, 0.6211784482002258, 2.349179983139038, 0.19918620586395264, 1.0586806535720825, -0.3020266890525818, -0.09741479158401489, 0.44014155864715576, 0.1825205385684967, -0.19740036129951477, 0.6096691489219666, 0.19724830985069275, -0.10111382603645325, 0.8316203355789185, -0.3765227198600769, 0.10858086496591568, -0.30281704664230347, -0.5582929849624634, -0.3987388014793396, 1.1798657178878784, 0.04922191798686981, 0.6896747350692749, 0.3633883595466614, -0.5106878876686096, -0.6974738240242004, 0.7510086297988892, 0.9434463977813721, -0.5775047540664673, 0.49391642212867737, -2.25156307220459, -1.9840843677520752, -1.433354377746582, 0.6197770833969116, -0.6593791246414185, -0.010196879506111145, 0.29394328594207764, 0.9863247871398926, 0.6350471377372742, 0.30904528498649597, 0.40037772059440613, -0.5002886056900024, 0.5520919561386108, -0.7613534927368164, 1.1548104286193848, 0.4030364751815796, 2.019949436187744, -0.4483223855495453, 1.4957571029663086, 1.0286355018615723, 0.3277807831764221, 0.2798156142234802, 0.26839080452919006, -0.02826213836669922, 0.44478994607925415, -0.7669340968132019, -0.5067256093025208, -0.28498226404190063, -0.5203251242637634, 0.03749597445130348, -0.5866401791572571, 0.6801910400390625, 1.0746796131134033, 0.3728756904602051, 0.14060109853744507, 0.13842955231666565, -0.04248300567269325, -1.8157110214233398, 0.8965833187103271, 1.2377541065216064, 0.03831753879785538, 0.40043872594833374, 0.7241201400756836, 0.043915823101997375, 0.41717541217803955, 1.158337116241455, -1.001509428024292, -0.5068168640136719, -0.6103729605674744, 0.01807864010334015, 1.2556158304214478, 0.10705864429473877, 0.30145135521888733, -0.6468799710273743, -0.22843961417675018, -0.5309587717056274, 0.15986627340316772, -0.9055660963058472, 0.20905640721321106, 0.37368476390838623, 0.44215109944343567, -0.717456579208374, 0.1452893614768982, -0.23753386735916138, 1.2684763669967651, -0.6451553106307983, 0.11335928738117218, 0.4542456567287445, -0.10541273653507233, 1.3591808080673218, -0.036328211426734924, 0.8970311880111694, -0.16845613718032837, -0.010511152446269989, 0.14268967509269714, -0.2614329159259796, -1.4168310165405273, -1.436837911605835, -0.09894806146621704, 0.698570191860199, -0.026348253712058067, 0.4868757128715515, 0.1029699295759201, 0.35700708627700806, -0.7391016483306885, -1.2915053367614746, -0.5946708917617798, -1.0876314640045166, 0.8049646019935608, -0.16873106360435486, -0.7793252468109131, -0.07572732865810394, -0.4867691099643707, 0.13106313347816467, 0.48901161551475525, -0.16804389655590057, 0.45897236466407776, -0.7543262243270874, 0.643500566482544, -1.2207045555114746, -0.5362037420272827, 0.5599283576011658, -0.5848802328109741, -0.03274322301149368, -0.3398086726665497, 0.08299306780099869, -0.9824817180633545, -0.9250839352607727, -1.3114951848983765, 0.19559690356254578, 0.01202140748500824, 0.28317248821258545, 0.14825408160686493, 0.23558911681175232, -0.8391790390014648, 0.1049274355173111, 0.344889372587204, -0.7872798442840576, -0.7820849418640137, -0.9112608432769775, -1.1831339597702026, 0.06387269496917725, 0.30010518431663513, 0.6313194632530212, -0.1829306036233902, 0.20061849057674408, 2.4574527740478516, -0.05616621673107147, -0.07447370886802673, -1.103708028793335, -0.19911545515060425, 0.0067866891622543335, -0.05841773748397827, -0.9854426980018616, -0.14308574795722961, -1.1620445251464844]"
sc-copilot/MANAGEMENT FEES/management_fees_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef management_fees_pre_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.6105532646179199, 0.25830668210983276, -3.293124198913574, -0.7766284942626953, 1.6842401027679443, -0.33278247714042664, 1.1249147653579712, 0.057724229991436005, -0.02739686518907547, -0.5571516752243042, -0.7683683633804321, 0.02196875959634781, 1.4188817739486694, 1.0807909965515137, -0.1004396602511406, -0.17382720112800598, 0.054479047656059265, -0.9196425676345825, -0.061467237770557404, 0.6546593904495239, 0.45082467794418335, -0.2723802328109741, -0.5806971192359924, -1.384788990020752, 1.093235731124878, 0.5299438238143921, 0.12711764872074127, 0.04737769812345505, -0.297201931476593, 0.9441773891448975, 0.29774755239486694, 0.10839033126831055, 0.2734992504119873, -1.223577618598938, -0.014174707233905792, -0.9159351587295532, 0.6025270819664001, -0.1419883817434311, -0.2837545573711395, -1.4333648681640625, 0.8583042025566101, -0.09960391372442245, 0.09279946982860565, 0.33796361088752747, 0.37346264719963074, -0.2549092769622803, 1.3350889682769775, -0.10374432802200317, 0.06534513831138611, -1.4491398334503174, 0.2311970293521881, -0.17464643716812134, 0.15333303809165955, -0.0689045637845993, 1.1137162446975708, 0.8481045961380005, 0.06236967444419861, 1.3913984298706055, -0.6724348068237305, -0.21009451150894165, 2.3806986808776855, 0.7342488765716553, -0.23397284746170044, 0.9214707612991333, 0.432373583316803, 0.0378560870885849, -0.7416149973869324, 0.14147377014160156, -0.39430326223373413, -0.3265978991985321, -0.11116263270378113, 0.5898171663284302, -0.09387141466140747, 0.057342082262039185, 0.19575929641723633, 0.5980241894721985, -0.7930032014846802, -1.667799949645996, -0.027904987335205078, 0.4872959852218628, -0.19935908913612366, 0.32380160689353943, 1.4294366836547852, -0.5055217742919922, 0.8053256273269653, -0.13247185945510864, 0.24432308971881866, 0.0032762810587882996, 0.04004350304603577, 1.2021108865737915, -0.19315172731876373, -0.8434944152832031, 0.3238702416419983, 0.3464078903198242, -0.605878472328186, -0.3191300630569458, -0.19011901319026947, 0.162471741437912, -0.22302982211112976, -0.6497378349304199, -0.05776561051607132, 0.25801530480384827, 0.4605728089809418, 0.18416696786880493, -0.29887130856513977, 0.40833115577697754, 1.054140329360962, 0.44327354431152344, -0.653300404548645, -1.3906461000442505, -0.396208792924881, 1.128921627998352, -0.062323398888111115, 0.19899863004684448, -0.17810294032096863, -0.6020997762680054, 2.0957441329956055, -0.567773699760437, -0.9457098245620728, 0.7281472086906433, -0.7183751463890076, -0.8474125862121582, 1.744875431060791, 1.1582269668579102, -0.4055190682411194, -0.07840041071176529, -0.14639854431152344, 0.4356144070625305, 0.5282017588615417, -0.9772144556045532, 0.3564556837081909, -0.11772239208221436, -0.8405213356018066, 0.5514524579048157, 0.11045006662607193, 0.5014176964759827, 0.1299172192811966, -0.442512184381485, -0.22014129161834717, 0.49069568514823914, 0.7005298137664795, -0.23511271178722382, -0.40620046854019165, -0.7962250709533691, 0.04445544630289078, -0.6625792980194092, 0.4741113483905792, -0.45279461145401, 0.8964310884475708, 0.19605614244937897, 0.15762072801589966, -0.2754767835140228, 0.5966565608978271, 1.1707990169525146, 1.1378298997879028, -1.1033666133880615, 0.7165225744247437, -0.6847456693649292, 0.31954991817474365, -0.04447810351848602, 0.6676441431045532, -0.14708057045936584, 0.007021160796284676, 1.3068492412567139, -0.07622812688350677, -1.0769847631454468, -0.24356964230537415, 0.8947451710700989, -0.023668110370635986, 1.0382992029190063, -0.8310214281082153, -0.1181432381272316, 0.14602860808372498, -0.7899824380874634, 0.841298520565033, 0.11954407393932343, 0.5717726945877075, -0.838249146938324, 0.3973882496356964, -1.3162611722946167, 0.48402339220046997, -0.15455669164657593, 0.6595053672790527, 0.5503157377243042, -1.2740517854690552, -0.13171425461769104, 0.854597806930542, -0.6235122084617615, -0.4934656322002411, -0.4604695737361908, -0.4368858337402344, 0.8003681898117065, -1.120063304901123, -0.18255795538425446, -0.701202929019928, -0.39114436507225037, 0.815762996673584, -0.5296420454978943, 0.17492564022541046, -0.07780382037162781, -0.005079098045825958, -0.029441818594932556, -0.10507538914680481, 0.1960681974887848, -0.9098302125930786, 0.556402862071991, -0.16137295961380005, 0.6148111820220947, 0.3393370509147644, -0.09044134616851807, 1.3635895252227783, -0.22247427701950073, -0.2506256699562073, 0.0509880855679512, -0.37431612610816956, -0.4649263322353363, -0.5088735818862915, -0.19630543887615204, -0.39264971017837524, -0.03509390354156494, -0.3346874713897705, -0.6429007053375244, 0.009787365794181824, 0.5344352722167969, -0.011131526902318, -0.8122280240058899, -0.7714211940765381, 0.031735390424728394, -0.3711356520652771, -0.34391289949417114, -0.14678314328193665, -0.5164408683776855, -0.3029018044471741, 0.5232758522033691, 0.09856774657964706, 1.147026777267456, -0.09126274287700653, 0.33997803926467896, 1.121856927871704, 0.013441135175526142, -0.08587339520454407, 0.9244483709335327, 1.0063930749893188, 0.3824039101600647, 0.2473171353340149, 0.3832523226737976, -0.08694349229335785, -0.2947339713573456, -0.3289613127708435, 1.1997013092041016, 0.021232739090919495, -0.4667082726955414, 0.6285837888717651, 0.6282765865325928, -0.3550073206424713, -0.27254125475883484, -1.3020190000534058, -0.7100803256034851, -0.04902215301990509, 0.48948681354522705, 0.9780024886131287, 0.3063899874687195, 0.900700032711029, -0.5125134587287903, -0.6020420789718628, -0.3521120548248291, -0.911359429359436, 0.6101017594337463, 0.8406007885932922, 0.10982389748096466, 1.1184720993041992, 0.14943161606788635, 0.7881597280502319, 0.7054619789123535, 0.3701755404472351, -0.07275857031345367, 0.320947527885437, -0.490786075592041, 0.015524603426456451, 1.2241301536560059, 0.025336328893899918, -0.9733568429946899, -0.0198788084089756, 0.5598495602607727, -0.6635051965713501, -0.21455955505371094, 0.28300929069519043, 0.5935176610946655, -0.37960585951805115, 0.08389531075954437, 1.2847192287445068, -0.10235658288002014, -0.8737725019454956, 0.584993839263916, -0.8797775506973267, -0.40604332089424133, 0.6781283617019653, 0.14363104104995728, -0.3870999813079834, -0.8541277647018433, 0.03060387447476387, 0.5940648913383484, 0.8709105253219604, 0.7721452713012695, 0.3001887798309326, -0.4480929374694824, 0.6582928895950317, -0.004725806415081024, 0.10889942944049835, -0.1950821578502655, 0.47515374422073364, -0.3244134187698364, -1.5341925621032715, 0.6038856506347656, -1.251664638519287, 1.1193101406097412, 0.4417347013950348, 0.5496413111686707, 0.060294367372989655, -0.5664713978767395, 0.5188182592391968, -1.5354032516479492, -0.7878437638282776, -0.8038403987884521, 0.40473508834838867, 0.8344682455062866, -0.29056602716445923, 0.4928450584411621, -0.15757958590984344, 0.12467346340417862, 1.0323964357376099, 0.3527601361274719, 0.5466567277908325, -0.9293063282966614, -0.2001403570175171, 0.2665290832519531, 0.4827314615249634, -0.03616229444742203, 0.03410390019416809, 0.6980051398277283, 0.9741722941398621, -0.46372610330581665, 0.3111351430416107, -0.5918920040130615, -0.40931445360183716, -0.6460871696472168, -0.7195652723312378, 0.04816500470042229, 0.7094773650169373, 0.6376899480819702, -0.6728624105453491, 0.7229113578796387, 0.048756182193756104, -0.12231037765741348, 0.12581148743629456, -0.10971380770206451, 1.3959972858428955, 0.6751595139503479, -0.09913595765829086, 0.4448634386062622, 0.9923545122146606, 0.30105018615722656, 0.2519172728061676, -0.4531742334365845, 0.8513515591621399, 0.9399044513702393, 0.26280176639556885, 0.3270752429962158, 0.13711990416049957, 0.694551944732666, 0.0501258447766304, -0.21197566390037537, -0.3650798797607422, 0.658105731010437, 0.2512069642543793, -0.19706693291664124, -0.544783353805542, -0.31945717334747314, -0.2584317624568939, 0.735931932926178, 0.7437640428543091, -0.7478269338607788, 0.09740777313709259, 0.2334480732679367, -0.013846252113580704, -0.19341658055782318, 0.10343369096517563, -0.028721556067466736, 0.1729893535375595, -0.061091676354408264, 0.07110429555177689, -0.5634273886680603, 0.2623284161090851, 0.5447173118591309, 0.5574559569358826, -0.7387605309486389, 0.3669993579387665, 0.08313047885894775, 0.7899798154830933, 0.6003366708755493, -0.48273327946662903, -1.198894739151001, 0.7132986783981323, -0.31015512347221375, 0.2924778163433075, 0.18574872612953186, -0.6453595757484436, -1.3567986488342285, 1.097179889678955, -0.8897204399108887, 0.609992504119873, 0.12552466988563538, -0.2519116997718811, -0.30324333906173706, 0.4768201410770416, 0.4029989242553711, 0.585661768913269, 0.24834658205509186, -0.6038362383842468, -0.5408896207809448, 0.9287101030349731, 0.8887113928794861, 0.289167582988739, 0.06124112010002136, 0.25962114334106445, 0.408766508102417, 0.4180185794830322, 0.36966633796691895, 0.37104928493499756, -1.6856634616851807, -0.4946594834327698, 1.0136942863464355, 0.43077901005744934, -0.11117177456617355, -0.5329381227493286, 0.053550686687231064, 0.10104183107614517, 0.4687831997871399, -0.14934095740318298, 0.3091961145401001, -0.15337291359901428, -0.5297845005989075, -0.09613536298274994, -0.21482104063034058, -0.14257025718688965, 0.8384965658187866, 0.5421669483184814, -0.07324075698852539, -0.19744320213794708, 0.45610231161117554, 0.24060788750648499, 0.29154691100120544, 0.6460531949996948, 0.23360805213451385, 0.8918905258178711, -1.5172542333602905, -0.44073933362960815, -0.0629718229174614, -0.07015836238861084, 0.23265781998634338, 0.3188859224319458, 0.05673364922404289, -0.4608058035373688, 0.6888420581817627, -0.03235890343785286, -0.06080663949251175, 0.738010823726654, -1.0460388660430908, 0.5566015243530273, 0.6039563417434692, -1.001527190208435, -0.2006308138370514, 0.7639526128768921, -0.8303184509277344, 0.11028307676315308, 0.28156402707099915, 0.8747870922088623, -0.34416139125823975, 0.7461453676223755, 0.8433585166931152, -0.28326284885406494, -0.04554598778486252, -0.9797194600105286, -0.3948214650154114, -0.9376516342163086, 0.85894775390625, 0.6976516246795654, -0.5557924509048462, 0.10866620391607285, -0.22348886728286743, 0.6398825645446777, -0.16408732533454895, -0.09963174164295197, -0.043352849781513214, 0.10996132344007492, -0.43862855434417725, -0.8422380685806274, 0.2563246190547943, 0.4640291929244995, 0.0388859286904335, -0.26864051818847656, 0.028703680261969566, -0.7255363464355469, -0.01814393699169159, 0.21153616905212402, -0.09098638594150543, 0.23996245861053467, -1.1500961780548096, -1.1672160625457764, -0.2173488438129425, -0.27777811884880066, 0.35167524218559265, 1.0937674045562744, 0.1706063598394394, 0.6700989603996277, -0.40893465280532837, 0.7911794185638428, -0.14384783804416656, -1.1111695766448975, 0.1265842169523239, -0.11867940425872803, -0.34161603450775146, 0.347362756729126, -0.7556127309799194, -1.3029184341430664, 0.2339114248752594, -0.14850452542304993, -0.6350486874580383, 0.7351683378219604, -0.4700326919555664, -0.6585826873779297, 0.2929428815841675, -0.5196289420127869, -0.5142323970794678, 0.15933619439601898, -0.3752235770225525, -0.46271729469299316, 0.029081471264362335, -0.016110224649310112, -0.17599938809871674, 0.4810057282447815, -0.1182752400636673, 0.08069643378257751, 0.487086683511734, 0.7671381235122681, -1.6337430477142334, 0.38604307174682617, -0.13890880346298218, 0.24036529660224915, -2.007667303085327, 0.9274108409881592, -0.5266110301017761, -0.5489103198051453, -1.0861787796020508, 0.030740752816200256, 0.4338858127593994, -0.6558360457420349, -0.7334485054016113, -0.8717086315155029, -0.1697300374507904, 0.557207465171814, 0.49158716201782227, 0.6195513010025024, 0.12935304641723633, 0.1319650560617447, 0.31071290373802185, 0.7100279331207275, 0.8018088340759277, -0.10114328563213348, 0.6774977445602417, -0.33382102847099304, -0.929636538028717, -0.007158009335398674, -0.44763076305389404, 0.017372768372297287, 0.5184098482131958, -0.6030817031860352, 0.01093023270368576, -1.407936930656433, -0.12418840080499649, 0.2238692045211792, 0.04771420732140541, -0.1215500459074974, 1.195749044418335, 0.15146251022815704, -0.3692406415939331, -0.40476569533348083, -1.0020273923873901, 0.10992571711540222, -0.8353894948959351, -0.5344251394271851, 0.2779141664505005, -0.06307817995548248, -0.07248283177614212, 0.2780362665653229, 1.215357780456543, -0.4896433353424072, -1.0475585460662842, 0.17426717281341553, -0.51346755027771, 0.3818801939487457, -0.5595075488090515, 1.0729846954345703, -1.2067482471466064, 0.061616603285074234, 1.4236724376678467, 0.4714585542678833, -0.07338687032461166, -0.5442125201225281, -0.5085004568099976, -0.6427092552185059, -0.28140342235565186, -0.3515145182609558, -0.24398185312747955, 0.5466607809066772, -0.9586172103881836, 0.4528658986091614, 0.7786664366722107, -0.4739542305469513, -0.39776596426963806, -0.5336044430732727, -1.1201026439666748, 1.2784887552261353, -0.18862015008926392, 0.4349530339241028, 0.4440351724624634, -0.7967045307159424, -0.41122063994407654, -0.23301999270915985, 0.7266756892204285, 0.17162078619003296, 1.1019313335418701, -1.6402719020843506, -1.4340417385101318, -1.077623963356018, 0.41788968443870544, 0.11945772916078568, 0.5689167976379395, 0.03798222541809082, 0.9028192758560181, 0.502575695514679, 0.16566628217697144, 0.3188891112804413, 0.20265822112560272, 0.17119143903255463, -0.4546271562576294, 0.5477492809295654, 0.2679617404937744, 1.1229701042175293, 0.2631891667842865, 1.7813180685043335, 0.6389808058738708, 1.1395217180252075, 0.2976168096065521, 0.41673335433006287, -0.5529605150222778, 0.5210160613059998, -1.73649001121521, -1.778862476348877, -0.14552634954452515, 0.05011271312832832, -0.20509479939937592, -0.507388174533844, 0.37601983547210693, 0.5851054191589355, -0.46021854877471924, -0.09846751391887665, -0.19512373208999634, -0.7880322337150574, -0.4142942428588867, 0.5355831384658813, 0.4442407488822937, 0.7860677242279053, 0.2758537232875824, 0.7878042459487915, 0.07265595346689224, 0.441922664642334, 0.705428421497345, -0.01095958985388279, 0.10836395621299744, 0.8496925234794617, 0.1531684398651123, 0.47225239872932434, -0.8293280601501465, 0.27737510204315186, -0.5083192586898804, 0.14090430736541748, -0.471784770488739, 0.02462533488869667, -0.7128450870513916, -0.15650981664657593, -0.41309913992881775, 0.35453563928604126, 0.05309131741523743, -0.2845970690250397, 0.056497421115636826, 0.4038645625114441, -1.7123818397521973, 0.13401778042316437, 0.3932209014892578, -0.9118939638137817, 0.08952919393777847, 0.6517529487609863, -0.10026857256889343, -0.002947727218270302, 0.06445735692977905, 0.23630282282829285, -0.26338428258895874, -1.2938777208328247, -1.050812005996704, -0.5882355570793152, -0.3760306239128113, -0.5824750661849976, 0.2817413806915283, 0.7312134504318237, 0.006626516580581665, -0.021318458020687103, -1.2059370279312134, -0.21975493431091309, -0.7613641023635864, 0.9482041597366333, 0.0913793072104454, -1.5181043148040771, -0.41827648878097534, -0.34057480096817017, 0.2364283800125122, 0.17526191473007202, -0.4282571077346802, -0.12225139141082764, -0.4964630603790283, -0.6450998187065125, -0.7428742051124573, -0.5935817956924438, 0.7222745418548584, -1.4479789733886719, -0.49056941270828247, -0.19119594991207123, 0.34757521748542786, -0.6690653562545776, -0.033623240888118744, -1.2481343746185303, -0.2575434446334839, -0.8195047378540039, 1.019723892211914, -0.3579941987991333, 0.17119692265987396, -0.5003057718276978, 0.3149847984313965, 0.11626254767179489, -0.15941505134105682, -0.7115973234176636, -0.41089165210723877, -1.109870433807373, -0.1921265870332718, 0.26149943470954895, -0.504507839679718, 0.0545169860124588, 0.20798063278198242, 2.023059844970703, 0.5532650947570801, 0.18611615896224976, -0.4468434453010559, 0.848291277885437, 0.17534533143043518, -0.2317712903022766, -1.1109354496002197, -0.6258097887039185, -0.4957417845726013]"
sc-copilot/MANAGEMENT FEES/management_fees_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef management_fees_post_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.7066943645477295, 0.2087486833333969, -3.2501449584960938, -0.7640178799629211, 1.764878273010254, -0.3473704755306244, 1.081538438796997, 0.028699010610580444, 0.08017022162675858, -0.5364007353782654, -0.6998622417449951, -0.11905282735824585, 1.3549509048461914, 0.9333118796348572, -0.09317196160554886, -0.13784721493721008, 0.06642834842205048, -1.0117868185043335, -0.1613372266292572, 0.6783568859100342, 0.5574331283569336, -0.2426832914352417, -0.5911890268325806, -1.2884399890899658, 1.2649548053741455, 0.6612924933433533, 0.16247940063476562, -0.010142453014850616, -0.2804483473300934, 0.8576176166534424, 0.18636783957481384, 0.06322439759969711, 0.3526371121406555, -1.0522710084915161, 0.008753187954425812, -0.8351935148239136, 0.5734483599662781, -0.24254560470581055, -0.23236455023288727, -1.3143153190612793, 0.736744225025177, -0.03783764690160751, 0.027758561074733734, 0.4232978820800781, 0.351024866104126, -0.33358871936798096, 1.2159481048583984, -0.08062440156936646, 0.012345738708972931, -1.498105764389038, 0.25326335430145264, -0.36846035718917847, 0.2394859790802002, -0.09633706510066986, 0.9839867949485779, 0.8124226331710815, 0.1962462067604065, 1.4189997911453247, -0.6344980597496033, -0.2550537884235382, 2.284160852432251, 0.6483638882637024, -0.32291871309280396, 0.8742517232894897, 0.323599636554718, 0.0683073028922081, -0.7571544051170349, 0.15896470844745636, -0.48639601469039917, -0.33376985788345337, -0.12022202461957932, 0.5098143815994263, -0.00872381404042244, 0.11382263153791428, 0.15156212449073792, 0.6813572645187378, -0.7935709953308105, -1.7644397020339966, -0.07213212549686432, 0.5609301328659058, -0.2947169542312622, 0.1644187569618225, 1.3691320419311523, -0.46147650480270386, 0.7872779369354248, -0.21056154370307922, 0.28572171926498413, -0.02099747769534588, 0.09144517779350281, 1.1139249801635742, -0.11228210479021072, -0.8391740322113037, 0.3742157816886902, 0.2684900760650635, -0.5634296536445618, -0.3157806992530823, -0.0542353019118309, 0.09668007493019104, -0.307563841342926, -0.4523659348487854, -0.12259108573198318, 0.35008952021598816, 0.48784202337265015, 0.108292356133461, -0.18678301572799683, 0.4957500696182251, 1.218252182006836, 0.6462271809577942, -0.7360267639160156, -1.4267385005950928, -0.32857006788253784, 1.0151225328445435, 0.00710846483707428, 0.08921490609645844, -0.1906251311302185, -0.6032189726829529, 2.0853474140167236, -0.6715669631958008, -0.9788997173309326, 0.7517683506011963, -0.6927512884140015, -0.7231714129447937, 1.6932452917099, 1.1676033735275269, -0.2705080509185791, -0.19579540193080902, 0.012367509305477142, 0.32842904329299927, 0.2546862065792084, -0.9698050618171692, 0.42812579870224, -0.09497485309839249, -0.9163357019424438, 0.47082191705703735, 0.18354305624961853, 0.49660539627075195, 0.21106135845184326, -0.4422791600227356, -0.060978278517723083, 0.4158555567264557, 0.6759626865386963, -0.23926964402198792, -0.3080744445323944, -0.7945970296859741, 0.07151967287063599, -0.6870238780975342, 0.3528837561607361, -0.48179447650909424, 0.8961769938468933, 0.12222544848918915, 0.12435715645551682, -0.3143131732940674, 0.6728048324584961, 1.0530967712402344, 1.1185503005981445, -1.1294831037521362, 0.7480208277702332, -0.633521318435669, 0.38120028376579285, -0.016955453902482986, 0.8125805854797363, -0.14330555498600006, -0.15290449559688568, 1.3345177173614502, 0.000790751539170742, -1.097394347190857, -0.21944968402385712, 0.6873986721038818, -0.022947443649172783, 1.071671485900879, -0.8734852075576782, -0.23588985204696655, 0.1851779669523239, -0.8429888486862183, 0.8041430115699768, 0.011669829487800598, 0.5368245244026184, -0.9132453203201294, 0.3767528533935547, -1.2770333290100098, 0.5042049884796143, -0.2925643026828766, 0.702326774597168, 0.4380981922149658, -1.1718318462371826, -0.033676594495773315, 0.948161244392395, -0.7203680276870728, -0.7026453018188477, -0.3493567109107971, -0.33727800846099854, 0.7329082489013672, -1.1291747093200684, -0.032694846391677856, -0.8849067091941833, -0.32269835472106934, 0.8400651812553406, -0.6393794417381287, 0.18907621502876282, -0.005393236875534058, -0.04754943400621414, 0.013702292926609516, -0.11346040666103363, 0.18689246475696564, -0.8699843883514404, 0.4611435532569885, -0.23489806056022644, 0.7322695851325989, 0.26251375675201416, 0.04283035919070244, 1.2319012880325317, -0.2814669609069824, -0.32107990980148315, 0.11578483134508133, -0.6563769578933716, -0.5989248752593994, -0.45508235692977905, -0.18203915655612946, -0.4647950232028961, -0.10435931384563446, 0.01102975383400917, -0.5634760856628418, 0.06912657618522644, 0.5098540186882019, -0.042881473898887634, -0.7203942537307739, -0.8093644976615906, 0.15365692973136902, -0.21526873111724854, -0.287602961063385, 0.0008930601179599762, -0.510429859161377, -0.33588293194770813, 0.4828755855560303, 0.19901898503303528, 1.2316125631332397, 0.046054527163505554, 0.3758203089237213, 1.2648110389709473, -0.0015090331435203552, -0.04812600091099739, 0.8265455961227417, 1.104864478111267, 0.28886303305625916, 0.30472704768180847, 0.5814629793167114, -0.29044055938720703, -0.19954544305801392, -0.3222985863685608, 1.1422555446624756, 0.048652127385139465, -0.5364497900009155, 0.5687370300292969, 0.6902334690093994, -0.30699676275253296, -0.4560719132423401, -1.3493320941925049, -0.7550374865531921, -0.02270366996526718, 0.59031081199646, 1.0399765968322754, 0.18828043341636658, 0.8159234523773193, -0.4330940246582031, -0.6087636947631836, -0.44268909096717834, -0.7660290598869324, 0.6856497526168823, 0.7762435078620911, 0.10166748613119125, 1.0708909034729004, 0.24297568202018738, 0.8364578485488892, 0.7672281265258789, 0.3350951671600342, -0.15320295095443726, 0.443880558013916, -0.5895091891288757, -0.02517511695623398, 1.2001078128814697, -0.009939722716808319, -0.9351640939712524, -0.0772518664598465, 0.4962918162345886, -0.7772365808486938, -0.3453909158706665, 0.21830274164676666, 0.5521929264068604, -0.4305088520050049, 0.1598777025938034, 1.3346607685089111, -0.09704309701919556, -0.9722672700881958, 0.6578969955444336, -0.8308635950088501, -0.3864592909812927, 0.7586764097213745, 0.048464223742485046, -0.39328545331954956, -1.0603203773498535, 0.08261875808238983, 0.5670467615127563, 0.8782846927642822, 0.8926855325698853, 0.32132288813591003, -0.4199489951133728, 0.593397855758667, -0.13073953986167908, 0.021239250898361206, 0.13686534762382507, 0.7469035387039185, -0.1786653995513916, -1.1800456047058105, 0.6434400677680969, -1.1767244338989258, 1.059265375137329, 0.3658272325992584, 0.44802314043045044, -0.06907248497009277, -0.6334395408630371, 0.6712821125984192, -1.608771800994873, -0.6702481508255005, -0.6894098520278931, 0.5393110513687134, 0.8600119352340698, -0.3914523124694824, 0.5021600127220154, -0.19182732701301575, 0.04310173913836479, 0.9773533940315247, 0.35331594944000244, 0.4439302086830139, -0.8986023664474487, -0.21670857071876526, 0.3938312530517578, 0.5047160387039185, 0.055880844593048096, 0.09909223020076752, 0.6640717387199402, 0.8709027767181396, -0.5273501873016357, 0.3856847882270813, -0.6415773630142212, -0.3921773433685303, -0.617068886756897, -0.89454585313797, -0.057771023362874985, 0.6652415990829468, 0.6347149610519409, -0.645642101764679, 0.6976562738418579, 0.18797457218170166, -0.19767260551452637, 0.06827510893344879, -0.09862346202135086, 1.4509172439575195, 0.712084174156189, -0.04624742269515991, 0.5358573794364929, 0.972175121307373, 0.38969361782073975, 0.32384347915649414, -0.5230543613433838, 0.7784404754638672, 1.0631200075149536, 0.28957003355026245, 0.30183377861976624, 0.010828189551830292, 0.5956637859344482, -0.07991831749677658, -0.2970266044139862, -0.3296518921852112, 0.6304124593734741, 0.26799270510673523, -0.20812924206256866, -0.6284096837043762, -0.2817239761352539, -0.396976500749588, 0.8650510311126709, 0.7529183626174927, -0.6969453692436218, 0.05613957345485687, 0.19057339429855347, 0.023644521832466125, -0.27726367115974426, 0.027814731001853943, 0.0011281147599220276, 0.09523940831422806, -0.0865604504942894, 0.10630475729703903, -0.6481191515922546, 0.29694920778274536, 0.5044552087783813, 0.6173948049545288, -0.8469261527061462, 0.17287538945674896, 0.15378008782863617, 0.7340119481086731, 0.576937198638916, -0.35041266679763794, -1.3362655639648438, 0.6429189443588257, -0.21447116136550903, 0.3089633285999298, 0.18997463583946228, -0.731620192527771, -1.3538897037506104, 1.0786783695220947, -0.943023681640625, 0.543281078338623, 0.20277178287506104, -0.2926984429359436, -0.41101527214050293, 0.48757877945899963, 0.3773806095123291, 0.5836512446403503, 0.33192962408065796, -0.6011785268783569, -0.6774678230285645, 1.0360872745513916, 0.8314822316169739, 0.28425338864326477, -0.0012969709932804108, 0.3229953944683075, 0.38688522577285767, 0.4723244905471802, 0.40488964319229126, 0.33320683240890503, -1.7459771633148193, -0.46195507049560547, 1.0251274108886719, 0.5205737948417664, 0.023789161816239357, -0.45783156156539917, -0.004723748192191124, 0.16433706879615784, 0.5400300025939941, 0.05953986197710037, 0.27483201026916504, -0.050663866102695465, -0.6255174875259399, -0.02872408926486969, -0.2215002477169037, -0.09580815583467484, 0.7847298979759216, 0.4156184196472168, -0.19701512157917023, -0.17323030531406403, 0.22561025619506836, 0.22091776132583618, 0.2315674126148224, 0.4917576313018799, 0.14374442398548126, 0.9694212675094604, -1.6167595386505127, -0.49819350242614746, -0.0460936538875103, -0.09281762689352036, 0.3218868672847748, 0.2156624048948288, -0.11775553226470947, -0.5360559821128845, 0.7102442979812622, 0.02049512416124344, -0.0761847123503685, 0.6285626292228699, -1.1175098419189453, 0.5432268977165222, 0.6129314303398132, -1.0471339225769043, -0.10308369994163513, 0.8032070994377136, -0.8568065166473389, 0.12998998165130615, 0.1630605310201645, 0.8906211853027344, -0.22754299640655518, 0.722791314125061, 0.7737902402877808, -0.21250402927398682, -0.16655325889587402, -0.7795504331588745, -0.3777249753475189, -0.9945060014724731, 0.7619763612747192, 0.530488133430481, -0.7151929140090942, 0.10326780378818512, -0.18870200216770172, 0.5902842283248901, -0.09230101853609085, -0.12529084086418152, -0.08791610598564148, 0.11896322667598724, -0.3354616165161133, -0.8062019348144531, 0.09405676275491714, 0.37736502289772034, 0.02857338823378086, -0.30442380905151367, -0.05161033570766449, -0.6852544546127319, 0.10211124271154404, 0.035145603120326996, 0.06183387711644173, 0.41116321086883545, -1.1242239475250244, -1.082581877708435, -0.3250727951526642, -0.24646911025047302, 0.26625746488571167, 1.1266441345214844, 0.15288041532039642, 0.5885719060897827, -0.38556167483329773, 0.7707476615905762, -0.09924812614917755, -1.1782982349395752, 0.0895441323518753, 0.028917208313941956, -0.2970932126045227, 0.30782902240753174, -0.9097902774810791, -1.1505913734436035, 0.25883814692497253, -0.39972591400146484, -0.7379442453384399, 0.8393372297286987, -0.4706680476665497, -0.6271876096725464, 0.3555411696434021, -0.560019850730896, -0.5907584428787231, 0.12235051393508911, -0.43873149156570435, -0.3538987338542938, 0.12306949496269226, 0.003443308174610138, -0.1361198127269745, 0.5951846837997437, -0.09805528074502945, 0.020189644768834114, 0.49873048067092896, 0.7253550887107849, -1.649808645248413, 0.5539970993995667, -0.1807723492383957, 0.22220319509506226, -1.878014087677002, 0.855748176574707, -0.46310561895370483, -0.5056954622268677, -1.1483232975006104, 0.06032537668943405, 0.37951627373695374, -0.6039153337478638, -0.7278842926025391, -0.9647116661071777, -0.2961927056312561, 0.6242483854293823, 0.5473043322563171, 0.6021589040756226, 0.21478652954101562, 0.15465745329856873, 0.2607884407043457, 0.6774259805679321, 0.7588026523590088, -0.1885865181684494, 0.6253436803817749, -0.22514137625694275, -0.8409337997436523, 0.04253122955560684, -0.4663439095020294, -0.00624384731054306, 0.536638617515564, -0.6168920993804932, 0.054417070001363754, -1.5549910068511963, -0.05198691412806511, 0.31771397590637207, -0.07950302958488464, -0.11606395244598389, 1.2226368188858032, 0.1808493733406067, -0.37920838594436646, -0.43294042348861694, -0.9875509142875671, 0.28682464361190796, -0.7111251354217529, -0.3208489418029785, 0.2390676885843277, -0.15018019080162048, 0.10885605961084366, 0.3059646487236023, 1.0424563884735107, -0.5753934383392334, -1.1249473094940186, 0.18858495354652405, -0.5172759294509888, 0.6279535889625549, -0.565398633480072, 1.041487693786621, -1.2233471870422363, -0.02189541608095169, 1.518552541732788, 0.5296505689620972, -0.2722984552383423, -0.6200866103172302, -0.6472705602645874, -0.7898449897766113, -0.12617778778076172, -0.3413465917110443, 0.023929452523589134, 0.5330485105514526, -0.9727511405944824, 0.3933241069316864, 0.735709547996521, -0.559188187122345, -0.37216466665267944, -0.6337580680847168, -1.253333568572998, 1.3357536792755127, -0.1885296106338501, 0.3720197081565857, 0.48890581727027893, -0.7676094770431519, -0.3409132659435272, -0.2584715187549591, 0.7292155027389526, 0.20338699221611023, 1.1825988292694092, -1.6472773551940918, -1.5982848405838013, -1.2822182178497314, 0.4101170301437378, 0.005001433193683624, 0.7484033703804016, 0.10676262527704239, 1.0162479877471924, 0.36516445875167847, 0.11809875816106796, 0.2699611186981201, 0.2635696530342102, 0.11707305908203125, -0.5938229560852051, 0.5391992330551147, 0.2820480167865753, 0.9892219305038452, 0.32655948400497437, 1.9520180225372314, 0.7230185270309448, 1.073309063911438, 0.4630543291568756, 0.5013165473937988, -0.466719388961792, 0.33547836542129517, -1.6177430152893066, -1.5901618003845215, -0.1838935762643814, 0.017793456092476845, -0.15642964839935303, -0.39991098642349243, 0.1371353268623352, 0.47266799211502075, -0.48151034116744995, -0.201051726937294, -0.2663020193576813, -0.7633132934570312, -0.3770619034767151, 0.5826258659362793, 0.32795101404190063, 0.8258774876594543, 0.48658084869384766, 0.8418165445327759, 0.013484291732311249, 0.3928182125091553, 0.7145861983299255, -0.007419729605317116, 0.1571948230266571, 1.0191915035247803, 0.1294904351234436, 0.4148211181163788, -0.8087177872657776, 0.3651278018951416, -0.4963308274745941, 0.300525963306427, -0.42427772283554077, 0.07602393627166748, -0.6572266817092896, -0.05790223926305771, -0.28515371680259705, 0.360360324382782, 0.11257119476795197, -0.4425595700740814, 0.22709858417510986, 0.394328773021698, -1.6586635112762451, 0.23082950711250305, 0.3332119882106781, -0.865503191947937, 0.11345391720533371, 0.5293254852294922, -0.07384192943572998, 0.08103777468204498, -0.050802942365407944, 0.10380207002162933, -0.46094226837158203, -1.2961359024047852, -0.9862333536148071, -0.328515887260437, -0.39676159620285034, -0.5908586978912354, 0.23026227951049805, 0.8789499998092651, -0.011330664157867432, -0.05609168857336044, -1.1274323463439941, -0.20293907821178436, -0.7437387108802795, 1.0515402555465698, 0.03326523303985596, -1.3982797861099243, -0.538040280342102, -0.3707115054130554, 0.23124364018440247, 0.1940155327320099, -0.5352602005004883, -0.06174381449818611, -0.47493305802345276, -0.5802180171012878, -0.6640251874923706, -0.5946474075317383, 0.5912581086158752, -1.3566312789916992, -0.5507364273071289, -0.06785733997821808, 0.3405681550502777, -0.7210755348205566, -0.03678109496831894, -1.0810657739639282, -0.3921912908554077, -0.6921005845069885, 1.0561408996582031, -0.36679279804229736, 0.06675141304731369, -0.5387201309204102, 0.39558982849121094, 0.3537781834602356, -0.1948361098766327, -0.7091386914253235, -0.3922109007835388, -1.2414445877075195, -0.14140716195106506, 0.3342271149158478, -0.4969433844089508, 0.24024826288223267, 0.23664462566375732, 2.0256338119506836, 0.6148132085800171, 0.19432365894317627, -0.3838809132575989, 0.6863688230514526, 0.1193125918507576, -0.24641543626785278, -1.217553973197937, -0.6079345345497131, -0.46087998151779175]"
sc-copilot/MANAGEMENT FEES/management_fees_schedule_code.py,def management_fees_schedule_code():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[-0.12176143378019333, 0.6039716005325317, -2.8133978843688965, -0.5222935676574707, 0.16971296072006226, -1.2002556324005127, 0.3430314064025879, -0.646450400352478, 0.13610750436782837, -0.2119605839252472, -0.5603731274604797, 0.13789910078048706, 2.046320676803589, 0.8978778123855591, -0.3390410840511322, -0.7747072577476501, -0.39370307326316833, -0.23601441085338593, -0.37276822328567505, 0.2314147651195526, 0.9171594977378845, 0.21258340775966644, -0.8189296722412109, -1.7448949813842773, 1.1322141885757446, -0.09058041870594025, 0.9387792944908142, 0.1935657113790512, -0.07103198766708374, 0.997588038444519, 0.10674244165420532, 0.47016510367393494, 0.8167692422866821, -1.5195457935333252, -0.5558372139930725, -1.0207027196884155, 0.9196522235870361, 0.1148596853017807, -0.2822767496109009, -0.7775781154632568, 0.22247271239757538, -0.5811063051223755, -0.5137993097305298, 0.40973031520843506, 1.3730493783950806, -0.6867209672927856, 1.1599069833755493, 0.2772243022918701, -0.4351612329483032, -0.2904666066169739, 1.4955310821533203, -0.5657057762145996, 0.41751185059547424, 0.11712037771940231, 0.4824131429195404, 0.7082488536834717, 0.16823171079158783, 1.3785676956176758, -0.5311799049377441, 0.3671520948410034, 2.8065128326416016, 1.2744196653366089, 0.08992931246757507, 0.48996779322624207, 0.0687224492430687, 0.17332947254180908, -0.2983631193637848, 0.05343557149171829, -0.2367648184299469, 0.0500890389084816, -0.11603939533233643, 0.30820924043655396, 0.7071582078933716, -0.7676475644111633, 0.2844904363155365, 0.4623867869377136, -0.2610304355621338, 0.03767969459295273, 0.10756321251392365, -0.17564000189304352, -1.0411187410354614, -0.11140965670347214, 0.41954684257507324, 0.1363741159439087, 0.5307714343070984, -0.10833056271076202, 0.9219100475311279, -0.46258729696273804, -0.11962133646011353, 2.3131773471832275, -0.9687341451644897, -1.4392578601837158, -0.3753201961517334, 1.0240373611450195, -1.4287497997283936, -0.2727925181388855, -0.27616071701049805, -0.01273304596543312, -0.37288612127304077, -0.8949582576751709, 0.20459115505218506, -0.24601051211357117, 0.9356716871261597, -0.2905963063240051, -0.10503651201725006, -0.011504944413900375, 0.10273220390081406, 0.16170455515384674, -0.4292358160018921, -0.44043755531311035, -0.3791358172893524, 1.4312204122543335, -0.38735851645469666, 0.12061719596385956, -0.2690940499305725, -0.8641173839569092, 1.7857234477996826, -1.0413693189620972, -1.0617622137069702, 0.4820733070373535, -0.9318217635154724, -1.1960796117782593, 0.7826238870620728, 0.7986314296722412, 0.3445870876312256, 1.1863092184066772, -1.018187165260315, 0.7982442378997803, 1.1419970989227295, -1.7462778091430664, 0.0366942435503006, -0.07177914679050446, -0.8174504041671753, 0.026473060250282288, -0.3814229965209961, -0.054398879408836365, 0.15817900002002716, -0.4269680082798004, -0.6908167600631714, 0.033607471734285355, -0.12264682352542877, -0.43030810356140137, -0.3899853527545929, -0.21242620050907135, -0.25398024916648865, -0.08118042349815369, 0.31186723709106445, -1.1122221946716309, -0.3505133092403412, -0.3129822909832001, 0.4164751470088959, 0.7780908346176147, 0.4282264709472656, 0.3810243010520935, 0.5697268843650818, -0.57908034324646, 0.39786142110824585, -0.6976501941680908, 0.319350928068161, 1.0468589067459106, 0.2147185504436493, -0.26978373527526855, -0.20868957042694092, 0.5150575041770935, -0.8882145881652832, -1.2863035202026367, 0.26365646719932556, 1.2268329858779907, -0.45432186126708984, -0.3914835453033447, -0.7247571349143982, -0.34705936908721924, -0.2009870857000351, -0.24312376976013184, 0.7718164920806885, 0.03535984456539154, 0.011994004249572754, 0.1689356565475464, 1.1804273128509521, -0.9029693603515625, 0.09991110861301422, 0.07888676971197128, 0.38069969415664673, 1.1682707071304321, -1.1521191596984863, 0.11085405200719833, 0.38729560375213623, -0.9698865413665771, -0.9291173219680786, -0.8645192384719849, 0.17789840698242188, 0.649550199508667, 0.18163132667541504, -0.2982323169708252, -0.7429502010345459, -0.4854017496109009, -0.04695981740951538, 0.12544596195220947, 0.32210373878479004, -0.2336442619562149, 0.08285478502511978, -0.19208696484565735, -0.743998646736145, -0.06615550816059113, -0.4922800064086914, 0.32834649085998535, -0.46081292629241943, -0.043399639427661896, -0.2583022713661194, -0.1706821620464325, 1.6160147190093994, -0.03152569383382797, -0.5949159264564514, 0.15401428937911987, 0.9845739006996155, -0.62879478931427, -0.7900504469871521, -0.579125165939331, -0.4099953770637512, 0.234686940908432, 0.21263332664966583, -0.7447738647460938, 0.0455203652381897, -0.4079691469669342, 0.9574477076530457, -0.6502461433410645, -0.43437400460243225, 0.7550844550132751, -0.2926228642463684, -0.5095651149749756, -0.26064351201057434, -0.862889289855957, -0.7733614444732666, 0.37098047137260437, 0.36975687742233276, 1.6384069919586182, 0.574581503868103, 0.8333289623260498, 1.7743260860443115, -0.1808902770280838, -0.35389894247055054, 0.8544499278068542, 0.6337989568710327, -0.08763968199491501, 0.03467705845832825, 0.2409537434577942, -0.568719744682312, -0.222422793507576, -0.38487958908081055, 1.1135565042495728, -0.33074691891670227, 0.019936904311180115, 0.5058410167694092, 0.45264750719070435, 0.12912139296531677, 0.03076152503490448, -0.7036221027374268, -1.227851152420044, 0.3769263029098511, 0.5981993675231934, 0.6844826936721802, 0.9452710151672363, 1.552929401397705, -1.2418924570083618, -1.00471830368042, -1.429707646369934, -0.5165694952011108, 1.074804663658142, 0.17299529910087585, -0.12200352549552917, 0.1656675934791565, 0.24881751835346222, 1.1261472702026367, 0.4147047698497772, 0.31487834453582764, -0.6324505805969238, 0.2369653284549713, -0.06030699238181114, -0.33038416504859924, 0.29613855481147766, 0.27289068698883057, -1.3855290412902832, -0.1818329095840454, -0.01731119118630886, 0.3997267484664917, 0.5896776914596558, -0.049834802746772766, 0.8830980062484741, 0.029271386563777924, 0.09696350246667862, 1.369051456451416, 0.024683237075805664, -0.599881112575531, 0.8262337446212769, -0.23196761310100555, -1.0308208465576172, 1.2124710083007812, 0.6993668079376221, -0.6444824934005737, -0.3744533956050873, -0.1754184365272522, 0.2931934893131256, 0.4750315546989441, 1.053445816040039, -0.33616572618484497, -0.0705692246556282, 0.838670551776886, -0.37135857343673706, 0.006241627037525177, 0.1575852334499359, 0.9089280366897583, -0.3686806559562683, -1.5847697257995605, 0.3136659860610962, -1.5017681121826172, 1.252850890159607, 0.4685889780521393, 0.01803615689277649, 0.45613133907318115, -0.20922741293907166, 0.08737906068563461, -1.282985806465149, 0.008573856204748154, -1.8579707145690918, 0.24906297028064728, 1.0696619749069214, -0.9666308164596558, 0.37138354778289795, 0.47387266159057617, -0.030175432562828064, 0.8875453472137451, 0.5567882061004639, 0.5567911863327026, -0.914153516292572, 0.16531500220298767, -0.06393421441316605, 0.341089129447937, 0.037878211587667465, 0.026763267815113068, 0.6712866425514221, 1.2791857719421387, -0.3448111116886139, 0.8927903771400452, -1.996018648147583, -0.7568295001983643, -0.5751246213912964, -0.8531194925308228, 0.2278670221567154, 0.31320369243621826, -0.3156220614910126, -0.4012816846370697, 0.10833753645420074, 0.23828689754009247, -0.3201223313808441, 0.3150414824485779, -0.24866080284118652, 1.1662993431091309, 0.2732621729373932, -0.1600770205259323, 0.1460934281349182, 0.543250560760498, 0.36369869112968445, -0.2530088424682617, -0.544302225112915, 0.3490082621574402, 0.6177598237991333, 0.8149706125259399, 1.1208806037902832, -0.3539208471775055, 0.09901657700538635, -0.5572372674942017, 0.25995102524757385, 0.3022121787071228, 1.0787346363067627, 0.4487171173095703, 0.16932916641235352, -0.9418578147888184, 0.5359324812889099, 0.12804919481277466, 0.9214538335800171, 0.6569602489471436, -1.4584424495697021, 0.3162713944911957, -0.4224368631839752, -0.2407958209514618, 0.4949706196784973, 0.1055002510547638, 0.2268100380897522, 0.2552013695240021, 0.47782406210899353, 0.0028442367911338806, -0.5986967086791992, 0.6331690549850464, 0.5637275576591492, 0.605913519859314, -0.21260365843772888, 0.35546380281448364, 0.5618305206298828, 0.7176907062530518, 0.4595212936401367, 0.5996379256248474, -1.4854810237884521, 0.6468557119369507, -0.6213604211807251, -0.05032512918114662, 0.787493109703064, -0.4954591989517212, -1.449665904045105, 0.34622499346733093, -0.35120537877082825, 0.20929525792598724, -0.4820275604724884, 0.0306241437792778, 0.20198959112167358, -0.023097269237041473, -0.34308338165283203, 0.5867114663124084, 1.0508285760879517, -0.7387394905090332, 0.08465614914894104, 0.7578986883163452, 0.5532066822052002, -0.3000847101211548, -0.012931590899825096, -0.1918548047542572, 0.3084563612937927, 0.6567592024803162, 0.48658549785614014, 0.7494033575057983, -1.8252081871032715, -0.7178119421005249, 1.0385652780532837, 0.44188573956489563, -0.22216612100601196, -0.6369456648826599, -0.622109055519104, 0.05424356460571289, 0.5824788808822632, 0.1039368212223053, 0.32030898332595825, -0.1337648630142212, -1.1574511528015137, -0.18696360290050507, -0.80657958984375, 0.1621784269809723, 0.81400465965271, 0.8347718715667725, -0.4156327247619629, -0.6804973483085632, 0.4483741521835327, 0.6084136962890625, 0.8615047931671143, 0.12949207425117493, 0.7715301513671875, 1.0496845245361328, -0.9973632097244263, 0.17466410994529724, 0.40918946266174316, 0.7419141530990601, 0.7007614970207214, 0.04822113364934921, 0.43716949224472046, -1.1374330520629883, 0.47773322463035583, 0.11422224342823029, 0.35252270102500916, 1.1087679862976074, 0.37610164284706116, 0.3850405514240265, 1.651313066482544, 0.210535928606987, -0.3017030656337738, 0.44980356097221375, -1.0242938995361328, 0.22200022637844086, -0.3468446731567383, 0.477271169424057, 0.03949280083179474, 1.3954650163650513, 1.1199644804000854, -0.6600897312164307, -0.49505722522735596, -1.0225292444229126, -0.4058608412742615, -1.0750732421875, 0.9991689920425415, 0.8533189296722412, -1.1558310985565186, 0.1127152293920517, -0.7396121621131897, 0.5964723229408264, 0.2999018728733063, 0.09982804954051971, 0.2719036638736725, -0.3080378770828247, 0.09197753667831421, -0.5439060926437378, 1.121143102645874, 1.1805487871170044, -0.1840210258960724, 0.29594236612319946, 0.1835184395313263, -0.7543540000915527, -0.6170669794082642, 0.7743645310401917, 0.011942476034164429, 0.07452671229839325, 0.20303337275981903, -1.7844970226287842, 0.2155369520187378, 0.35152262449264526, 0.42292532324790955, 0.8533467650413513, 0.30302971601486206, 0.17413297295570374, -0.46276038885116577, 0.39799249172210693, -0.8483670949935913, -1.1078121662139893, 0.015741102397441864, -0.29135486483573914, -0.4183626174926758, 0.35162684321403503, -0.1555282473564148, -1.1724759340286255, -0.12999621033668518, -0.11183816939592361, -1.0834280252456665, 0.1864912211894989, -0.18312078714370728, -0.8434761166572571, -0.08288140594959259, -0.7196300029754639, -0.8725507259368896, -0.1910018026828766, -0.481211394071579, -0.696492075920105, -0.08585537225008011, 0.05138957500457764, 0.5330706834793091, 0.8546102046966553, 0.6146318912506104, 0.5305941700935364, 0.7767951488494873, 0.10002964735031128, -1.6865158081054688, -0.394153892993927, -0.7325797080993652, 0.19499707221984863, -1.7456879615783691, 0.6026929020881653, -0.4018634259700775, -0.48277246952056885, -1.060243844985962, -0.010842505842447281, 1.3431938886642456, -0.08751963824033737, -0.6000633239746094, -1.158095121383667, -0.18586990237236023, 1.0235295295715332, 0.8521862030029297, 0.428772509098053, 0.040995702147483826, 0.551463782787323, 0.17065204679965973, 0.6247102618217468, 0.4183592200279236, -0.014820875599980354, 0.9434493780136108, -0.6753132343292236, -0.6811975240707397, -0.062270283699035645, -0.6262338757514954, -0.27799442410469055, 0.3994073271751404, 0.27581146359443665, -0.6961691379547119, -0.5371811389923096, -0.7450418472290039, 1.007239580154419, 0.22393235564231873, -0.015247002243995667, 0.9846704006195068, -0.5027722120285034, 0.08671415597200394, -0.2642882168292999, -0.6605476140975952, -0.2642471492290497, -0.5609157085418701, -0.39720770716667175, -0.009084549732506275, 0.08399373292922974, 0.39807137846946716, 0.6717606782913208, 0.7075783610343933, -0.6628420352935791, -0.7576947212219238, 0.16356156766414642, -0.3251386880874634, 0.31834155321121216, 0.056097399443387985, 0.2642822563648224, -1.3359806537628174, 0.4179295301437378, 2.3842201232910156, -0.03354330360889435, 0.7133151292800903, -0.3727951645851135, -0.26884904503822327, 0.040525682270526886, 0.13360606133937836, -0.12141291797161102, 0.7230522632598877, 0.2526068091392517, 0.310470849275589, 0.5663671493530273, 0.22668883204460144, 0.3584578037261963, -0.3903263211250305, -0.9676094651222229, -0.5021202564239502, 1.1236766576766968, 0.2182372510433197, 0.9073071479797363, 0.6336433291435242, -0.9515931606292725, -0.7553719282150269, 0.45729902386665344, 0.9572181701660156, -0.1599985957145691, 0.2566729784011841, -2.103670835494995, -1.7355127334594727, -1.5010149478912354, 0.23057585954666138, -0.880705714225769, -0.1506803184747696, -0.1665387749671936, 1.2530956268310547, 0.3983283042907715, 0.0374908521771431, 0.7795466184616089, -0.0007468312978744507, 0.7333163619041443, -1.0399739742279053, 0.8247109651565552, -0.028681717813014984, 2.0775299072265625, -0.3165067434310913, 0.9852215051651001, 0.7717348337173462, 0.6426820755004883, 0.5584135055541992, -0.1642632782459259, -0.43518316745758057, 0.2830854058265686, -1.6324113607406616, -1.1010336875915527, -0.165382981300354, -0.22947148978710175, 0.23762017488479614, -0.6267504692077637, 0.973889172077179, 1.3533523082733154, -0.08901341259479523, 0.46624377369880676, 1.0519623756408691, -0.7016200423240662, -1.7881691455841064, 0.5778104662895203, 1.1977850198745728, 0.07359478622674942, 0.5471462607383728, 0.5664523839950562, 0.19225502014160156, 0.2694765627384186, 0.45144182443618774, -0.9693453907966614, -0.37629395723342896, 0.060433804988861084, 0.36998042464256287, 0.5508797764778137, -0.48141661286354065, 0.19340918958187103, -0.37894243001937866, 0.3010028302669525, -0.3332171142101288, -0.2740476727485657, -1.0424249172210693, 0.26399099826812744, 0.118614561855793, 0.6361587047576904, -1.0029418468475342, 0.08075536787509918, 0.01925557665526867, 1.1445887088775635, -0.6038544178009033, 0.3549025356769562, 0.4942971169948578, -0.32926613092422485, 1.0561375617980957, 0.12003082036972046, 0.6835229396820068, -0.3185161054134369, 0.4579607844352722, 0.19030515849590302, -0.20996983349323273, -0.9853159785270691, -1.4219505786895752, -0.5605703592300415, 0.24410268664360046, -0.3519340753555298, 0.30183348059654236, -0.20899802446365356, 0.32877999544143677, -0.31075453758239746, -1.5297420024871826, -0.3346000909805298, -1.218559741973877, 0.5982669591903687, -0.20005428791046143, -1.1722170114517212, -0.06756477802991867, -0.464248925447464, 1.0335665941238403, 0.1946660578250885, -0.7406109571456909, -0.3573397397994995, -0.5560426115989685, 0.1687053143978119, -1.319483757019043, -0.544987142086029, 0.47141772508621216, -0.5542845726013184, -0.26083558797836304, -0.5470224618911743, -0.12322217226028442, -0.583456814289093, -0.7046037316322327, -1.6322765350341797, 0.17318907380104065, -0.5178271532058716, 0.6710441708564758, 0.11115159094333649, 0.38629409670829773, -0.6197136044502258, -0.44317352771759033, 0.8493210077285767, -0.6244951486587524, -0.7204554080963135, -0.34829339385032654, -1.4233784675598145, -0.0878089964389801, 0.9779275059700012, 0.6038411259651184, -0.07927753031253815, 0.30417463183403015, 2.230666160583496, 0.20423297584056854, -0.006540775299072266, -1.1960915327072144, 0.010197989642620087, -0.0551312118768692, 0.37746816873550415, -0.661693811416626, -0.47792279720306396, -1.0297902822494507]"
sc-copilot/SIMULATION/simulation_test.py,def test_simulation_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[-0.058939218521118164, 0.8427252769470215, -3.369253396987915, -0.8290646076202393, 0.6821277141571045, -0.4787241518497467, 1.0208799839019775, -0.6578475832939148, 0.13239409029483795, -0.5168519616127014, -0.29080861806869507, 0.9890631437301636, 0.41586703062057495, 1.1417902708053589, -1.344024896621704, -1.3113250732421875, 0.34227585792541504, -0.7334243059158325, -0.6573318243026733, 0.41620931029319763, 0.6683298349380493, -0.6721019744873047, -0.8194859027862549, -1.091490626335144, 1.1029901504516602, 0.5119521617889404, -0.2232583463191986, -0.03158825635910034, -0.35471999645233154, 0.19512054324150085, 0.5530992746353149, 0.4210539162158966, 0.9975977540016174, -1.2164684534072876, -0.4189597964286804, -0.7170467376708984, 0.11423200368881226, 0.13577502965927124, 0.23133501410484314, -0.53986656665802, -0.00727352499961853, 0.20636098086833954, 0.07149253785610199, 0.15075276792049408, 1.3686745166778564, -0.5979623794555664, 1.2704408168792725, 1.218921184539795, -0.5190227031707764, -0.8938188552856445, 0.6662588119506836, -0.5665762424468994, 0.7252224683761597, -0.612845778465271, 0.9250624179840088, 0.20797719061374664, -0.5735810995101929, 1.0454654693603516, 0.4089629650115967, -0.8754912614822388, 1.1560745239257812, 1.3836841583251953, -0.9100826978683472, 0.07355950772762299, -0.5667828321456909, 0.2944824695587158, -1.0362794399261475, 0.49784907698631287, -0.547848105430603, 0.054161421954631805, 0.5477545857429504, 0.12975463271141052, 0.358920156955719, -0.8003231287002563, -0.7897195816040039, 0.25068628787994385, -0.018499821424484253, -0.26061445474624634, -1.1655957698822021, 0.26752036809921265, -0.02743057906627655, 0.04245644807815552, 0.5895923972129822, 0.20976504683494568, 0.4648231863975525, -0.13825717568397522, -0.5214639902114868, -0.704340934753418, -0.7326111793518066, 1.8960349559783936, 0.08920972049236298, -0.21280469000339508, -0.22819073498249054, 1.2095624208450317, -1.0429960489273071, -0.053799815475940704, -0.43181538581848145, 1.089045524597168, -0.3242817521095276, -0.3019440472126007, 0.3254985511302948, 0.06992396712303162, 0.05317794531583786, -1.7859930992126465, -1.2848474979400635, 0.2848232090473175, -0.2660282552242279, -0.22985374927520752, -0.1368725299835205, -0.9769381880760193, -0.5564993619918823, 0.8184044361114502, -1.396573543548584, -0.1898261308670044, -0.24278056621551514, -0.3549874424934387, 0.878807783126831, -0.7088750600814819, -0.9147536754608154, 0.5688071846961975, -0.8620366454124451, -0.1649084985256195, -0.2513299584388733, 1.8370442390441895, -0.13246311247348785, 1.2129907608032227, -1.2393925189971924, 1.1860861778259277, 0.4488314390182495, -0.6828550100326538, 0.526924192905426, 0.23853370547294617, -1.4416917562484741, 0.36539366841316223, -1.0802247524261475, 0.06258957087993622, -0.2612402141094208, -0.4244534373283386, -0.38395920395851135, 0.24918003380298615, -0.6038642525672913, 0.08266957104206085, -0.7711492776870728, 0.06052720546722412, 0.05119730532169342, 0.005959704518318176, 0.18820014595985413, -1.3072361946105957, -0.808023989200592, -0.7143633961677551, 1.0210514068603516, 1.0907407999038696, 0.6783974170684814, 0.023353487253189087, 0.6022790670394897, 0.03570321202278137, 0.5315890312194824, -0.2803274393081665, 0.6189424991607666, 0.8411093354225159, 0.3606676757335663, -0.3263828456401825, -1.0003612041473389, 0.1712132841348648, -0.8435316681861877, -0.7663273811340332, 0.23855310678482056, 1.5716686248779297, 0.15641891956329346, -0.35059159994125366, -1.0328068733215332, -1.584177851676941, -0.08954933285713196, -0.014061078429222107, 0.05294623598456383, -0.0808049663901329, 0.3030164837837219, -0.3142905831336975, 0.677139401435852, 0.0014181379228830338, 0.5075485706329346, -0.28036361932754517, -0.07734137773513794, 0.7305529713630676, -0.283474862575531, -0.606251060962677, 0.35156887769699097, -0.5540456771850586, -0.8849768042564392, -0.6839241981506348, 0.2187105417251587, 0.06650487333536148, -0.8678167462348938, -0.9279848337173462, -0.949312686920166, -1.652974009513855, -0.053925588726997375, 0.6208497881889343, 0.6364113092422485, 0.26063480973243713, 0.34349462389945984, -0.06301224231719971, -0.24974702298641205, 0.7602742314338684, -0.49063220620155334, -0.3662913143634796, -0.823218047618866, -0.5895495414733887, -0.5336190462112427, -0.7608685493469238, 1.7212786674499512, 0.7417242527008057, -0.343764066696167, 0.6101588010787964, 1.0139782428741455, -0.3208613991737366, -0.5050749182701111, -0.7009788751602173, -0.7650486826896667, 0.6817070841789246, 0.9851057529449463, -1.2271347045898438, -0.04968462884426117, -0.2528073787689209, 0.5981342792510986, 0.21833816170692444, -0.5412280559539795, 0.9941720366477966, -0.5087568759918213, -0.20446614921092987, 0.24720317125320435, -1.334434986114502, -0.22434478998184204, -0.20240211486816406, 0.33175182342529297, 1.2372550964355469, -0.1864977777004242, 1.1771650314331055, 0.8693664073944092, -0.13931886851787567, -0.2623615860939026, 0.543989896774292, 0.2067445069551468, 0.13749277591705322, 0.1134270429611206, -0.19103142619132996, 0.02949182689189911, -0.4441375136375427, 0.4594106376171112, 0.19035808742046356, -0.8024949431419373, 0.5815044641494751, -0.2537836730480194, 0.9681694507598877, 0.4839279055595398, -0.09526124596595764, -0.017913896590471268, -0.9957692623138428, 0.4851078987121582, 0.14010992646217346, 0.7812912464141846, -0.10646261274814606, 1.7046948671340942, -0.08771359920501709, -1.1991698741912842, -0.7119503021240234, -0.4276115298271179, -0.022804871201515198, -0.595536470413208, -0.1483154594898224, 0.1326673924922943, 0.022546574473381042, 1.4385406970977783, 0.6270071268081665, 0.1736980676651001, -0.3416748046875, 0.9790209531784058, -0.5129066705703735, -0.04434088245034218, 0.6966677308082581, -0.9173479080200195, -1.0794157981872559, 0.34781157970428467, 0.21451830863952637, 0.5282962918281555, -0.22713322937488556, 0.2742784023284912, -0.49008041620254517, 0.17338360846042633, -0.11935828626155853, 1.0269708633422852, -0.16300588846206665, -0.3711443543434143, 1.2053797245025635, -0.36731037497520447, -0.4491352140903473, 0.8542577028274536, -0.47520846128463745, 0.31502583622932434, -0.3837471604347229, 0.436550498008728, 0.9350691437721252, 0.8422849178314209, 1.618685245513916, 0.7138018608093262, -0.1868133246898651, 0.3823077976703644, -0.7838066816329956, 0.07367394864559174, 0.3123667538166046, 0.47671663761138916, 0.5963394045829773, -1.405429720878601, 0.22240081429481506, -1.196096420288086, 0.939308762550354, 0.4606577157974243, -0.07629452645778656, 0.7741755843162537, -0.4808245599269867, 0.3809487819671631, -0.28985464572906494, 0.0355411171913147, -0.8440007567405701, -0.36952096223831177, 1.4514970779418945, 0.06307610124349594, 0.4103318452835083, 0.2611902952194214, -0.2641814947128296, 1.0284128189086914, 0.9499830603599548, 0.602379560470581, -0.7553794980049133, 0.017656728625297546, -1.004471778869629, -0.23022806644439697, 0.8268795013427734, -0.7000272274017334, 0.8333341479301453, 0.38068687915802, -0.6397667527198792, 0.6749246120452881, -1.091400146484375, 0.2409697324037552, -0.6461854577064514, 0.46851077675819397, 0.11252772808074951, 0.5592027902603149, -0.19633017480373383, -0.27450382709503174, 0.6170294284820557, -0.4624292254447937, -0.4677073061466217, 0.610705554485321, 0.20458227396011353, 1.047078013420105, 0.31545230746269226, 0.6145880222320557, 0.3869580328464508, -0.19176708161830902, -0.1581912636756897, -0.6709786653518677, -0.7980762720108032, 0.5058612823486328, 0.48228204250335693, 0.529687225818634, 1.3832581043243408, 0.6172360181808472, 0.26080000400543213, -1.1057039499282837, 0.8234772682189941, 0.4020039141178131, 1.3174141645431519, 1.2425954341888428, 0.37123677134513855, -1.2178218364715576, 0.9933890104293823, 0.2586541771888733, 0.35328251123428345, 0.9350465536117554, -0.5697041749954224, 0.05486998334527016, -0.7176126837730408, 0.35397568345069885, 0.30088403820991516, 0.5748251676559448, 0.42619603872299194, -0.32546937465667725, -0.2736400365829468, 0.7395443916320801, -0.5563161969184875, -0.2112862765789032, 0.613988995552063, 0.9021539688110352, -0.5599156618118286, 0.5661695599555969, 0.839320957660675, 0.2633592486381531, 0.09573671221733093, 0.12358603626489639, -1.5608282089233398, 0.3114275336265564, 0.07292138040065765, -0.17329178750514984, -0.2670574486255646, -1.1394191980361938, -1.3163294792175293, -0.18810336291790009, 0.44697093963623047, 0.22205393016338348, 0.29704493284225464, -0.042559701949357986, -1.216235637664795, -0.15647611021995544, -0.19889816641807556, 0.9191613793373108, 1.2870421409606934, -1.2443121671676636, 1.1863718032836914, 0.45748892426490784, 0.046106889843940735, 0.010506898164749146, -0.08004213869571686, -0.4590151309967041, -0.3864383101463318, 0.5508297681808472, 0.42657992243766785, 0.06339956820011139, -1.7154655456542969, -0.4515651762485504, 0.13423174619674683, 0.416121244430542, -0.2685346007347107, -0.4826502203941345, -0.4886232912540436, 0.03877066820859909, 1.3257768154144287, 0.20341427624225616, 0.5818418860435486, -0.7761440277099609, -1.188866138458252, 0.36378490924835205, -0.6957570314407349, 0.18918085098266602, 1.9610817432403564, 0.5436627864837646, -1.1472184658050537, -1.242958664894104, 0.3006076216697693, 0.0029823407530784607, 0.6183488368988037, 0.008156444877386093, 1.120422124862671, 0.13015154004096985, -1.1087238788604736, 0.1375986933708191, -0.052175458520650864, -0.40879109501838684, 0.8740895390510559, -0.19620931148529053, 0.29893797636032104, -0.9649292230606079, 0.5837181806564331, 0.15763744711875916, 0.4587366580963135, 0.41170912981033325, -0.6996349692344666, 0.052928898483514786, 1.2515441179275513, -0.14181244373321533, -0.866651177406311, 0.9303064346313477, -0.04681060463190079, 0.3221411108970642, -0.3970569372177124, 0.33951228857040405, 0.8022643327713013, 0.8982521295547485, 1.027841329574585, -0.13182197511196136, -0.7362252473831177, -0.9881205558776855, -0.5733736753463745, 0.4597238302230835, 0.9739233255386353, 0.531785249710083, -0.7799601554870605, 0.4339268207550049, -0.7911933660507202, 0.4307785630226135, 0.14817214012145996, 0.46034491062164307, -0.27050837874412537, 0.13817113637924194, -0.5879989862442017, 0.45506399869918823, 0.4468972682952881, 0.16208212077617645, 0.09970419108867645, 0.07430121302604675, 0.43913155794143677, 0.294708788394928, -0.6077327132225037, -0.06514129042625427, 0.7096429467201233, 1.0147202014923096, -0.5515309572219849, -1.8140004873275757, 0.10393698513507843, -0.12174943089485168, 1.0631468296051025, 1.1284217834472656, -0.16566568613052368, 0.7390211224555969, -0.3087714612483978, 0.8169690370559692, -1.5668481588363647, -1.5749894380569458, -0.7924638390541077, 0.3799201250076294, -0.2361273616552353, -0.008845522999763489, 0.1347324252128601, -1.4189035892486572, 0.4366220533847809, -0.23129069805145264, -1.4552098512649536, 0.5244814157485962, -0.32075148820877075, -0.3864472508430481, 0.4985139071941376, -1.3554410934448242, -0.7095693945884705, -0.608945369720459, -0.967363715171814, -0.9244984984397888, -0.4144012928009033, 0.5729993581771851, 0.24057528376579285, -0.032592445611953735, 0.6702699661254883, 0.44101130962371826, 0.47012028098106384, -0.07861324399709702, -0.7793585062026978, -0.7885947227478027, 0.20862942934036255, 0.35246434807777405, -2.079224109649658, -0.12143203616142273, -0.7488059997558594, -1.0348670482635498, -1.274599313735962, 0.047608353197574615, 1.3036611080169678, 0.1360793113708496, -0.9460741281509399, -0.5926419496536255, -0.5670249462127686, 0.3691967725753784, 0.4039164185523987, -0.36910444498062134, 0.12505361437797546, -0.3296445906162262, 0.34393808245658875, -0.389484703540802, 0.6569992303848267, 0.15106052160263062, 0.9325869083404541, 0.1655043661594391, -1.1035125255584717, 0.5069353580474854, -0.7460441589355469, -0.7990914583206177, -0.14584580063819885, 0.8999175429344177, -0.09494338929653168, -0.3057224750518799, -0.7644598484039307, 0.3638015389442444, -0.6418504118919373, 0.6085652709007263, 1.1427702903747559, 0.3130131661891937, -0.25132235884666443, 0.18770644068717957, -0.15616551041603088, 0.016271091997623444, -0.0774247944355011, -0.5854257941246033, -0.2880658507347107, 0.9796068072319031, -0.4038742184638977, 0.8955628871917725, 0.14851336181163788, -0.9038268327713013, -0.6524673700332642, -0.7266592383384705, 0.21993447840213776, 0.5647324323654175, -0.27408134937286377, 0.8879454731941223, -2.0175392627716064, -0.06478097289800644, 2.3972604274749756, -0.06636355817317963, 1.1147804260253906, -0.07829740643501282, 0.10357639938592911, 0.8844039440155029, 0.31616687774658203, -0.11857905238866806, 0.6343806385993958, 0.19264353811740875, -0.37228792905807495, 1.5860764980316162, -0.9037452936172485, 0.03375598043203354, -0.061077531427145004, -0.2795206606388092, -0.421791672706604, 1.66032075881958, -0.41174060106277466, 0.46505072712898254, 0.44333699345588684, -0.8320598006248474, -0.06992027163505554, 1.126891016960144, 0.9025282263755798, -0.8864772319793701, 0.302756130695343, -2.1443910598754883, -1.4378647804260254, -1.2708836793899536, 1.0307881832122803, -0.934769868850708, 0.48399317264556885, 0.4603784680366516, 0.9997379779815674, 0.16500449180603027, 0.2992077171802521, 0.1445012390613556, -0.5176750421524048, 0.008345052599906921, -0.6117703914642334, 1.8127212524414062, 0.8733685612678528, 1.77524995803833, -0.13238990306854248, 1.6622605323791504, 1.1032304763793945, 0.040036641061306, 0.1937255561351776, -0.023072324693202972, -0.0974036455154419, 0.6776801943778992, -0.641079306602478, -0.4556548297405243, -0.28542476892471313, -0.7783026695251465, -0.5414548516273499, -0.9301314949989319, -0.10937973111867905, 0.8020375370979309, 0.3934571146965027, 0.25355181097984314, -0.08424487709999084, 0.024640407413244247, -1.1508612632751465, 0.9994897246360779, 0.9486760497093201, -0.3230114281177521, 0.22396236658096313, 0.9861085414886475, -0.16015596687793732, 0.45754241943359375, 1.216564655303955, -0.46130645275115967, -0.6515138745307922, -0.46729424595832825, 0.2909694314002991, 1.3160879611968994, 0.5776252746582031, 0.12538228929042816, -0.31018877029418945, 0.017139196395874023, -0.6761023998260498, -0.7678380012512207, -1.5719192028045654, -0.07592497766017914, 0.7835954427719116, -0.011343598365783691, -0.7373176217079163, 0.4282345771789551, -0.1988450288772583, 0.5452125668525696, -0.38140735030174255, 0.5441484451293945, 0.49331265687942505, -0.037337273359298706, 1.3475594520568848, 0.6296969056129456, 1.0327210426330566, -0.5209133625030518, -0.4195600748062134, -0.16381487250328064, -0.5007768869400024, -1.100760579109192, -1.5919275283813477, 0.36143001914024353, 0.8832529783248901, 0.3623194098472595, 0.5101340413093567, -0.39886245131492615, 0.28211474418640137, -0.7594277858734131, -1.0646393299102783, -0.2003951072692871, -0.8233906030654907, 0.6546366214752197, -0.4193039536476135, -0.6419662833213806, 0.7232340574264526, 0.30316704511642456, 0.022484086453914642, 0.5801476836204529, -0.2782703936100006, 0.4262506663799286, -0.9217599630355835, 0.5565994381904602, -0.8923050165176392, -0.06666110455989838, 0.7994951605796814, 0.09723016619682312, 0.6833373308181763, -0.5580243468284607, -0.03461278975009918, -0.9274067878723145, -0.4405590891838074, -0.48194605112075806, 0.5827537178993225, 0.859417200088501, 0.19942018389701843, 0.4049549102783203, -0.1148906946182251, -0.9943329095840454, 0.25018298625946045, 0.6792646646499634, -0.0012070946395397186, -0.5825542211532593, -0.3160555958747864, -0.5649663209915161, -0.04922722280025482, 0.007222570478916168, 0.3858262896537781, -0.15157082676887512, 0.0746593326330185, 2.975764274597168, 0.1102401539683342, -0.02795301377773285, -0.784523606300354, 0.11867884546518326, -0.08532537519931793, -0.9052278399467468, -0.6758981943130493, 0.4628991484642029, -0.8246795535087585]"
sc-copilot/SIMULATION/simulation_derived_parameters.py,def simulation_derived_parameters():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.6316056847572327, 0.5748432278633118, -3.1659631729125977, -1.2440595626831055, 1.4450465440750122, 0.2549593448638916, 0.7566014528274536, -0.14187414944171906, -0.8957726955413818, -0.10167872905731201, -0.9862090349197388, 0.43159282207489014, 1.6584736108779907, 1.01121187210083, -0.6863512992858887, -1.6067453622817993, -0.1249755248427391, -0.46709978580474854, -0.3354426920413971, 0.9146828651428223, -0.25609344244003296, -0.8046901226043701, -0.4015324115753174, -1.024997353553772, 1.6148720979690552, 0.7725417613983154, 0.1185518354177475, 0.1171237975358963, -1.1528736352920532, 0.5209394693374634, 0.5823882818222046, 0.2456323802471161, 0.7684299945831299, -0.24156507849693298, -0.8515714406967163, -0.48631492257118225, 0.3583478331565857, 0.7270498275756836, 0.9701459407806396, -0.9700473546981812, -0.029083460569381714, -0.5019687414169312, 0.5281932353973389, 0.5549742579460144, 0.584618866443634, 0.0937390848994255, 1.4859622716903687, 0.2391563057899475, 0.03099151700735092, -0.8810030817985535, 0.8004860877990723, 0.5534892082214355, 0.6722911596298218, -1.50945246219635, 0.6639423370361328, -0.2964765429496765, -0.5707646012306213, 0.914218544960022, 0.38766926527023315, -0.8139179944992065, 1.0254173278808594, 1.4018878936767578, -1.6394593715667725, 0.5369951725006104, 0.02646198868751526, -0.45664283633232117, -1.088949203491211, 0.9695383310317993, -0.5002914667129517, -0.43590420484542847, 0.5375362038612366, 0.4871823191642761, 0.059992462396621704, -0.7156387567520142, -0.7441425919532776, 0.0324334055185318, -0.39311864972114563, -1.2461159229278564, -0.8229593634605408, 0.40651917457580566, -0.34075045585632324, 0.5731408596038818, 0.7706633806228638, -0.45494091510772705, 0.8017643690109253, 0.7131654620170593, -0.579679012298584, 0.22241602838039398, 0.11110801249742508, 1.7180002927780151, -0.03928655385971069, -0.5574213266372681, 0.0802588015794754, 0.3301100730895996, -1.1474636793136597, -0.37962448596954346, -1.2738840579986572, 0.5965871810913086, 0.9459211826324463, -1.2095896005630493, 0.5784502625465393, 0.43688255548477173, 0.515130877494812, -0.9634000062942505, -0.2985304296016693, 1.1643818616867065, 0.6380807757377625, 0.18556459248065948, -0.2721098065376282, -0.6111301779747009, -0.6619658470153809, 0.4376022219657898, -0.9291529655456543, -0.6507061719894409, -0.7921450138092041, -1.0982073545455933, 0.4258817434310913, -0.39379531145095825, -0.7385609149932861, 0.9104877710342407, -0.9250873327255249, -0.5936674475669861, 0.8730272650718689, 1.233980417251587, 0.31133803725242615, 0.9993948340415955, -0.7678598165512085, 0.9280574917793274, 0.5710957050323486, -0.8100690841674805, 0.1780816912651062, -1.136366605758667, -1.1899899244308472, 0.20416490733623505, 0.11056658625602722, 0.5571491122245789, -0.3925876319408417, -0.600084662437439, -0.17406988143920898, 0.858182430267334, 0.024882452562451363, -0.08011267334222794, -0.6037981510162354, -1.4192383289337158, -0.46530818939208984, -0.36913150548934937, 0.7293347120285034, -0.9037178754806519, -0.4384225904941559, 0.016879074275493622, 0.6432288289070129, 1.4985318183898926, 0.43527984619140625, 0.5641509294509888, 0.6640671491622925, -0.494814395904541, 0.9823285937309265, -0.5496083498001099, -0.3513593375682831, -0.5896428823471069, 1.4022905826568604, -0.15838372707366943, -0.715827465057373, 0.9540082812309265, 0.02654723823070526, -0.9050085544586182, 0.14170637726783752, 0.189331516623497, -0.046972766518592834, 0.9655423164367676, -0.8658166527748108, -0.9410452842712402, 0.003567144274711609, -0.1561182737350464, 1.028563380241394, -0.48286306858062744, 0.7201046347618103, -0.6047592163085938, -0.12945760786533356, -0.05329529196023941, 1.0709689855575562, -0.49459102749824524, 0.34437257051467896, 0.22871169447898865, 0.25462111830711365, -0.10719738900661469, -0.04448387026786804, -0.6851338148117065, -0.8372997045516968, -0.6132335066795349, -0.255210816860199, 1.484861969947815, -1.2091784477233887, -1.713144302368164, -0.9068032503128052, -0.8680682182312012, 0.7019071578979492, -0.2006584256887436, 1.2672991752624512, 1.011167049407959, 0.30868998169898987, 0.044938825070858, 0.17063316702842712, 0.9502236843109131, -0.8713216781616211, 0.46714186668395996, -0.7204992771148682, 0.770336389541626, -0.7997198104858398, -0.18158972263336182, 1.370483160018921, 0.1991918385028839, 0.1588333547115326, 0.6036528944969177, 0.07317626476287842, -1.2054188251495361, -0.3733512759208679, -0.45429879426956177, 0.08881129324436188, 0.3899906873703003, 0.34161633253097534, -0.9595836400985718, 0.17419332265853882, 1.247978687286377, 0.1774057298898697, -0.8361267447471619, -0.5002896189689636, 0.9217255115509033, 0.02455892413854599, 0.45922988653182983, -0.3760833144187927, -1.3389286994934082, 0.6564739942550659, -0.2915957272052765, 0.5392428636550903, 0.58043372631073, -0.6104691624641418, 0.3497280478477478, 0.8038772940635681, 0.08637985587120056, 0.1944168359041214, 0.6092734336853027, 0.3844091296195984, 0.23954109847545624, -0.6699073314666748, -0.11010798811912537, -0.32592320442199707, -0.09064057469367981, 0.8710196018218994, -0.046521589159965515, -1.333831787109375, 0.5210940837860107, 0.08818917721509933, 0.8979212641716003, 0.2775943875312805, -0.38813620805740356, -0.8022487759590149, -0.8037821054458618, 0.3405860662460327, -0.286550909280777, 0.10030072182416916, -0.12900874018669128, 0.9128272533416748, -0.37129682302474976, -0.5521191358566284, 0.1576073169708252, 0.1904449313879013, -0.1455693244934082, 0.3831232786178589, 0.3939843773841858, 0.7560586929321289, -0.22365030646324158, 0.5693012475967407, 1.321392297744751, 0.9631749987602234, 0.011085886508226395, 0.9643430709838867, -0.11425208300352097, -0.5276287198066711, 0.43289104104042053, -1.2792541980743408, -1.7378077507019043, -0.6840052604675293, 0.012171898037195206, 0.19033603370189667, -0.06635565310716629, 0.5076864957809448, -0.2936321794986725, -0.3665679097175598, -0.09789419174194336, -0.13206864893436432, 0.5024539828300476, -0.719796359539032, 0.7653222680091858, -0.8899701833724976, 0.1037219762802124, 1.0040026903152466, -0.04651208594441414, 0.9519129991531372, -0.7004481554031372, 0.7630535364151001, 0.4905123710632324, 0.6896001696586609, 1.4256477355957031, -0.8676822781562805, -0.42628616094589233, 0.3125673532485962, -0.618537187576294, 0.04687532037496567, -0.15507960319519043, 0.42056766152381897, -0.4696761667728424, -0.6437897682189941, 0.4093789756298065, -0.8039742708206177, 0.989004909992218, 0.7309136986732483, -0.2988354563713074, 1.1278518438339233, -0.31095096468925476, 0.47329914569854736, -1.6295723915100098, -0.14522045850753784, -1.047830581665039, 0.1812327653169632, 2.130095958709717, -0.39584097266197205, 0.3628191649913788, 1.1893010139465332, -0.7259854078292847, 1.398656964302063, -0.062159113585948944, 0.910409688949585, -0.6188211441040039, -1.0979630947113037, -0.24488861858844757, -0.860143780708313, 0.19737614691257477, 0.13674291968345642, -0.043923117220401764, 0.4096483290195465, -1.2965786457061768, 0.5653896927833557, -1.0678706169128418, -0.813637375831604, -0.2553710341453552, -0.8309762477874756, -0.7380853295326233, 0.5618851780891418, 0.18284834921360016, -0.17868787050247192, 0.24421268701553345, -0.49603477120399475, -0.48979347944259644, -0.16846902668476105, 0.2180822491645813, 1.5727041959762573, 0.2889522612094879, 0.14758363366127014, 0.6888031959533691, 1.007861614227295, -0.26548153162002563, -0.64736008644104, -0.43654197454452515, 0.8635257482528687, 0.3485651910305023, 0.11434881389141083, 1.381289005279541, -0.6065700054168701, -0.7401634454727173, -0.6709043979644775, 0.35295090079307556, -0.37760981917381287, 0.7755022644996643, 1.0716580152511597, 0.06075696647167206, -0.8667408227920532, -0.012630239129066467, -0.1265462040901184, 0.7466979026794434, 0.46655213832855225, -0.8771432638168335, 0.4600580930709839, 0.6038270592689514, -0.06780151277780533, 0.04676676541566849, -0.0054819658398628235, 0.0637550950050354, -0.26301130652427673, -0.6327099800109863, 0.472218781709671, -0.3039683997631073, 0.16909930109977722, 0.43300527334213257, 0.5928864479064941, -0.9393469095230103, -0.23115290701389313, -0.17749294638633728, 0.17282679677009583, 0.9834177494049072, -0.041451625525951385, -1.865014672279358, 0.8315111398696899, -0.05906565487384796, 0.3576700687408447, -0.5651406049728394, -0.21741622686386108, -1.4264397621154785, -0.33949601650238037, 0.30109572410583496, 0.16827799379825592, 0.4653182625770569, 0.6088123321533203, -1.4843692779541016, 0.09725268930196762, -0.0986333042383194, 0.18748842179775238, 0.45660972595214844, -0.37649840116500854, 0.8708551526069641, 0.6902557611465454, -0.21860361099243164, -0.338295042514801, 0.7273960709571838, -0.05166932940483093, 0.24690675735473633, 0.632784903049469, 0.26636236906051636, -0.5972004532814026, -1.4368302822113037, -0.12989845871925354, 0.30972081422805786, 1.2992420196533203, 0.15263105928897858, -0.30050748586654663, -0.002643957734107971, -0.33495867252349854, 0.9142641425132751, 0.49196091294288635, 0.6089314818382263, -0.584469199180603, -0.40019962191581726, 1.2255765199661255, -0.6284394264221191, 0.16715848445892334, 0.8102933168411255, 0.4135032594203949, -0.9620401263237, -1.2116177082061768, 1.1879510879516602, 0.22408320009708405, 0.42381519079208374, -0.34197983145713806, 1.0075422525405884, 1.0543016195297241, -0.43082892894744873, 0.08564487099647522, -0.4892091751098633, -0.4325542747974396, 0.22045844793319702, 0.189793661236763, 0.20075097680091858, -2.4720239639282227, -0.14357542991638184, 0.0009942799806594849, -0.6436826586723328, 0.2776906490325928, -0.06238439679145813, 0.7911018133163452, 1.93033766746521, -0.06124764680862427, -1.2996912002563477, 0.8548163771629333, 0.29171502590179443, 0.8309773206710815, -0.7763500809669495, -0.028432071208953857, -0.2215731143951416, 0.3537974953651428, 0.8973587155342102, -0.17677128314971924, -0.02343408763408661, -0.14905311167240143, -0.7030264139175415, 0.16873198747634888, 0.7451539635658264, 0.7761884331703186, -0.6161800026893616, 0.4801454544067383, -0.7087249755859375, 0.6811649203300476, 0.5847446918487549, 0.3720119595527649, -0.7152661681175232, 0.21600079536437988, -0.8445836305618286, 0.014239337295293808, 0.3004554510116577, 0.35640230774879456, 1.131049633026123, -0.04425862431526184, 0.35388392210006714, 0.4703424572944641, -0.21221917867660522, 0.5516756772994995, 1.157088041305542, 1.9738610982894897, -0.7580870985984802, -1.7595163583755493, 0.18906424939632416, 0.0900789424777031, 0.9984234571456909, 1.4150118827819824, -0.7524582147598267, 0.12115320563316345, -0.6838152408599854, 0.44452452659606934, 0.13451021909713745, -1.6001110076904297, -0.45363813638687134, 0.7219700813293457, -0.8810629844665527, 0.3032522201538086, -1.000614881515503, -1.227368950843811, 0.5458964705467224, 0.43855205178260803, -2.1664061546325684, 0.1783018261194229, -0.4861082434654236, -0.43407899141311646, 0.2639762759208679, -1.349147081375122, -0.27925369143486023, -0.7066655158996582, -1.0152254104614258, -0.8144193887710571, -0.35856613516807556, 0.2803456783294678, 0.12582913041114807, -0.07756757736206055, 0.7387977838516235, 0.8089600205421448, 0.5232586860656738, 0.08301602303981781, 0.12100446969270706, -0.278742253780365, 1.0584790706634521, 0.4487505257129669, -2.5542972087860107, 0.05764635279774666, -1.431734561920166, -0.3012402653694153, -0.9278843998908997, 0.16842222213745117, 1.0166397094726562, -0.21822799742221832, -0.8597332239151001, -1.217120885848999, 0.5129758715629578, -0.15265467762947083, 0.0845971554517746, 0.8632156848907471, 0.10569516569375992, -0.4500357508659363, 0.07602544873952866, 0.3922652006149292, 1.4204331636428833, 0.06411019712686539, 0.7171667218208313, -0.888297438621521, -1.6423670053482056, 0.38227379322052, -0.022360628470778465, -0.05362614616751671, 0.1943884789943695, 0.625473141670227, -0.4385948181152344, -0.7566018104553223, -0.8426973223686218, 0.19877445697784424, -0.678752064704895, 0.23286721110343933, 1.0015861988067627, -0.14243772625923157, -0.2648628354072571, -0.04868777096271515, -0.1697036772966385, 0.33676400780677795, -0.11597742140293121, 0.9197473526000977, 0.13462525606155396, 0.457356721162796, -1.1488573551177979, 1.1991662979125977, 0.16938921809196472, 0.16254647076129913, -0.12582874298095703, -0.6892143487930298, -0.8844823837280273, 0.7366219758987427, -0.46280035376548767, 0.9417370557785034, -2.4968767166137695, 0.41333839297294617, 1.0361253023147583, -0.3501918613910675, 0.22572645545005798, 0.01722078025341034, -0.5000998377799988, 0.7375047206878662, 0.4606284201145172, 0.0002709031105041504, 0.11045911908149719, 0.645621657371521, -0.5200698375701904, 1.361851692199707, 0.3125476837158203, -0.1714121401309967, 0.2754981815814972, -0.5164610743522644, -1.678476333618164, 1.283190369606018, -0.29624849557876587, 0.39207375049591064, 0.36159875988960266, -1.5447907447814941, 0.5665597915649414, 0.5909963846206665, 0.5519053936004639, -0.446271151304245, 0.10926178097724915, -1.438223958015442, -1.552661418914795, -0.9593271017074585, 1.957383632659912, -0.47798624634742737, 1.0056796073913574, 0.20131605863571167, 1.260789155960083, 0.12401872873306274, -0.18470394611358643, 0.5332794189453125, 0.009830083698034286, -0.24723616242408752, -0.2172071933746338, 0.7196011543273926, 0.7086464166641235, 1.2038524150848389, -0.003742612898349762, 1.2883992195129395, 1.2780929803848267, 0.35698795318603516, 0.49448126554489136, 0.43648672103881836, -0.12071990966796875, 0.43937528133392334, -1.3124796152114868, -0.22586756944656372, -0.43126004934310913, -1.2885322570800781, -0.7606173753738403, -0.7472406029701233, -0.6467174887657166, 0.4373374283313751, 0.1111162006855011, 0.5960206389427185, 0.004761025309562683, -0.12717817723751068, 0.20859307050704956, 0.8565877079963684, 0.2573390603065491, -0.23359715938568115, 0.869678795337677, 0.5289068818092346, 0.04574020206928253, -0.31848078966140747, 1.0501042604446411, -0.5779670476913452, -0.2751176357269287, 0.49373435974121094, 0.91548091173172, 1.0784289836883545, -0.32641375064849854, -0.6919490694999695, -0.8272991180419922, 0.32479459047317505, -1.0932801961898804, -1.0185657739639282, -0.7764749526977539, -0.5097253322601318, 0.2667405605316162, 0.046261876821517944, -0.6516891717910767, -0.036287449300289154, -0.06917647272348404, 0.353390097618103, -0.7347761392593384, 1.0293474197387695, 0.9198139309883118, -0.024776577949523926, -0.2721249461174011, 0.591789722442627, 0.39051899313926697, -0.8003240823745728, -0.23544201254844666, -0.3502535820007324, -0.40337955951690674, 0.026228904724121094, -0.3604276776313782, 0.3241187036037445, -0.19658546149730682, 0.10945797711610794, 0.8929230570793152, -0.22041723132133484, 0.7627542614936829, -0.6035494804382324, -1.4307217597961426, 0.07475679367780685, -0.26689469814300537, 0.8406572937965393, -0.1030072420835495, -0.7715699076652527, 0.163273885846138, 0.3100087642669678, 0.04926164820790291, -0.6558841466903687, -1.0925002098083496, -0.2327173352241516, -0.8384814262390137, -0.46929028630256653, -0.6725884675979614, -0.28544163703918457, 0.8950015306472778, -0.6496012210845947, -0.030744493007659912, -0.18880170583724976, 0.38076385855674744, -0.5173946619033813, -0.29668956995010376, -1.261821985244751, 0.2683139741420746, 0.5514801740646362, 0.7790452241897583, 0.022777007892727852, -0.4395546615123749, -0.7528988122940063, 0.7032740712165833, 1.1063194274902344, 0.4720153212547302, 0.14030860364437103, 0.07147910445928574, -0.6603183150291443, -0.4033015966415405, 0.38743579387664795, -0.48299527168273926, 0.20243437588214874, -0.025970622897148132, 2.178165912628174, 0.404140830039978, 0.1257759928703308, -0.9459776282310486, 1.1493011713027954, 1.0003745555877686, -0.8438898921012878, -0.3710502088069916, -0.36382752656936646, -0.10270311683416367]"
sc-copilot/NEW_CLAIM/new_claim_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef new_claim_pre_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.756674587726593, 0.14077237248420715, -3.5360188484191895, -0.7581272721290588, 1.8645801544189453, -0.19890794157981873, 0.9554241299629211, 0.08389970660209656, -0.06970604509115219, -0.9669665098190308, -0.6590049266815186, 0.24262258410453796, 1.2514894008636475, 1.1704150438308716, -0.13510265946388245, -0.15150508284568787, 0.0751459077000618, -0.9672680497169495, -0.16029854118824005, 0.7549600005149841, 0.49318864941596985, -0.2804182767868042, -0.9832500219345093, -1.0301423072814941, 0.9755043983459473, 0.6642420291900635, 0.2539706826210022, -0.060463011264801025, -0.31908538937568665, 0.6737082004547119, 0.35960227251052856, 0.17417168617248535, 0.1305757462978363, -0.9197118282318115, 0.1640457808971405, -0.6970037221908569, 0.1626700758934021, -0.3588272035121918, -0.30846235156059265, -1.5623300075531006, 0.49417123198509216, 0.31362342834472656, 0.6119693517684937, 0.44801250100135803, 0.1258009821176529, -0.13030508160591125, 1.5699201822280884, 0.3022940754890442, -0.13442881405353546, -1.3529701232910156, 0.0039863623678684235, -0.2780008912086487, 0.1171010360121727, -0.3624526262283325, 1.4800751209259033, 0.6723878383636475, -0.09918763488531113, 1.2301747798919678, -0.6641051769256592, -0.8386809825897217, 1.867179274559021, 1.099594235420227, -0.2575506567955017, 0.8934116363525391, 0.392066091299057, 0.3441062569618225, -0.6978790760040283, 0.35871511697769165, -0.3264913260936737, -0.4293825626373291, -0.02734886109828949, 0.7084476351737976, -0.26162809133529663, 0.01714206486940384, -0.01799488067626953, 0.6376485228538513, -0.8339478969573975, -1.9209401607513428, -0.13610035181045532, 0.9434828758239746, 0.014869045466184616, 0.3581502437591553, 1.5599932670593262, -0.4805896282196045, 0.7323327660560608, -0.17364493012428284, -0.07023792713880539, 0.09807431697845459, -0.12347808480262756, 1.2406995296478271, 0.08717840164899826, -0.7014490962028503, 0.11618360877037048, 0.18766823410987854, -0.39902663230895996, -0.3425528407096863, -0.38008666038513184, -0.07767030596733093, -0.49174922704696655, -0.6134762167930603, -0.14398635923862457, 0.38518691062927246, 0.46650803089141846, -0.07968155294656754, -0.647023618221283, 0.293643593788147, 1.1008200645446777, 0.422614187002182, -0.2639199197292328, -1.3604286909103394, -0.2695621848106384, 1.0130977630615234, 0.21469804644584656, -0.0007252655923366547, -0.2624020576477051, -0.37409940361976624, 1.8577358722686768, -0.5735456347465515, -0.8079912662506104, 0.8258901834487915, -0.889248251914978, -0.6522153615951538, 1.6148386001586914, 1.5895785093307495, -0.5843652486801147, -0.23490869998931885, -0.1376478374004364, 0.46769240498542786, 0.3903543949127197, -0.9383285045623779, 0.5748711824417114, 0.04653388261795044, -0.9611032009124756, 0.9032011032104492, 0.1426292061805725, 0.24244709312915802, 0.16233684122562408, -0.24472415447235107, -0.09476254135370255, 0.7193974852561951, 0.8037948608398438, -0.03005368635058403, -0.45704859495162964, -1.0095270872116089, 0.1548389196395874, -0.6759271621704102, 0.5131217837333679, -0.4951808452606201, 0.9004204869270325, 0.20292802155017853, -0.0065720826387405396, -0.2616662383079529, 0.565009593963623, 0.9109240770339966, 0.8961747884750366, -0.9149503111839294, 0.727786660194397, -0.6784716248512268, 0.11514094471931458, -0.3324335515499115, 0.7037326097488403, -0.2100067138671875, 0.20748862624168396, 1.177032232284546, -0.1300824135541916, -0.8549284934997559, -0.4467534124851227, 0.7067843675613403, -0.18626266717910767, 1.1498661041259766, -0.6011277437210083, -0.15351270139217377, -0.0939939096570015, -0.9570096731185913, 0.7699583768844604, -0.09002181142568588, 0.43298301100730896, -1.2895690202713013, 0.4212496280670166, -1.2045395374298096, 0.42119282484054565, -0.3600660562515259, 0.7009094953536987, 0.7863699793815613, -1.2690882682800293, -0.3533526062965393, 1.220593810081482, -0.6831021308898926, -0.5108804106712341, -0.653575599193573, -0.6724406480789185, 0.7737544775009155, -1.2075014114379883, -0.24853745102882385, -0.8264867663383484, -0.40570586919784546, 0.8130897283554077, -0.4595639109611511, -0.04938342422246933, -0.2163679301738739, -0.06800027191638947, 0.04468531534075737, 0.04798003286123276, 0.13670574128627777, -0.8115519285202026, 0.7806268334388733, -0.10916244983673096, 0.7169724106788635, 0.23681484162807465, -0.05742117762565613, 1.404226541519165, -0.13594362139701843, -0.6884493827819824, -0.036880012601614, -0.5498307943344116, -0.002603791654109955, -0.5645620822906494, -0.3378542363643646, -0.20868290960788727, -0.1493992805480957, -0.2502604126930237, -0.5260038375854492, 0.135391503572464, 0.5122619867324829, -0.16606953740119934, -0.7012200951576233, -0.6575283408164978, 0.18257871270179749, -0.3792401850223541, -0.38649165630340576, -0.20190484821796417, -0.8013468980789185, -0.2533327341079712, 0.2626693546772003, 0.22810956835746765, 0.9502947926521301, 0.09647597372531891, 0.26473116874694824, 1.0996615886688232, -0.23366621136665344, 0.09756483137607574, 0.9909477829933167, 1.0239229202270508, 0.7417843341827393, 0.24652475118637085, 0.29967954754829407, -0.04347379505634308, -0.4095378816127777, -0.15719804167747498, 1.137360692024231, 0.15171772241592407, -0.3308245837688446, 0.3337450623512268, 0.5508968830108643, -0.09637370705604553, -0.30232179164886475, -1.066589593887329, -0.5622161626815796, -0.11157495528459549, 0.4704560935497284, 0.7955670952796936, 0.029889076948165894, 0.8206242322921753, -0.37809327244758606, -0.7445560097694397, -0.2587707042694092, -1.2812374830245972, 0.21759143471717834, 0.9240447282791138, -0.09521415084600449, 1.0311853885650635, -0.0532299242913723, 0.5900132656097412, 1.08256196975708, 0.38564395904541016, -0.19625557959079742, 0.30103597044944763, -0.2893449068069458, 0.10192438215017319, 1.4299057722091675, -0.21491199731826782, -0.6865154504776001, 0.14895644783973694, 0.6351121664047241, -0.7002210021018982, -0.4019045829772949, 0.29939040541648865, 0.3927646577358246, -0.33974987268447876, 0.043601490557193756, 1.3297313451766968, -0.3100025951862335, -0.9700008630752563, 0.7952008843421936, -1.1298271417617798, -0.22462964057922363, 0.4955398440361023, 0.0635073259472847, -0.16577094793319702, -1.1404622793197632, 0.07736559212207794, 0.9538425207138062, 0.64435875415802, 0.5176752805709839, 0.2957990765571594, -0.6044101715087891, 0.4676327109336853, -0.008378766477108002, 0.180902361869812, -0.2860906422138214, 0.35691118240356445, -0.0411888062953949, -1.3505609035491943, 0.6165907382965088, -1.0320446491241455, 0.7621992826461792, 0.6565648913383484, 0.559606671333313, 0.162617489695549, -0.723578929901123, 0.562693178653717, -1.2655287981033325, -0.8016215562820435, -0.9226741790771484, 0.1701647788286209, 1.0156906843185425, -0.4967866837978363, 0.45994624495506287, -0.07194481790065765, 0.01331397145986557, 1.0366572141647339, 0.6101021766662598, 0.22286459803581238, -1.0795477628707886, -0.2605809271335602, 0.12139593809843063, 0.43755191564559937, 0.18044161796569824, -0.09675142914056778, 0.8675013184547424, 0.7073383331298828, -0.5209842324256897, 0.040969811379909515, -0.39437270164489746, -0.10484175384044647, -0.505709171295166, -0.7223047018051147, -0.2575215697288513, 0.7065327763557434, 0.5602815747261047, -0.5296497941017151, 0.7693650722503662, -0.20309852063655853, 0.08149147033691406, 0.3143310546875, 0.1497911661863327, 0.9940659403800964, 0.44105857610702515, -0.16496603190898895, 0.619780957698822, 1.0370750427246094, 0.21412958204746246, 0.28780806064605713, -0.40380024909973145, 0.7966194152832031, 0.9026482105255127, 0.21565142273902893, 0.11297065019607544, 0.40059077739715576, 0.7357637286186218, -0.13092386722564697, -0.3782470226287842, -0.2181999832391739, 0.5800766348838806, 0.3398677706718445, -0.25405704975128174, -0.5902538299560547, -0.41580474376678467, -0.5900015830993652, 0.5722324252128601, 0.9061732292175293, -0.4418773353099823, -0.09104032069444656, 0.19733066856861115, 0.0419386625289917, -0.17786623537540436, 0.23775064945220947, 0.11625288426876068, 0.12417677044868469, 0.10937325656414032, 0.13822507858276367, -0.5777437090873718, -0.029747214168310165, 0.5120569467544556, 0.6647028923034668, -0.8458112478256226, 0.3677825927734375, 0.13386379182338715, 0.6369266510009766, 0.46609237790107727, -0.9348141551017761, -0.7454233765602112, 0.8629612922668457, -0.4362354874610901, 0.3291650414466858, -0.15935280919075012, -0.6218646764755249, -1.226000189781189, 1.2284965515136719, -0.9448311924934387, 0.7650784254074097, 0.41577082872390747, -0.3157031238079071, -0.6992136240005493, 0.8038126230239868, 0.3398757576942444, 0.7389646768569946, 0.13751909136772156, -0.49561789631843567, -0.48481833934783936, 0.7604786157608032, 0.46151095628738403, 0.4646102786064148, 0.23363801836967468, -0.04918143153190613, 0.1436225175857544, 0.5345910787582397, 0.23981699347496033, 0.3671457767486572, -1.4674992561340332, -0.20851898193359375, 1.007408857345581, 0.586146354675293, -0.16194085776805878, -0.41711652278900146, 0.2830972671508789, 0.03452435880899429, 0.5009124875068665, -0.050454579293727875, 0.2657380700111389, 0.04082411527633667, -0.8266512155532837, -0.11426705121994019, -0.19629275798797607, 0.3353439271450043, 1.0912928581237793, 0.41317981481552124, -0.057537991553545, 0.018282439559698105, 0.8086460828781128, 0.2349359095096588, 0.33856201171875, 0.7708489894866943, 0.11710725724697113, 1.0487134456634521, -1.7129638195037842, -0.6468877792358398, 0.03809991106390953, -0.12340337038040161, 0.3497042953968048, 0.18434149026870728, 0.17502827942371368, -0.5142651200294495, 0.5586115121841431, -0.1909063309431076, 0.12713845074176788, 0.30748599767684937, -1.0958220958709717, 0.5358731746673584, 0.5982384085655212, -1.087188720703125, 0.007640551775693893, 0.6643636226654053, -0.7354787588119507, 0.31237202882766724, 0.3489043712615967, 1.218184471130371, -0.184441477060318, 0.6972527503967285, 1.0891848802566528, -0.12157014012336731, 0.1382385492324829, -1.2430129051208496, -0.3894460201263428, -0.4797743558883667, 0.8827337622642517, 0.7039383053779602, -0.4947745203971863, 0.14442697167396545, -0.1909363567829132, 0.8382564783096313, -0.11454562842845917, -0.01299990899860859, 0.07545845955610275, 0.41325756907463074, -0.47808557748794556, -0.505809485912323, 0.25543010234832764, 0.10880693048238754, 0.35125255584716797, -0.6420424580574036, 0.29750046133995056, -0.403712660074234, -0.02188672125339508, 0.1962895542383194, 0.27549052238464355, 0.44509774446487427, -1.3624063730239868, -0.8904587030410767, -0.43399596214294434, -0.3017228841781616, 0.398780882358551, 1.1297630071640015, -0.08014747500419617, 0.9327523708343506, -0.4197496473789215, 0.7426208257675171, -0.4747101068496704, -1.256407380104065, -0.08546119928359985, -0.049478475004434586, -0.26109087467193604, 0.1877433955669403, -0.6159111857414246, -1.0577213764190674, 0.27292096614837646, -0.2386307418346405, -0.46566203236579895, 0.9576845169067383, -0.5563220381736755, -0.3992874026298523, 0.2923163175582886, -0.47535502910614014, -0.11956705898046494, 0.2531554102897644, -0.31581324338912964, -0.6730349659919739, 0.04279644787311554, 0.12066499143838882, -0.39077040553092957, 0.2330634593963623, -0.0024949759244918823, 0.016763199120759964, 0.22487322986125946, 0.8485605120658875, -1.550452709197998, 0.4227583110332489, 0.04840828850865364, -0.04000863432884216, -1.8231046199798584, 0.9664342403411865, -0.45123928785324097, -0.4889744818210602, -1.1679192781448364, -0.1048414334654808, 0.33787500858306885, -0.4875200688838959, -0.7941072583198547, -0.5320401191711426, -0.31292253732681274, 0.2926684617996216, 0.32786664366722107, 0.5075203776359558, 0.13896052539348602, 0.026170454919338226, 0.3148499131202698, 0.46531379222869873, 0.6433054804801941, -0.09314706176519394, 0.609552264213562, 0.17395834624767303, -0.9866440296173096, 0.22470852732658386, -0.30753690004348755, -0.2033844292163849, 0.4649350643157959, -0.5528205633163452, 0.024308601394295692, -1.447758674621582, -0.2802432179450989, 0.10225769877433777, -0.11950688064098358, -0.15257738530635834, 0.9315884113311768, 0.2866414785385132, -0.417793869972229, -0.002072371542453766, -1.1336476802825928, 0.22814571857452393, -0.4493247866630554, -0.573094367980957, 0.16002443432807922, 0.19548407196998596, -0.22585877776145935, -0.007986538112163544, 1.2801071405410767, -0.5313353538513184, -1.2117122411727905, -0.14147281646728516, -0.30171072483062744, 0.3364510238170624, -0.6920040845870972, 1.3325152397155762, -1.2473678588867188, -0.2179638147354126, 1.1233030557632446, 0.27568385004997253, -0.11700917780399323, -0.24153506755828857, -0.614145040512085, -0.18639996647834778, -0.3470233082771301, -0.2333962470293045, -0.6653951406478882, 0.6866799592971802, -1.1268014907836914, 0.6336126327514648, 0.6441822648048401, -0.5701802968978882, -0.26341161131858826, -0.33290916681289673, -0.9271018505096436, 1.3617967367172241, -0.010116837918758392, 0.23487116396427155, 0.2907414436340332, -0.8752389550209045, -0.4304167628288269, -0.2707597613334656, 0.6996137499809265, -0.14191263914108276, 1.213846206665039, -1.6976306438446045, -1.1022206544876099, -0.8793621063232422, 0.5832021832466125, 0.38227760791778564, 0.8678984642028809, 0.06869953870773315, 0.6482658386230469, 0.3528739809989929, 0.26514631509780884, 0.42152416706085205, 0.29959291219711304, -0.17004179954528809, -0.5948485136032104, 0.6106398105621338, 0.4794982969760895, 1.1254991292953491, 0.3148253858089447, 1.9305773973464966, 0.8354552984237671, 1.0734398365020752, 0.18599840998649597, 0.6129452586174011, -0.8244408369064331, 0.6381750702857971, -1.4720492362976074, -1.7487857341766357, -0.004091963171958923, 0.003023682162165642, -0.3720701336860657, -0.37144148349761963, -0.093947634100914, 0.8743011951446533, -0.5278282165527344, 0.1190146952867508, -0.20308971405029297, -0.9126530885696411, -0.1379275619983673, 0.6432744264602661, 0.23318587243556976, 0.9580819010734558, 0.18420258164405823, 0.7587279081344604, 0.17646527290344238, 0.4649670124053955, 0.7429310083389282, 0.0968361496925354, -0.06121128425002098, 0.618323802947998, 0.26345914602279663, 0.2516338527202606, -0.946313738822937, 0.2588569223880768, -0.5205245018005371, 0.12192428112030029, 0.021826088428497314, -0.09904685616493225, -0.8003668785095215, -0.31099724769592285, -0.5439832806587219, 0.31691548228263855, 0.04504179209470749, -0.10163448750972748, 0.1430508941411972, -0.015265190973877907, -1.7757623195648193, 0.17571154236793518, 0.13457024097442627, -0.8742285966873169, 0.25961995124816895, 0.7065579295158386, -0.16842655837535858, 0.25787997245788574, -0.25423818826675415, -0.2426111400127411, -0.4549652338027954, -1.1053496599197388, -0.7063617706298828, -0.40683871507644653, -0.3199635148048401, -0.7220079898834229, 0.2378765046596527, 0.46334928274154663, -0.02233187109231949, -0.30868053436279297, -1.1255512237548828, -0.08719976246356964, -0.7011789083480835, 0.7420276403427124, -0.070609912276268, -1.5812163352966309, -0.5058387517929077, -0.28769201040267944, 0.12112681567668915, 0.07696668803691864, -0.3803206980228424, -0.22373074293136597, -0.5511198043823242, -0.5620496273040771, -0.58194899559021, -0.43673375248908997, 0.8186760544776917, -1.4301955699920654, -0.026087313890457153, -0.17794588208198547, 0.35741081833839417, -0.7936021089553833, -0.04754823446273804, -1.1599549055099487, -0.019921157509088516, -0.535812258720398, 0.8327950835227966, -0.4054316580295563, -0.14365501701831818, -0.4003469944000244, 0.48368197679519653, 0.3146889805793762, 0.11494981497526169, -0.6022914052009583, -0.4666517972946167, -1.1002860069274902, -0.1745452731847763, -0.005485376343131065, -0.2310464233160019, 0.16848918795585632, 0.4537340998649597, 2.2331044673919678, 0.5358872413635254, 0.4862646460533142, -0.23723602294921875, 0.7990573644638062, -0.159815713763237, -0.5202314257621765, -0.8280589580535889, -0.48926758766174316, -0.48083335161209106]"
sc-copilot/NEW_CLAIM/new_claim_fees_test.py,def test_new_claim_fees_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.3940737247467041, 0.41080254316329956, -3.405972480773926, -0.651942789554596, 0.9285497665405273, -0.6441344618797302, 0.6580544710159302, -0.5317273139953613, 0.20970265567302704, -0.4718889892101288, -0.36215728521347046, 1.1772027015686035, 1.0190378427505493, 1.0812711715698242, -0.9302983283996582, -1.004360556602478, 0.4463311433792114, -0.5968532562255859, -0.1801343858242035, -0.2722482681274414, 0.5737559199333191, 0.0890471562743187, -1.4205043315887451, -0.8399524092674255, 1.1156389713287354, -0.3976318836212158, 0.12960821390151978, 0.9565302133560181, -0.35149022936820984, 0.39184004068374634, 0.7599786520004272, -0.028975259512662888, 1.1560754776000977, -1.4348440170288086, -0.7827142477035522, -0.37125563621520996, 0.5059677362442017, 0.3541213870048523, -0.5714556574821472, -0.4131537079811096, -0.11848436295986176, 0.19132429361343384, -0.03583948314189911, 0.12510739266872406, 1.263961672782898, -0.6176853179931641, 1.1811782121658325, 2.010737419128418, 0.09876610338687897, -0.2795250415802002, 0.7535878419876099, -0.48966383934020996, 0.44747763872146606, -0.14156661927700043, 1.055693507194519, 0.12604910135269165, -0.9721107482910156, 1.1874561309814453, -0.20704184472560883, -0.9767163991928101, 1.140905737876892, 1.34415864944458, -0.1558181643486023, 0.5255682468414307, -0.09753836691379547, 0.21828007698059082, -0.38715603947639465, 0.13280636072158813, 0.13185811042785645, 0.6182964444160461, 0.452241986989975, 0.5214331746101379, 0.2721710801124573, -1.0225127935409546, 0.10145194828510284, -0.1689358651638031, -0.17238880693912506, -0.10606870800256729, -0.6071411371231079, 0.1765666902065277, -0.21758505702018738, -0.1521790623664856, 0.501285970211029, 0.5415157675743103, 0.8883022665977478, -0.6450493335723877, 0.4316449761390686, -0.6000030636787415, -0.3962918221950531, 2.4404382705688477, -0.14373716711997986, -0.766197681427002, -0.7551193237304688, 1.1046733856201172, -0.8083496689796448, -0.40749678015708923, -0.40299972891807556, 0.3412539064884186, -0.4641999900341034, -0.39884352684020996, 0.19213321805000305, 0.019834168255329132, 0.5475812554359436, -0.8948049545288086, -0.7969824075698853, 0.02240898087620735, -0.5177105665206909, 0.3599512279033661, -0.016306303441524506, -0.8875778317451477, -0.5233384370803833, 1.2402349710464478, -0.3370094895362854, 0.17000004649162292, -0.5247074365615845, -0.13379217684268951, 1.2776594161987305, -0.565858006477356, -0.8370000720024109, 0.20307908952236176, -1.1793848276138306, -0.24038127064704895, 0.5291765928268433, 1.9628784656524658, -0.615687370300293, 1.4265018701553345, -1.4344524145126343, 0.7096489667892456, 0.9804924726486206, -0.8037997484207153, 0.08386361598968506, 0.08202608674764633, -1.221463680267334, 0.15147536993026733, -0.42226871848106384, -0.5156506896018982, 0.7101033329963684, -0.21230560541152954, -0.423641562461853, 0.17955142259597778, -0.3672482967376709, -0.04021653160452843, -0.4053284525871277, 0.43870508670806885, 0.5230140686035156, -0.6196447014808655, 0.6167598366737366, -1.2253307104110718, -0.2509779930114746, -0.3150423765182495, 0.5577976107597351, 0.37699222564697266, 0.6363742351531982, 0.5183485150337219, -0.14159777760505676, -0.11411536484956741, 0.43459558486938477, -0.5429229736328125, 0.47179868817329407, 0.6738300323486328, 0.05145076662302017, -0.5762338638305664, -0.45698636770248413, 0.2747413218021393, -0.8766194581985474, -0.850451648235321, -0.44819507002830505, 1.52677583694458, 0.12611450254917145, -0.5608054995536804, -0.7566282749176025, -0.7314050197601318, -0.2685207724571228, -0.7292562127113342, 0.41047102212905884, 0.3272162675857544, 0.029977887868881226, -0.26305049657821655, 1.1130443811416626, -0.2585313022136688, 0.028872113674879074, -0.2446640133857727, 0.5008029937744141, 1.3557713031768799, -0.67759770154953, -0.5631338357925415, 0.4814671277999878, -1.0078123807907104, -0.13630053400993347, -1.2419382333755493, 0.584962010383606, 0.0703752264380455, -0.9259942770004272, -0.6020509600639343, -0.7036298513412476, -0.9815929532051086, -0.1959088146686554, 0.6137903332710266, 0.48196399211883545, -0.5506900548934937, -0.25958549976348877, 0.025431828573346138, -0.2447873055934906, -0.0692586749792099, -0.5276065468788147, 0.005392648279666901, -0.6797437071800232, -0.707028865814209, -0.10489501059055328, -0.27413609623908997, 2.00419020652771, -0.19331276416778564, -0.9170935153961182, 0.45431119203567505, 1.0144448280334473, -0.0012205541133880615, -0.30129149556159973, -0.7163118124008179, -0.12105704843997955, -0.008711010217666626, 0.7301711440086365, -0.7723023295402527, 0.27164462208747864, -0.20480990409851074, 0.7905341386795044, -0.29262155294418335, -0.2800341546535492, 0.49837300181388855, -0.755060076713562, -0.4382103681564331, 0.16231589019298553, -1.7230991125106812, -0.27772843837738037, -0.14727313816547394, 0.6631682515144348, 1.1673091650009155, 0.2641263008117676, 0.6369073390960693, 1.208919882774353, -0.35338494181632996, -0.3243776559829712, 1.111920714378357, 0.188012957572937, 0.30154457688331604, -0.2561926245689392, -0.21248891949653625, -0.7550979852676392, -0.41962456703186035, 0.007811024785041809, 1.1428266763687134, -0.3494497835636139, 0.6495926380157471, -0.06685377657413483, 0.8359695672988892, 0.6749763488769531, 0.6574726700782776, -0.4281928241252899, -1.1775362491607666, 0.02818721905350685, 0.3705821633338928, -0.3610089421272278, -0.1054985374212265, 1.6471645832061768, -0.9353415369987488, -1.2774544954299927, -1.4001481533050537, -1.0081045627593994, -0.009925052523612976, 0.2805411219596863, -0.4590478539466858, -0.24339188635349274, 0.0656035840511322, 0.9750566482543945, 0.868922233581543, 1.1736032962799072, -1.216662883758545, 0.20065736770629883, 0.3164064288139343, -0.28516608476638794, 0.9560229182243347, -0.2463516891002655, -0.4483453929424286, 0.011601765640079975, 0.2896321415901184, 0.6086127758026123, 0.13584652543067932, -0.00904814898967743, -0.134347066283226, 0.20985105633735657, 0.18019455671310425, 1.102378010749817, -0.2584478259086609, -0.5878883004188538, 0.998108446598053, -0.44368600845336914, -0.5100319385528564, 0.8313246965408325, 0.3467627763748169, -0.6030237674713135, -0.9009191989898682, 0.03895924985408783, 0.8308604955673218, 0.6855887174606323, 1.0530308485031128, 0.4133124351501465, 0.02695254236459732, 0.5902103185653687, -0.6177975535392761, 0.3772338628768921, -0.060421548783779144, 0.15935343503952026, 0.26417848467826843, -1.209563970565796, -0.07295642793178558, -1.128610610961914, 0.47763216495513916, 0.8259709477424622, 0.32926589250564575, 0.28707247972488403, -0.479927122592926, 0.3323233127593994, -0.7969286441802979, 0.02876695990562439, -1.3401648998260498, -0.2406790554523468, 0.5467309951782227, -0.7053289413452148, 0.4880692660808563, 0.09054866433143616, -0.3416021764278412, 1.0574467182159424, 1.1150462627410889, 0.23418299853801727, -1.2081516981124878, 0.1759803593158722, -0.5896059274673462, 0.21068787574768066, 0.5395504832267761, -0.46682822704315186, 1.4451372623443604, 0.4423043429851532, -0.5901892185211182, 0.4116150736808777, -1.8052316904067993, -0.45704999566078186, -0.7729543447494507, -0.1628059595823288, 0.5301070213317871, 0.40977826714515686, 0.04456081613898277, -0.5546294450759888, 0.2010316550731659, -0.3261367082595825, -0.2594367563724518, 0.6465219259262085, 0.1543264091014862, 0.613394558429718, 0.23001867532730103, 0.4318690299987793, 0.12742698192596436, 0.49100884795188904, -0.07500181347131729, 0.024390915408730507, -0.3533281683921814, 0.45660609006881714, 0.41936415433883667, 0.01888723112642765, 0.6159884929656982, 0.1635715514421463, 0.6131261587142944, -0.8962434530258179, 0.22453069686889648, 0.5029191970825195, 0.9557936191558838, 1.355409026145935, 0.3064936399459839, -0.8914860486984253, 0.9130034446716309, -0.1722196489572525, 0.7754052877426147, 1.1361342668533325, -1.1439235210418701, 0.01797541044652462, -0.517993688583374, -0.15111950039863586, 0.2493998259305954, 0.39730191230773926, -0.01870734989643097, -0.003614477813243866, 0.44912591576576233, 0.21630820631980896, -0.030007708817720413, 0.2934068441390991, 0.5839436054229736, 0.3304610848426819, -0.667599081993103, 1.0624535083770752, 0.4154064357280731, 0.13720740377902985, 0.03272084891796112, -0.09526467323303223, -0.7072754502296448, 0.7616246342658997, -0.6452169418334961, -0.3460804224014282, -0.18635150790214539, -1.1672145128250122, -1.2963707447052002, 0.22144180536270142, 0.0934709906578064, -0.4171382188796997, -0.18702886998653412, -0.08189938962459564, -0.7692665457725525, 0.3993074893951416, -0.42745327949523926, 0.91911780834198, 0.5835533142089844, -0.6486032009124756, 0.6726222038269043, 0.34876111149787903, -0.08210116624832153, 0.010118760168552399, 0.2690781056880951, -0.7727195620536804, -0.26575636863708496, 0.7459719181060791, 1.003642201423645, 0.6645408868789673, -1.7060840129852295, -0.3838614225387573, 0.622391939163208, 0.13952691853046417, -0.21134155988693237, -0.5699629783630371, 0.1514265537261963, 0.07568591833114624, 0.953585147857666, 0.043241679668426514, 0.23079697787761688, -0.24264687299728394, -1.2165573835372925, -0.45457375049591064, -0.8636210560798645, 0.7243280410766602, 1.6405572891235352, 1.1835330724716187, -0.39211368560791016, -0.48446980118751526, 0.49049341678619385, -0.26280003786087036, 0.557008683681488, 0.37817496061325073, 0.6615206003189087, 0.7730115652084351, -1.4504294395446777, 0.35710668563842773, 0.1886245757341385, 0.36116471886634827, 0.7283295392990112, -0.4362909197807312, 0.695555567741394, -0.7692604660987854, 0.6164940595626831, -0.08001992851495743, 0.41483229398727417, 0.7759778499603271, -0.07033910602331161, 0.1413394808769226, 0.5839326977729797, -0.34049898386001587, -0.35773608088493347, 0.4267764091491699, -0.5979539155960083, -0.09304534643888474, 0.03653688728809357, 1.0644843578338623, 0.782958984375, 0.5148736238479614, 0.9145830273628235, -0.41253167390823364, -0.6518939733505249, -1.2898579835891724, -0.343380331993103, 0.04324064403772354, 1.2973802089691162, 0.8702839612960815, -1.0090429782867432, -0.19179503619670868, -0.7651412487030029, 0.4425996243953705, 0.05904695391654968, 0.19961057603359222, 0.4358140230178833, 0.25556790828704834, 0.043939009308815, 0.19062091410160065, 0.8493703603744507, 0.09087538719177246, 0.3158901333808899, -0.4535065293312073, 0.9305052757263184, -0.01517140120267868, -1.000246524810791, 0.25125566124916077, 0.13046663999557495, 0.7053045034408569, -0.779953122138977, -1.1706252098083496, -0.26887571811676025, -0.49275434017181396, 0.5028199553489685, 1.0903713703155518, -0.03935801982879639, 1.1820833683013916, -0.006092548370361328, 0.3868379592895508, -1.1643126010894775, -1.2720839977264404, -0.20939227938652039, 0.08161087334156036, -0.14088043570518494, 0.320247620344162, 0.2440682053565979, -1.0071890354156494, 0.06933891773223877, -0.3636014461517334, -0.50589519739151, 0.4646773338317871, -0.27771490812301636, -0.42922475934028625, 0.5411107540130615, -0.9993889927864075, -0.06210777163505554, 0.02998175472021103, -0.7926954030990601, -0.5504838228225708, -0.5900217294692993, 0.05774775147438049, 0.16673541069030762, -0.12152773141860962, 0.29665571451187134, 0.42892223596572876, 0.17272412776947021, 0.4329862594604492, -1.470970630645752, -0.5364481210708618, -0.4792821407318115, -0.13007552921772003, -1.9088913202285767, 0.1989910900592804, -0.03467530012130737, -1.0779070854187012, -0.7784736752510071, -0.05340210348367691, 0.6102025508880615, 0.06934590637683868, -0.5732534527778625, -0.8526054620742798, -0.8789247870445251, 0.9785608053207397, 0.26670411229133606, -0.027334999293088913, 0.47169917821884155, 0.20574083924293518, 0.032286182045936584, -0.08776192367076874, 0.10907447338104248, 0.4097042977809906, 0.4655786156654358, 0.17783407866954803, -0.34035223722457886, 0.8866937756538391, -1.2037550210952759, -0.5092222094535828, 0.0991411805152893, 0.782160758972168, -0.5292650461196899, 0.15110665559768677, -1.0221257209777832, 0.7763516902923584, -0.059009332209825516, 0.5832616686820984, 1.2096954584121704, 0.2822636365890503, 0.1542077362537384, 0.15749195218086243, -0.281560480594635, -0.2892499268054962, 0.11150751262903214, -1.2103443145751953, -0.3569502830505371, 1.059019684791565, -0.6339914798736572, 0.0022672228515148163, 0.6278781890869141, -0.6394823789596558, -0.885452926158905, -0.30810946226119995, 0.11499911546707153, 0.21243920922279358, -0.47626397013664246, 1.2217257022857666, -1.6619902849197388, 0.4839761257171631, 1.612566351890564, 0.08701799809932709, 1.237131953239441, -0.14989762008190155, 0.19361568987369537, 0.8880312442779541, 0.2262176126241684, -0.2689177095890045, 0.14374104142189026, 0.3723479211330414, -0.413757860660553, 1.0925681591033936, -0.4596499800682068, 0.17256610095500946, -0.21544665098190308, -0.21840286254882812, -0.25443124771118164, 0.8613787889480591, 0.48912668228149414, 0.5364987254142761, 0.40871286392211914, -1.0882198810577393, -0.5387128591537476, 0.7207152843475342, 1.0782406330108643, -0.7606831789016724, 0.8839656710624695, -2.2727465629577637, -1.0747292041778564, -1.4117283821105957, 1.1252506971359253, -0.25455281138420105, 0.4150621294975281, 0.201703280210495, 0.38415735960006714, 0.43942320346832275, 0.5128564834594727, 0.7443147897720337, -0.5891298055648804, 0.5675073862075806, -0.724900484085083, 1.250044822692871, 0.5621232986450195, 1.753559947013855, -0.2988725006580353, 1.6232030391693115, 1.4828951358795166, 0.5329340696334839, 0.11374465376138687, 0.47486016154289246, -0.6042739152908325, 0.17906469106674194, -0.427651971578598, -0.8016667366027832, -0.21706844866275787, -0.01846262812614441, -0.06652626395225525, -0.7527632713317871, 0.21544376015663147, 1.4444506168365479, 0.08890105783939362, 0.37209147214889526, -0.05117124319076538, -0.3670573830604553, -1.0861246585845947, 1.076216459274292, 0.6520109176635742, 0.34535324573516846, 0.6230842471122742, 0.6798527240753174, 0.43813878297805786, 0.2601364850997925, 1.2994599342346191, -0.7471185326576233, -0.7122173309326172, -0.6100987195968628, 0.3142105042934418, 0.9122256636619568, -0.08765708655118942, 0.15286090970039368, -0.7770300507545471, -0.11341776698827744, -0.04153333976864815, 0.07031041383743286, -0.8501876592636108, 0.055324867367744446, 0.2188357412815094, 0.2634986340999603, -0.47713354229927063, 0.6034994721412659, -0.0436018705368042, 0.8389305472373962, -0.8137155771255493, 0.21217678487300873, -0.08242005109786987, -0.0691048800945282, 1.7622716426849365, -0.24094146490097046, 0.3966245651245117, 0.26331907510757446, -0.6855928301811218, -0.21454493701457977, -0.6861023902893066, -1.162953495979309, -1.118596076965332, 0.2880745530128479, 0.8966549634933472, -0.02402343600988388, 0.617640495300293, -0.265558660030365, 0.24463534355163574, -0.7190130949020386, -1.3054704666137695, -0.6622525453567505, -1.0250308513641357, 0.7263984680175781, -0.15519502758979797, -0.6418505907058716, -0.1589919924736023, -0.4271237254142761, -0.1343049705028534, 0.3281947076320648, 0.06187903881072998, 0.31725484132766724, -0.9065364599227905, 0.19771698117256165, -0.9593266248703003, -0.5583017468452454, 0.5243661403656006, -0.892137348651886, 0.5157842636108398, -0.10288494825363159, -0.05038836598396301, -0.9916315078735352, -0.9176706671714783, -1.319169044494629, 0.6807247400283813, 0.25218406319618225, -0.06032884865999222, -0.35695764422416687, -0.33917519450187683, -0.6290924549102783, 0.262982577085495, 0.3904181122779846, -0.693362295627594, -0.5500112175941467, -1.1881163120269775, -1.117093563079834, 0.001659587025642395, 0.20353242754936218, 0.7653856873512268, -0.5669053792953491, 0.5824258327484131, 2.6442880630493164, -0.08460347354412079, 0.4219677448272705, -0.8445366621017456, -0.012583967298269272, -0.3065015971660614, 0.20875978469848633, -0.8367016315460205, 0.10119222104549408, -0.9990257620811462]"
sc-copilot/NEW_CLAIM/new_claim_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef new_claim_post_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.8063826560974121, 0.09558525681495667, -3.490597724914551, -0.702647864818573, 2.004074811935425, -0.22901898622512817, 0.9194626212120056, 0.07203729450702667, 0.04804237186908722, -0.946131706237793, -0.5984728932380676, 0.06331895291805267, 1.1885297298431396, 1.0494476556777954, -0.11632078886032104, -0.127640962600708, 0.08983403444290161, -1.045576572418213, -0.22886914014816284, 0.778102457523346, 0.6172000169754028, -0.23141777515411377, -0.9397109746932983, -0.9720398783683777, 1.2105045318603516, 0.8171976208686829, 0.27635782957077026, -0.13409145176410675, -0.3044496178627014, 0.5931192636489868, 0.23211508989334106, 0.12849165499210358, 0.20761893689632416, -0.741727352142334, 0.22014866769313812, -0.6283993721008301, 0.15456166863441467, -0.4586521089076996, -0.27191832661628723, -1.450559139251709, 0.3701055347919464, 0.3450891971588135, 0.5033407807350159, 0.514382004737854, 0.10042527318000793, -0.23368538916110992, 1.3648045063018799, 0.27578943967819214, -0.19327659904956818, -1.4076749086380005, 0.06600166857242584, -0.4468265473842621, 0.2109953761100769, -0.38622143864631653, 1.3482013940811157, 0.6732423305511475, 0.02483218163251877, 1.2621173858642578, -0.654186487197876, -0.8431379795074463, 1.8381783962249756, 0.9936491250991821, -0.32957637310028076, 0.8317207098007202, 0.2254088670015335, 0.3600231409072876, -0.6971620321273804, 0.37025463581085205, -0.3976490795612335, -0.4187944829463959, -0.07232321053743362, 0.6181679964065552, -0.1251121163368225, 0.08285032957792282, -0.07531969249248505, 0.7018623352050781, -0.8015608191490173, -1.9737952947616577, -0.17396827042102814, 0.9945181608200073, -0.08964261412620544, 0.1738826036453247, 1.5040587186813354, -0.40696799755096436, 0.7085144519805908, -0.2862416207790375, -0.002431720495223999, 0.09527222812175751, -0.09504317492246628, 1.1714149713516235, 0.13026942312717438, -0.7425071597099304, 0.16199609637260437, 0.12423226982355118, -0.36283695697784424, -0.36195123195648193, -0.23008325695991516, -0.14794787764549255, -0.5319235324859619, -0.4247332513332367, -0.18101394176483154, 0.49658501148223877, 0.5019218921661377, -0.1330212652683258, -0.5452239513397217, 0.3664264380931854, 1.2370737791061401, 0.6672830581665039, -0.41830867528915405, -1.3584880828857422, -0.2279808223247528, 0.8571012020111084, 0.25037986040115356, -0.10626062005758286, -0.24744412302970886, -0.4094269871711731, 1.8790830373764038, -0.6444916129112244, -0.8650733828544617, 0.8135544061660767, -0.8141958713531494, -0.5071763396263123, 1.5588657855987549, 1.567516803741455, -0.4162788689136505, -0.3284386098384857, 0.030197668820619583, 0.3489018380641937, 0.16585950553417206, -0.971115231513977, 0.5925339460372925, 0.040433645248413086, -1.0081757307052612, 0.7719314098358154, 0.2591654658317566, 0.22107872366905212, 0.23335210978984833, -0.2886028289794922, 0.056974828243255615, 0.6381386518478394, 0.736121654510498, 0.02472546324133873, -0.35668814182281494, -0.9603323340415955, 0.18710194528102875, -0.6980395317077637, 0.397899329662323, -0.5039834380149841, 0.920381486415863, 0.08694426715373993, -0.0293881818652153, -0.31839287281036377, 0.6362011432647705, 0.7642207145690918, 0.8577828407287598, -0.9598026275634766, 0.7324424982070923, -0.6265994906425476, 0.177298441529274, -0.27790454030036926, 0.8451360464096069, -0.19853928685188293, 0.0353323295712471, 1.1971728801727295, -0.054430827498435974, -0.9189432263374329, -0.389828085899353, 0.5200260877609253, -0.1565200388431549, 1.1823464632034302, -0.670350968837738, -0.2960958480834961, -0.05051492154598236, -0.9952802658081055, 0.7157083749771118, -0.1886497437953949, 0.4117090106010437, -1.3318586349487305, 0.41598254442214966, -1.1779305934906006, 0.42005762457847595, -0.50180584192276, 0.7518582344055176, 0.6758824586868286, -1.1583375930786133, -0.2106853723526001, 1.2920340299606323, -0.7971485257148743, -0.7453286647796631, -0.5389724969863892, -0.5312075614929199, 0.7065731287002563, -1.1623225212097168, -0.08854839950799942, -0.9885643720626831, -0.29057833552360535, 0.8253462314605713, -0.6301007270812988, -0.002954777330160141, -0.12184537947177887, -0.0975341647863388, 0.12132597714662552, 0.017006704583764076, 0.14959244430065155, -0.770480751991272, 0.6889938116073608, -0.1437145322561264, 0.8429498672485352, 0.20350247621536255, 0.08613738417625427, 1.305492877960205, -0.19368158280849457, -0.7431684732437134, 0.05352991819381714, -0.8016383051872253, -0.17757228016853333, -0.49898940324783325, -0.31358802318573, -0.27223071455955505, -0.156889870762825, 0.07034951448440552, -0.4582695960998535, 0.1723632514476776, 0.49756115674972534, -0.19266846776008606, -0.616124153137207, -0.7159370183944702, 0.28510454297065735, -0.2457272708415985, -0.32492607831954956, -0.06745785474777222, -0.7877257466316223, -0.2729555666446686, 0.22807586193084717, 0.3349137604236603, 1.014533519744873, 0.19749042391777039, 0.32569894194602966, 1.2412769794464111, -0.23441018164157867, 0.12831023335456848, 0.8921260833740234, 1.151034951210022, 0.5985292792320251, 0.2692581117153168, 0.4814225435256958, -0.25655919313430786, -0.31063640117645264, -0.16768692433834076, 1.0340263843536377, 0.1658247411251068, -0.4427165687084198, 0.2710137665271759, 0.5988333821296692, -0.042563363909721375, -0.46079790592193604, -1.1032729148864746, -0.6052718162536621, -0.07168138027191162, 0.6107087135314941, 0.8583719730377197, -0.059135451912879944, 0.7254496216773987, -0.28858280181884766, -0.7309834957122803, -0.34194445610046387, -1.1273024082183838, 0.3378046751022339, 0.8498564958572388, -0.1221315860748291, 0.9853500127792358, 0.03879062086343765, 0.6421455144882202, 1.1042180061340332, 0.35221046209335327, -0.29689687490463257, 0.4326207637786865, -0.403891921043396, 0.05590911582112312, 1.3944642543792725, -0.21925537288188934, -0.6648494005203247, 0.09473530203104019, 0.5616108775138855, -0.8021653294563293, -0.4864690601825714, 0.23538507521152496, 0.36565089225769043, -0.3973998427391052, 0.09547394514083862, 1.4004132747650146, -0.3081940710544586, -1.0828112363815308, 0.8790378570556641, -1.0362837314605713, -0.21365585923194885, 0.5833467245101929, -0.03195487707853317, -0.23632244765758514, -1.3209635019302368, 0.08436831831932068, 0.8992128372192383, 0.6742116808891296, 0.6590929627418518, 0.31972628831863403, -0.5577083826065063, 0.4274776577949524, -0.10878843069076538, 0.08475512266159058, 0.08484602719545364, 0.6288214921951294, 0.08892060816287994, -0.9993902444839478, 0.6301496624946594, -0.9595023989677429, 0.7256287932395935, 0.5210201144218445, 0.44217050075531006, 0.06797342002391815, -0.7549728751182556, 0.7092429995536804, -1.4031829833984375, -0.6859223246574402, -0.8401942253112793, 0.33689069747924805, 1.0522536039352417, -0.5541461706161499, 0.48335713148117065, -0.08229540288448334, -0.051025353372097015, 0.9684624671936035, 0.6117188930511475, 0.14788374304771423, -1.0431345701217651, -0.26885876059532166, 0.25384432077407837, 0.4486638307571411, 0.2862672805786133, 0.017653444781899452, 0.801179826259613, 0.6395760178565979, -0.5954192876815796, 0.11243020743131638, -0.49795001745224, -0.1015387549996376, -0.48659732937812805, -0.8707228899002075, -0.3590042293071747, 0.6100043058395386, 0.5519676208496094, -0.5073426961898804, 0.7075601816177368, -0.05780181288719177, 0.01697424426674843, 0.22597575187683105, 0.12876027822494507, 1.102055311203003, 0.5093991756439209, -0.10489439964294434, 0.6898921728134155, 1.0071080923080444, 0.3068988621234894, 0.3459225296974182, -0.46932125091552734, 0.7047271728515625, 1.0276448726654053, 0.23835542798042297, 0.0727112740278244, 0.22249561548233032, 0.6387083530426025, -0.28447458148002625, -0.4764525294303894, -0.21495716273784637, 0.5792642831802368, 0.366644024848938, -0.22607673704624176, -0.6677393913269043, -0.38953280448913574, -0.6953036189079285, 0.6849724054336548, 0.8856290578842163, -0.4388042688369751, -0.141398623585701, 0.12141972780227661, 0.06050175055861473, -0.2523314356803894, 0.1812228113412857, 0.15400618314743042, 0.06560415029525757, 0.0715729147195816, 0.14811363816261292, -0.6741973757743835, -0.006821539252996445, 0.479641854763031, 0.6780970096588135, -0.9395284652709961, 0.18208450078964233, 0.2270382195711136, 0.5760944485664368, 0.45169252157211304, -0.7747955918312073, -0.9335609674453735, 0.7720255851745605, -0.3733469247817993, 0.3200574815273285, -0.14220592379570007, -0.675574779510498, -1.2207826375961304, 1.1951886415481567, -0.976265013217926, 0.6753203272819519, 0.497081458568573, -0.3346400856971741, -0.7704672813415527, 0.8005689978599548, 0.31880009174346924, 0.719728946685791, 0.22610490024089813, -0.5330609083175659, -0.6086419820785522, 0.878787100315094, 0.4242005944252014, 0.4347010850906372, 0.17935588955879211, 0.04801476374268532, 0.10236451029777527, 0.571082353591919, 0.3198924660682678, 0.36509424448013306, -1.5359041690826416, -0.21991440653800964, 1.0270090103149414, 0.6593459844589233, -0.027218561619520187, -0.3909187614917755, 0.25963523983955383, 0.09850418567657471, 0.5772238969802856, 0.1442868411540985, 0.2543570399284363, 0.11262373626232147, -0.9050485491752625, -0.054383743554353714, -0.1937619149684906, 0.3431587219238281, 1.0310901403427124, 0.27809464931488037, -0.20736870169639587, 0.0036470070481300354, 0.5608548521995544, 0.23470720648765564, 0.27708083391189575, 0.6172566413879395, 0.06682004779577255, 1.1176390647888184, -1.78162682056427, -0.7021961212158203, 0.07713671028614044, -0.15161660313606262, 0.4592055380344391, 0.0719078779220581, 0.007337041199207306, -0.5944392085075378, 0.582598090171814, -0.12457514554262161, 0.09172982722520828, 0.2819629907608032, -1.1469072103500366, 0.5322015285491943, 0.5805796384811401, -1.1080081462860107, 0.10127408802509308, 0.7273315191268921, -0.7867277264595032, 0.3127831220626831, 0.23747794330120087, 1.2116585969924927, -0.05201739817857742, 0.6998599767684937, 0.9735702276229858, -0.08801363408565521, 0.012187793850898743, -1.0165549516677856, -0.37222957611083984, -0.5237480401992798, 0.7891337871551514, 0.504307746887207, -0.6693166494369507, 0.09945271909236908, -0.15197722613811493, 0.8017634153366089, -0.05811488628387451, -0.061733029782772064, 0.0098833367228508, 0.3979368209838867, -0.36487245559692383, -0.5053973197937012, 0.11457604169845581, 0.05417156219482422, 0.34102755784988403, -0.5898720026016235, 0.20218074321746826, -0.4330343008041382, 0.12518027424812317, 0.006464183330535889, 0.4002736210823059, 0.6059383749961853, -1.3294100761413574, -0.837336003780365, -0.5467885136604309, -0.25282949209213257, 0.28627854585647583, 1.1805167198181152, -0.06646905094385147, 0.8487741947174072, -0.3771766424179077, 0.7378878593444824, -0.4029841125011444, -1.310438871383667, -0.1258237510919571, 0.10109313577413559, -0.2090965211391449, 0.16576164960861206, -0.7537515759468079, -0.9438668489456177, 0.2986336946487427, -0.48052167892456055, -0.5735076069831848, 1.0748878717422485, -0.5496362447738647, -0.43225225806236267, 0.3446962535381317, -0.535950243473053, -0.27184513211250305, 0.196355402469635, -0.43253186345100403, -0.5662156939506531, 0.1681438684463501, 0.14496298134326935, -0.30701783299446106, 0.380679190158844, 0.0393250435590744, -0.04574671387672424, 0.2555171549320221, 0.7858469486236572, -1.5665051937103271, 0.5795867443084717, -0.025906004011631012, -0.07253879308700562, -1.7327044010162354, 0.8901678323745728, -0.4278078079223633, -0.4382238984107971, -1.2150139808654785, -0.08593355864286423, 0.29599931836128235, -0.42358237504959106, -0.7769713997840881, -0.6333591341972351, -0.46099525690078735, 0.35196593403816223, 0.41077113151550293, 0.5376064777374268, 0.19059360027313232, 0.026925642043352127, 0.2675381302833557, 0.42597639560699463, 0.6158421635627747, -0.17449745535850525, 0.5319923162460327, 0.27068811655044556, -0.8955985307693481, 0.28256624937057495, -0.3338334560394287, -0.21443602442741394, 0.4719870686531067, -0.5906275510787964, 0.1205308586359024, -1.5769562721252441, -0.1790039986371994, 0.2390592396259308, -0.2633286118507385, -0.14731109142303467, 0.9883131384849548, 0.306252121925354, -0.44022607803344727, -0.07786456495523453, -1.1098644733428955, 0.42087018489837646, -0.30890512466430664, -0.3933696150779724, 0.10877704620361328, 0.07858704030513763, -0.0711546465754509, 0.020893290638923645, 1.109780192375183, -0.5988761782646179, -1.2751550674438477, -0.07334093749523163, -0.30821192264556885, 0.5546373724937439, -0.7120178937911987, 1.249627709388733, -1.2600919008255005, -0.2832210659980774, 1.265881061553955, 0.32061493396759033, -0.30759769678115845, -0.3364714980125427, -0.7299366593360901, -0.3361654281616211, -0.20082178711891174, -0.21701796352863312, -0.3352331221103668, 0.6419656276702881, -1.1352219581604004, 0.5657349228858948, 0.5930266380310059, -0.6082220673561096, -0.243069127202034, -0.452972412109375, -1.082716703414917, 1.406957745552063, -0.03268429636955261, 0.18785731494426727, 0.3769254684448242, -0.8594604730606079, -0.3600716292858124, -0.2904946208000183, 0.7382618188858032, -0.06597601622343063, 1.2994234561920166, -1.7268431186676025, -1.255677580833435, -1.0971468687057495, 0.5619909763336182, 0.2674265205860138, 0.9799267053604126, 0.12353436648845673, 0.7522375583648682, 0.21609395742416382, 0.18475085496902466, 0.3847963809967041, 0.3456037640571594, -0.20054680109024048, -0.7112754583358765, 0.6234122514724731, 0.4664095938205719, 1.0176140069961548, 0.3975423574447632, 2.0873072147369385, 0.9012464284896851, 1.0226240158081055, 0.3650767207145691, 0.6833263635635376, -0.717802882194519, 0.4754135310649872, -1.4046430587768555, -1.5750706195831299, -0.03516398370265961, -0.03414904326200485, -0.29905349016189575, -0.25993403792381287, -0.32699862122535706, 0.7163017392158508, -0.5808432102203369, -0.019509894773364067, -0.23668448626995087, -0.8661216497421265, -0.14190661907196045, 0.7074971795082092, 0.10564535856246948, 0.994725227355957, 0.43193405866622925, 0.8269338607788086, 0.10042083263397217, 0.42248570919036865, 0.7522135972976685, 0.11475316435098648, -0.023233361542224884, 0.8273903131484985, 0.19491350650787354, 0.22542321681976318, -0.9039837718009949, 0.3165810704231262, -0.5248009562492371, 0.31753769516944885, 0.030343368649482727, -0.1158614382147789, -0.7925587892532349, -0.2138475924730301, -0.39096587896347046, 0.3104584813117981, 0.06705037504434586, -0.29683586955070496, 0.3180288076400757, 0.032443828880786896, -1.6957472562789917, 0.24180367588996887, 0.12986689805984497, -0.8277442455291748, 0.2618062496185303, 0.5953037142753601, -0.1406446397304535, 0.3402177691459656, -0.31888243556022644, -0.34170448780059814, -0.6576554775238037, -1.095975637435913, -0.7128397226333618, -0.15579643845558167, -0.33855313062667847, -0.6984339356422424, 0.2191186398267746, 0.6144072413444519, -0.010966084897518158, -0.33003801107406616, -1.0255591869354248, -0.10280469805002213, -0.6465874910354614, 0.8530232310295105, -0.11473685503005981, -1.4528030157089233, -0.6178876757621765, -0.3141624629497528, 0.1484372466802597, 0.12724092602729797, -0.47891098260879517, -0.13273677229881287, -0.5530620813369751, -0.5116544961929321, -0.5357538461685181, -0.4462760090827942, 0.6560459136962891, -1.334996223449707, -0.08192329108715057, -0.030354008078575134, 0.35967308282852173, -0.8097693920135498, -0.06434828042984009, -0.9794618487358093, -0.1933547556400299, -0.4120934307575226, 0.8653947114944458, -0.38002264499664307, -0.24472442269325256, -0.44059568643569946, 0.5640925765037537, 0.5690651535987854, 0.09402120858430862, -0.5783045291900635, -0.43413758277893066, -1.2525384426116943, -0.15061171352863312, 0.10162004828453064, -0.2498399019241333, 0.31519752740859985, 0.46870678663253784, 2.2264485359191895, 0.5938376188278198, 0.466787189245224, -0.19200654327869415, 0.6442679166793823, -0.2190823256969452, -0.5150689482688904, -0.9514161944389343, -0.49662530422210693, -0.42900189757347107]"
sc-copilot/NEW_CLAIM/new_claim_schedule_code.py,def new_claim_schedule_code():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[-0.003310680389404297, 0.05647899955511093, -3.6169214248657227, -0.5733024477958679, 0.46511584520339966, -0.7779584527015686, -0.12386751174926758, -0.5008520483970642, -0.2882705330848694, -1.364785075187683, -0.6576905846595764, 0.9619566202163696, 1.8062517642974854, 0.9043093919754028, -0.5447235107421875, -0.7028553485870361, -0.17615124583244324, -0.39040249586105347, -0.6629908680915833, 0.2955676317214966, 0.8442122936248779, 0.17538754642009735, -1.3321890830993652, -0.8104549646377563, 1.008406162261963, 0.4380813241004944, 0.9108905792236328, 0.1311262845993042, -0.3434925675392151, 0.5061937570571899, 0.39604002237319946, 0.6005780100822449, 0.501316487789154, -0.9356803894042969, 0.14816556870937347, -0.36733007431030273, 0.14274169504642487, -0.22647719085216522, -0.4275294542312622, -0.8457010984420776, -0.5207229852676392, 0.4789048433303833, 0.371093213558197, 0.47993141412734985, 0.9621551036834717, -0.4323573112487793, 1.4776890277862549, 1.3646914958953857, -0.6754282712936401, -0.19542719423770905, 0.7448617219924927, -0.5001446604728699, 0.2941126227378845, -0.6072483062744141, 1.08632493019104, 0.39632463455200195, -0.28367897868156433, 1.1398000717163086, -0.7361621260643005, -1.0826846361160278, 1.419942021369934, 1.9758963584899902, 0.07697839289903641, 0.48465919494628906, -0.06858489662408829, 0.7376619577407837, -0.317560613155365, 0.7015170454978943, -0.11035951226949692, 0.08853676915168762, -0.35471782088279724, 0.6131327152252197, 0.28834885358810425, -0.9983609914779663, -0.210076242685318, 0.5097112655639648, -0.27592629194259644, -0.3197615146636963, -0.3469555079936981, 0.7278919219970703, -0.6191862225532532, 0.17491061985492706, 0.8549226522445679, 0.19247734546661377, 0.4699501693248749, -0.268277108669281, 0.37408214807510376, -0.13258905708789825, -0.35954394936561584, 2.4339218139648438, -0.35706791281700134, -1.252075433731079, -1.0440762042999268, 0.7581202983856201, -1.0549044609069824, -0.15362143516540527, -0.8227437734603882, -0.5460308194160461, -0.8880444765090942, -0.7228848934173584, 0.021321754902601242, -0.2568056583404541, 0.9442257881164551, -0.8580361604690552, -0.72802734375, -0.4215892553329468, -0.1482636034488678, 0.30587321519851685, 0.2829427719116211, -0.40107759833335876, 0.09749722480773926, 1.2789947986602783, 0.11978521198034286, -0.4434162974357605, -0.12468697130680084, -0.2664341330528259, 1.2726702690124512, -1.2368022203445435, -0.7395849227905273, 0.8046631813049316, -1.2420125007629395, -0.9337316751480103, 0.4791245460510254, 1.8056690692901611, -0.21291884779930115, 1.167093276977539, -1.0510318279266357, 0.8222873210906982, 0.8640507459640503, -1.7567672729492188, 0.6698127388954163, 0.3567463755607605, -1.170458436012268, 0.7384107112884521, -0.3151525855064392, -0.6166920065879822, 0.3538450002670288, -0.3947248160839081, -0.3699491620063782, 0.6614549160003662, -0.008435986936092377, 0.14691214263439178, -0.56329745054245, -0.7041295766830444, -0.032051727175712585, -0.18197789788246155, 0.33910202980041504, -1.345301628112793, -0.18584579229354858, -0.49170130491256714, 0.3711526095867157, 0.6579625010490417, 0.0643095076084137, 0.08467807620763779, 0.07806071639060974, -0.37201187014579773, 0.45129525661468506, -0.5225054621696472, -0.0677153468132019, 0.5324431657791138, 0.5658614635467529, -0.26807844638824463, -0.21576961874961853, 0.39274972677230835, -0.96497642993927, -0.7564019560813904, -0.34650251269340515, 0.8454883098602295, -0.8503849506378174, -0.04259737208485603, -0.39175939559936523, -0.6011757850646973, -0.5918393731117249, -0.919959306716919, 0.3632086515426636, -0.362348347902298, -0.24024374783039093, -0.5971581935882568, 1.1047863960266113, -0.8314405679702759, -0.11917954683303833, -0.5765225887298584, 0.8733639717102051, 1.5449244976043701, -1.100830316543579, -0.4667128622531891, 0.698918342590332, -1.1018964052200317, -0.7024096250534058, -1.3184576034545898, -0.23020434379577637, 0.549951434135437, -0.06987424194812775, -0.48975610733032227, -0.8490781784057617, -0.4399624168872833, -0.0628877580165863, 0.5917336344718933, -0.28424301743507385, -0.5265494585037231, -0.10487768054008484, 0.3052164316177368, -0.37197941541671753, -0.17157818377017975, -0.3533526659011841, 0.7759128212928772, -0.31839919090270996, -0.0162633266299963, -0.24890078604221344, 0.2526559829711914, 1.8607044219970703, -0.1499883234500885, -1.3765101432800293, -0.07352310419082642, 0.8286579847335815, 0.4147372841835022, -0.7328660488128662, -0.774479866027832, -0.1331159770488739, -0.03482983633875847, 0.8230085372924805, -0.6435008645057678, 0.3977930545806885, -0.30742865800857544, 0.8199335336685181, -0.4143276810646057, -0.33420509099960327, 0.9652215242385864, -0.28060150146484375, -0.17561060190200806, -0.2946845293045044, -1.6167809963226318, -1.0015839338302612, -0.08291139453649521, 0.7412716746330261, 1.2255563735961914, 1.0737675428390503, 0.991720974445343, 1.7408421039581299, -0.8274968862533569, -0.001192331314086914, 1.0210280418395996, 0.8564295768737793, 0.35637742280960083, -0.2433968484401703, -0.14503736793994904, -0.7078707218170166, -0.21263232827186584, 0.22837719321250916, 1.0141903162002563, -0.21260884404182434, -0.2790690064430237, -0.29703769087791443, 0.645845890045166, 0.6041427254676819, -0.17799904942512512, -0.5458948016166687, -0.8798395991325378, 0.07125450670719147, 0.4971436560153961, 0.15539291501045227, -0.11471521109342575, 1.6802315711975098, -0.37192976474761963, -1.1956486701965332, -1.2019582986831665, -1.304888367652893, 0.2139357626438141, 0.14476361870765686, -0.7047648429870605, 0.022306442260742188, -0.24259772896766663, 0.5569713711738586, 1.1546412706375122, 0.5511407256126404, -1.016864538192749, 0.2402164191007614, 0.36846405267715454, -0.6335819363594055, 0.9661410450935364, -0.2609421908855438, -0.8116304874420166, -0.19602307677268982, 0.18170727789402008, 0.042690761387348175, 0.19532591104507446, 0.12380989640951157, 0.26582926511764526, 0.18394120037555695, -0.47035694122314453, 1.464516282081604, -0.32022953033447266, -0.9920615553855896, 1.1933794021606445, -0.5243745446205139, -0.7436492443084717, 0.5793713331222534, 0.32552674412727356, -0.14624328911304474, -1.0740774869918823, -0.2362211048603058, 0.9363621473312378, 0.14014661312103271, 0.44165629148483276, 0.16148492693901062, -0.7608997225761414, 0.3734670877456665, -0.2706654667854309, 0.2520524859428406, 0.1298210620880127, 0.7012260556221008, 0.2019885927438736, -1.2147574424743652, 0.21357187628746033, -0.9291225671768188, 0.5637416839599609, 1.0324896574020386, 0.09671783447265625, 0.8101122975349426, -0.5020453333854675, 0.4988517165184021, -0.8265494108200073, -0.16093724966049194, -1.9372382164001465, -0.2098688781261444, 1.3205876350402832, -1.0668784379959106, 0.4717891216278076, 0.7185868620872498, -0.23688121140003204, 0.6770839691162109, 1.17472243309021, -0.20958662033081055, -1.1033525466918945, 0.26419612765312195, -0.3965914249420166, -0.04438258707523346, 0.5723792910575867, -0.19356858730316162, 1.4142162799835205, 0.7168617844581604, -0.13728469610214233, 0.31745612621307373, -1.4552041292190552, -0.05723019689321518, -0.24052295088768005, -0.662449836730957, -0.3441843092441559, 0.4168175756931305, -0.040017008781433105, -0.28806570172309875, 0.008987486362457275, -0.10587427020072937, 0.32625705003738403, 0.5957536101341248, 0.23459044098854065, 0.3186017870903015, -0.1610346883535385, -0.041019219905138016, 0.4137691855430603, 0.47711414098739624, 0.10163003206253052, 0.07006015628576279, -0.20041435956954956, 0.13450461626052856, 0.4562426805496216, 0.5160560607910156, 0.37156400084495544, 0.23967429995536804, 0.24173015356063843, -0.6624274849891663, -0.26335617899894714, 0.7686605453491211, 0.48953455686569214, 0.9880073666572571, 0.07098941504955292, -1.1982417106628418, 0.546299397945404, -0.2765272855758667, 0.5652761459350586, 1.1989835500717163, -1.0897274017333984, -0.17876166105270386, -0.5715436935424805, -0.04983842372894287, 0.42079341411590576, 0.2095787227153778, 0.47433602809906006, 0.018580321222543716, 0.7817382216453552, 0.23242005705833435, -0.37187689542770386, 0.42579928040504456, 0.5645512342453003, 0.6362284421920776, -0.7561044692993164, 0.6700157523155212, 0.4491618275642395, 0.2866722643375397, 0.08010372519493103, -0.7023968696594238, -0.7282105684280396, 0.8516386151313782, -0.998324453830719, -0.19979853928089142, 0.09342607110738754, -0.5767417550086975, -1.359398365020752, 0.7340396642684937, -0.6234859228134155, 0.13245584070682526, 0.24890530109405518, 0.1839393675327301, -0.693334698677063, 0.6628715991973877, -0.4475404620170593, 0.9457345008850098, 0.6090279817581177, -0.5079658031463623, 0.2838951647281647, 0.23269754648208618, -0.035952672362327576, 0.004347203299403191, 0.5383216142654419, -0.7984873056411743, -0.3431665003299713, 0.8545218706130981, 0.1961873471736908, 0.8293542265892029, -1.5238323211669922, 0.099884532392025, 1.3568540811538696, 0.7584264278411865, -0.08414387702941895, -0.4142081141471863, -0.155673086643219, 0.09451130777597427, 0.7225029468536377, 0.2658298909664154, 0.22846826910972595, 0.19967180490493774, -1.7696504592895508, -0.2695111930370331, -0.9801404476165771, 1.4576129913330078, 1.6174583435058594, 0.8076822757720947, -0.713165283203125, -0.17623582482337952, 1.2677375078201294, 0.8497627377510071, 0.7347131967544556, 0.5963011980056763, 0.7875661849975586, 1.5625544786453247, -1.681706428527832, 0.029103536158800125, 0.6261644959449768, 0.31659603118896484, 1.042848825454712, -0.5333598256111145, 0.4379364848136902, -0.7669447064399719, 0.1637020856142044, -0.21314005553722382, 0.7693594694137573, 0.20638126134872437, 0.13945423066616058, 0.21545661985874176, 1.4712730646133423, -0.019111167639493942, 0.28091180324554443, 0.04067980498075485, -0.6823449730873108, 0.5820139050483704, -0.008513575419783592, 1.0719707012176514, 0.1875695437192917, 1.1856229305267334, 1.4586079120635986, -0.2868468165397644, -0.16678163409233093, -1.558135747909546, -0.311315655708313, 0.2601497173309326, 0.8515625, 1.0488779544830322, -1.0315399169921875, 0.012204596772789955, -0.6647738814353943, 0.8522725701332092, 0.27790573239326477, 0.42543715238571167, 0.7011352777481079, 0.732437252998352, 0.17367660999298096, 0.03614163398742676, 0.9605454206466675, 0.4944269061088562, 0.6146754026412964, -0.5830183029174805, 0.6092245578765869, 0.03464986011385918, -0.8058685064315796, 0.6639972925186157, 0.7361867427825928, 0.4560123682022095, -0.2465677112340927, -1.2148339748382568, -0.33346742391586304, 0.12425576150417328, 0.3996884822845459, 0.8167834877967834, -0.2539942264556885, 1.0675626993179321, -0.24073535203933716, 0.4606289863586426, -1.4555025100708008, -1.2726938724517822, -0.2659747302532196, -0.2546538710594177, -0.3574533760547638, -0.03460729122161865, 0.07521580159664154, -0.9872291088104248, 0.1203785091638565, -0.07888446748256683, -0.6323405504226685, 0.47405245900154114, -0.30794090032577515, -0.31537461280822754, 0.06237798184156418, -1.1368199586868286, -0.01072172075510025, 0.008207414299249649, -0.36842960119247437, -1.153947353363037, -0.20425283908843994, 0.25817546248435974, 0.027517303824424744, 0.18301618099212646, 0.6584265232086182, 0.539848804473877, 0.10834555327892303, 0.05888277292251587, -1.5901296138763428, -0.440723717212677, -0.24656596779823303, -0.6932817697525024, -1.5778695344924927, 0.5950531959533691, -0.24051746726036072, -0.27096256613731384, -1.27138352394104, -0.29138410091400146, 0.9185515642166138, 0.21652236580848694, -0.6122461557388306, -0.30706918239593506, -0.7881798148155212, 0.23614978790283203, 0.524512767791748, 0.26658129692077637, -0.12334407866001129, 0.13400885462760925, 0.36293667554855347, 0.24038217961788177, 0.2890447676181793, -0.2183084934949875, 0.42161285877227783, 0.3643735647201538, -0.8140167593955994, 0.47133761644363403, -0.3586370348930359, -0.6010098457336426, -0.18074896931648254, 0.6373201012611389, -0.7851898670196533, -0.6809675693511963, -1.0085009336471558, 0.7617843151092529, -0.45166727900505066, 0.006982848048210144, 0.4153582751750946, -0.30549585819244385, -0.09244988858699799, 0.5115019679069519, -0.9422940015792847, 0.08290369063615799, 0.040460750460624695, -0.6520282626152039, -0.1970844566822052, 0.822795569896698, -0.14346054196357727, -0.216266468167305, 1.0564115047454834, -0.7704229950904846, -0.8109058141708374, -0.3594287931919098, 0.05935879796743393, 0.31028521060943604, -0.15056689083576202, 1.0015356540679932, -1.5265871286392212, -0.17402413487434387, 1.4911260604858398, -0.5192161202430725, 0.6423525214195251, 0.284430593252182, -0.3220197856426239, 1.09568190574646, 0.08964794874191284, -0.026035092771053314, -0.1626715362071991, 0.4951973259449005, -0.08280012011528015, 1.0167980194091797, -0.09326080977916718, 0.3181682825088501, -0.17641568183898926, -0.41473865509033203, 0.04456867277622223, 1.1542437076568604, 0.3062642216682434, 0.5635750889778137, 0.41819459199905396, -1.3426737785339355, -0.7860319018363953, 0.25787535309791565, 1.0327441692352295, -0.6457945108413696, 0.913304328918457, -2.4062581062316895, -0.7497909069061279, -1.379638671875, 0.8337716460227966, -0.26147186756134033, 0.7441906332969666, 0.10859998315572739, 0.4728224277496338, 0.24597477912902832, 0.22204090654850006, 1.0871034860610962, -0.2623039782047272, 0.30346840620040894, -1.337795376777649, 1.3284746408462524, 0.4408237934112549, 2.057469606399536, -0.22950994968414307, 1.3417446613311768, 1.1626324653625488, 0.7623031139373779, 0.4896408021450043, 0.36697959899902344, -1.1122245788574219, 0.4946177005767822, -1.015167474746704, -1.3159165382385254, 0.014380410313606262, -0.01553712785243988, -0.10288707911968231, -0.609181821346283, -0.1218058317899704, 1.8562605381011963, -0.14640671014785767, 0.9035274982452393, 0.6881420612335205, -0.9934515953063965, -0.7995733022689819, 0.8200698494911194, 0.7093672752380371, 0.40872716903686523, 0.45962053537368774, 0.5145694017410278, 0.7364676594734192, 0.37323620915412903, 1.0150316953659058, -0.6892487406730652, -0.552902102470398, -0.3664173483848572, 0.6590931415557861, 0.17653970420360565, -0.5649502873420715, 0.17056655883789062, -0.29650163650512695, 0.21661686897277832, 0.49953678250312805, -0.36058509349823, -1.3797607421875, -0.21976156532764435, -0.06240657716989517, 0.3710879683494568, -0.8729369640350342, 0.366658091545105, 0.043843284249305725, -0.05228589475154877, -0.650375485420227, 0.4037523865699768, -0.17755919694900513, -0.14309729635715485, 1.5271053314208984, 0.025603432208299637, 0.25074756145477295, 0.2941359281539917, -0.351471871137619, -0.7114931344985962, -0.6876997947692871, -0.6235905885696411, -0.7008106112480164, 0.1072089821100235, 0.507943868637085, -0.6005155444145203, 0.2980799674987793, -1.0906388759613037, 0.5623258352279663, -0.5933356881141663, -1.3053548336029053, -0.07255648821592331, -0.9784440994262695, 0.298153817653656, -0.284025639295578, -1.1403294801712036, -0.22116580605506897, -0.14682307839393616, 0.6286493539810181, 0.10237297415733337, -0.5425165891647339, -0.41838717460632324, -0.8464715480804443, -0.02175230160355568, -0.8172586560249329, -0.2366180568933487, 0.8530712127685547, -0.5843090415000916, 0.7235842943191528, -0.5376395583152771, -0.15503066778182983, -0.8927546739578247, -0.7805236577987671, -0.8970006108283997, 0.9267967939376831, 0.4008095860481262, 0.10467611998319626, 0.07190738618373871, -0.21008384227752686, -0.5228007435798645, -0.06942708790302277, 1.4297431707382202, 0.048694808036088943, -0.5747509002685547, -0.5107191205024719, -1.5010061264038086, -0.15793907642364502, 0.33654749393463135, 0.872450590133667, -0.03933608531951904, 0.8470202684402466, 2.8526415824890137, 0.005511734634637833, 0.8855942487716675, -0.3056334853172302, 0.06996719539165497, -0.8859517574310303, -0.09307795763015747, -0.08047723025083542, -0.2578275203704834, -0.9214781522750854]"
sc-copilot/INITIALISE SMART CONTRACT/initialise_smart_contract.py,"api = ""3.12.0""
version = ""0.0.0""
display_name = ""name""
tside = Tside.LIABILITY

# Internal Accounts
""""""
Put here the internal accounts that it's going to be used in the smart contract
""""""

# Addresses
""""""
Put here the addresses that it's going to be used in the smart contract
""""""

# Define Shapes
PercentageShape = NumberShape(
    kind=NumberKind.PERCENTAGE,
    min_value=Decimal(0),
    max_value=Decimal(1),
    step=Decimal(""0.00001""),
)
RateShape = NumberShape(
    kind=NumberKind.PERCENTAGE,
    min_value=Decimal(0),
    max_value=Decimal(1),
    step=Decimal(""0.0001""),
)
BooleanShape = NumberShape(
    kind=NumberKind.PLAIN, min_value=Decimal(0), max_value=Decimal(1), step=Decimal(1)
)
StatusCodeShape = UnionShape(
    UnionItem(key=""DRAFT"", display_name=""DRAFT""),
    UnionItem(key=""PENDING"", display_name=""PENDING""),
    UnionItem(key=""APPROVED"", display_name=""APPROVED""),
    UnionItem(key=""CLEARED"", display_name=""CLEARED""),
    UnionItem(key=""CLOSED"", display_name=""CLOSED""),
    UnionItem(key=""SETTLED"", display_name=""SETTLED""),
    UnionItem(key=""INVALID"", display_name=""INVALID""),
)
PhaseShape = UnionShape(
    UnionItem(key=""CONTRACTING"", display_name=""CONTRACTING""),
    UnionItem(key=""MANAGEMENT"", display_name=""MANAGEMENT""),
    UnionItem(key=""LITIGATION"", display_name=""LITIGATION""),
    UnionItem(key=""CLOSED"", display_name=""CLOSED""),
)

# PARAMETERS
parameters = []


# Functions
def _number_to_string(number):
    """"""
    Standard way to convert number to string with the good precision

    Args:
        number (number): A number value to convert to string
    Returns:
        str: the number formated wit 2 decimal places
    """"""
    return ""{0:.2f}"".format(number)


def _make_random_number(max):
    """"""
    Function to calculate a random number

    Args:
        max (int): The maximum value for a random number to be
    Returns:
        int: The random number
    """"""
    microsecond = datetime.utcnow().microsecond
    random = int(microsecond * 1000)
    random %= max
    return random


def to_decimal(value):
    """"""
    Safe way to convert to decimal

    Args:
        value(str|number): A string representing a number or any number type
    Returns:
        Decimal: value converted to decimal
    """"""
    return Decimal(str(value))


def _round_to_precision(precision, amount):
    """"""
    Round a decimal value to required precision

    Args:
        precision (Decimal): number of decimal places to round to
        amount (Decimal): amount to round
    Returns:
        Decimal: Rounded amount
    """"""
    decimal_string = str(Decimal(""1.0"") / pow(10, precision))
    return amount.quantize(Decimal(decimal_string).normalize(), rounding=ROUND_HALF_UP)


def _hollidays_list(date):
    """"""
    The list of the hollidays in the year for the date informed

    Args:
        date (datetime): The day the it's desired to calculate
    Returns:
        list[dict[str, datetime]]: a list of dictionaries with the name of the holliday being the key and the datetime being the value
    """"""
    easter_sunday = _gauss_easter(date.year)
    hollidays = {
        ""news_years_eve"": datetime(day=1, month=1, year=date.year),
        ""easter_monday"": easter_sunday + timedelta(days=1),
        ""labor_day"": datetime(day=1, month=5, year=date.year),
        ""wii_victory_day"": datetime(day=8, month=5, year=date.year),
        ""ascension_day"": easter_sunday + timedelta(days=39),
        ""whit_monday"": easter_sunday + timedelta(days=50),
        ""bastille_day"": datetime(day=14, month=7, year=date.year),
        ""mary_assumption"": datetime(day=15, month=8, year=date.year),
        ""all_saints"": datetime(day=1, month=11, year=date.year),
        ""armistice_day"": datetime(day=11, month=11, year=date.year),
        ""christmas_day"": datetime(day=25, month=12, year=date.year),
    }
    return list(hollidays.values())


def _gauss_easter(y):
    """"""
    Calculates the gauss easter day for the year

    Args:
        y (int): The year the it's desired to calculate
    Returns:
        datetime: The datetime representing the date that the gauss easter happens in that year.
    """"""
    a = y // 100
    b = y % 100
    c = (3 * (a + 25)) // 4
    d = (3 * (a + 25)) % 4
    e = (8 * (a + 11)) // 25
    f = (5 * a + b) % 19
    g = (19 * f + c - e) % 30
    h = (f + 11 * g) // 319
    j = (60 * (5 - d) + b) // 4
    k = (60 * (5 - d) + b) % 4
    m = (2 * j - k - g + h) % 7
    n = (g - h + m + 114) // 31
    p = (g - h + m + 114) % 31
    day = p + 1
    month = n
    return datetime(year=y, month=month, day=day)


def _get_periods_per_year(payment_schedule_frequency):
    """"""
    Returns the number of periods in the year that a frequency type have.

    Args:
        payment_schedule_frequency (str): 'S', 'T', 'A' or 'M'
    Returns:
        int: The amount of months in that period
    """"""
    frequency_map = {""S"": 12 // 2, ""T"": 12 // 3, ""A"": 12 // 1, ""M"": 12 // 12}
    return frequency_map.get(payment_schedule_frequency, 0)


def _date_to_string(date):
    """"""
    Converts the datetime object to string

    Args:
        date (datetime): The date to be converted
    Returns:
        str: The representation of the date in the DD-MM-YYYY format
    """"""
    return f""{date.day:02d}-{date.month:02d}-{date.year:04d}""


def _date_in_range(start_date, end_date, query_date):
    """"""
    Check if the date is within a range

    Args:
        start_date (datetime): first day of the range
        end_date (datetime): last day of the tirage
        query_date (datetime): day to be tested
    Returns:
        bool: if the date is in the range
    """"""
    return query_date >= start_date and query_date <= end_date


def _get_last_day_of_month(queried_date):
    """"""
    Gets the last of the month in the queried date

    Args:
        queried_date (datetime): the day that it's desired to query from
    Returns:
        datetime: the last day from the queried month
    """"""
    current_month = (
        datetime(year=queried_date.year, month=queried_date.month, day=1)
        + timedelta(months=1)
        - timedelta(days=1)
    )
    return current_month


def _is_the_last_day_of_month(queried_date):
    """"""
    Determines wheter its the last of month or not

    Args:
        queried_date (datetime): The day that it's wanted to be tested
    Returns:
        bool: Wheter the day is the last day or not
    """"""
    end_of_month_date = _get_last_day_of_month(queried_date)
    if queried_date.day == end_of_month_date.day:
        return True
    return False


def _string_to_date(date_string):
    """"""
    Converts date from string (DD-MM-YYYY) to datetime object

    Args:
        param date_string (str): string of date to convert in the DD-MM-YYYY format
    Returns:
        datetime: representation of date
    """"""
    split_date = date_string.split(""-"")
    date = datetime(
        year=int(split_date[2]),
        month=int(split_date[1]),
        day=int(split_date[0]),
    )
    return date


def _datetime_to_string(date):
    """"""
    Converts datetime to string but keeping the HH:MM:SS
    Args:
        date (datetime): The date to be converted
    Returns:
        str: The representation of the date in the DD-MM-YYYY_HH:MM:SS format
    """"""
    return f""{date.day:02d}-{date.month:02d}-{date.year:04d}_{date.time()}""


def _make_timestamp():
    """"""
    Make a timestamp useful for making internal postings

    Returns:
        str: The datetime.utcnow converted in string in the following format DD_MM_YYY_S
    """"""
    return f""{_date_to_string(datetime.utcnow()).replace('-','_').replace(' ', '_')}_{datetime.utcnow().microsecond}""


def current_milli_time(timestamp):
    """"""

    Args:
        timestamp (str): last part of the vault.get_hook_execution_id() split by '_'
    Returns:
        str: One number in string format representing the milliseconds from the timestamp
    """"""
    return str(round(int(timestamp) / 1000000))


def _calculate_new_day(today, reduction_frequency):
    """"""
    Calculates a new day using the frequency ('M', 'T', 'S', 'A')

    Args:
        today(datetime): the date to be added
        reduction_frequency (str): the frequency ('M', 'T', 'S', 'A') to add the amount of months to the date
    Returns:
        datetime: The calculated date
    """"""
    months = 0
    if (frequency := _get_periods_per_year(reduction_frequency)) != 0:
        months = 12 // frequency
    new_day = today + timedelta(months=months)
    return new_day


def _get_number_of_days_between_dates(start_date, end_date):
    """"""
    Calculates the number of days between two dates, always return a positive number

    Args:
        start_date (datetime): first day for the calculation
        end_date (datetime): last day for the calculation
    Returns:
        int: number of days between the two dates, positive number.
    """"""
    return abs((end_date - start_date).days)


def _validate_union_shape(value, keys):
    """"""
    Validates an union shape parameter, if the values is in the intended keys

    Args:
        value (str): the value for validation
        keys (list[str]): the collection of values tha the union shape parameter can have
    Returns:
        bool: if the value is valid
    """"""
    if value not in keys:
        return False
    return True


def _validate_date_string(date_string):
    """"""
    Validates the date string to be in a valid format DD-MM-YYYY

    Args:
        date_string (str): string representing the date
    Returns:
        bool: if the string is valid
    """"""
    for character in date_string:
        if character != ""-"" and not character.isnumeric():
            return False
    date_string_split = date_string.split(""-"")
    if len(date_string_split) != 3:
        return False
    if len(date_string_split[0]) != 2:
        return False
    if len(date_string_split[1]) != 2:
        return False
    if len(date_string_split[2]) != 4:
        return False
    day, month, year = (
        int(date_string_split[0]),
        int(date_string_split[1]),
        int(date_string_split[2]),
    )
    if month > 12:
        return False
    init_of_month = datetime(day=1, month=month, year=year)
    end_of_month = _get_last_date_of_month(init_of_month)
    if day > end_of_month.day:
        return False
    return True


def _validate_number_string(number_string):
    """"""
    Validates the string that is supossed to represent a number in the following format 9999.99

    Args:
        number_string (str): The string representing the number
    Returns:
        bool: If the strins is valid
    """"""
    return number_string.replace(""."", """", 1).isnumeric() and float(number_string) >= 0


def _validate_phase(phase):
    """"""
    Validates if the phase is in the correct value for making transaction

    Args:
        phase (str): the value for the phase parameter
    Raises:
        Rejected
    """"""
    if phase.lower() != ""management"":
        raise Rejected(
            f""Cannot make transaction; Phase must be at MANAGEMENT"",
            reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
        )


def _validate_status_code(status_code):
    """"""
    Validates if the status_code is in the correct value for making transaction

    Args:
        status_code (str): the value for the status_code parameter
    Raises:
        Rejected
    """"""
    if status_code.lower() != ""approved"":
        raise Rejected(
            f""Cannot make transaction; Status code must be APPROVED"",
            reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
        )


def _get_parameter(
    vault, name, at=None, is_json=False, optional=False, union=False, default_value=None
):
    """"""
    Get the parameter value for a given parameter

    Args:
        vault (vault object): It can be a mock_vault or the vault object
        name (str): name of the parameter to retrieve
        at (datetime): time at which to retrieve the parameter value. If not specified the latest value is retrieved
        union (bool): if True parameter will be treated as a UnionItem
        is_json (bool): if True json_loads is called on the retrieved parameter value
        optional (bool): if True we treat the parameter as optional
        default_value (Any): if the optional function parameter is True, and the optional parameter is not set, this value is returned
    Returns:
         Any: the parameter value
    """"""

    if at:
        parameter = vault.get_parameter_timeseries(name=name).at(timestamp=at)
    else:
        parameter = vault.get_parameter_timeseries(name=name).latest()

    if optional:
        parameter = parameter.value if parameter.is_set() else default_value

    if union:
        parameter = parameter.key

    if is_json:
        parameter = json_loads(parameter)

    return parameter


def _get_list_from_parameter(parameter):
    """"""
    Used to convert to list string parameter that were meant to be list

    Args:
        parameter(str): The value from the parameter
    Returns:
        list[str]: List converted from the sting
    """"""
    return json_loads(parameter)


def _get_balance_at(vault, address, timestamp: datetime = None) -> Decimal:
    """"""
    Get the balance at an specific address optionally at a specific datetime

    Args:
        vault (vault object): It can be a mock_vault or the vault object
        address (str): Address for the balance
        timestamp (datetime): The date for geting the amount if None it'll get the entire amount
    Returns:
        Decimal: The amount of the address
    """"""
    balances = (
        vault.get_balance_timeseries().latest()
        if timestamp is None
        else vault.get_balance_timeseries().at(timestamp=timestamp)
    )
    denomination = EUR
    if _address_exists(balances, address):
        return Decimal(
            balances[(address, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net
        )
    return Decimal(""0.00"")


def _address_exists(balances, name):
    """"""
    Checks if there is already an address for a given name.

    Args:
        balances (dict): balance dimensions to balance values
        name (str): name to check
    Return:
        bool: True if there is already an open loan for the given id
    """"""
    principal_addresses = _get_all_addresses(balances)
    for principal_address in principal_addresses:
        if principal_address == name:
            return True
    return False


def _get_all_addresses(balances):
    """"""
    Gets all claim addresses.

    Args:
        balances (dict): balance dimensions to balance values
    Returns:
        List[str]: list of balance addresses that match address_type and batch_id
    """"""
    return [
        balance_dimensions[0] for balance_dimensions, balance_amount in balances.items()
    ]


def _create_posting(
    vault,
    amount,
    denomination,
    from_account_id,
    from_account_address,
    to_account_id,
    to_account_address,
    asset,
    client_transaction_id,
    instruction_details,
):
    """"""
    Create an internal posting

    Args:
        vault (vault object): It can be a mock_vault or the vault object
        amount (Decimal): Amount to be transfered
        denomination (str): Denomination to be used
        from_account_id (str): The id where the amount will be taken of
        from_account_address (str): The address from the account that the money will be taken of
        to_account_id (str): The id from the account that will receive the money
        to_account_address (str): The address where the money will be put
        asset (str): The asset for this posting, use the DEFAULT_ASSET from vault
        client_transaction_id (str): Id for the posting, each posting from the same account has to have different ids
        instruction_details (dict): The addional informations for the posting
    """"""
    posting_instruction = []
    posting_instruction.extend(
        vault.make_internal_transfer_instructions(
            amount=Decimal(amount),
            denomination=denomination,
            from_account_id=from_account_id,
            from_account_address=from_account_address,
            to_account_id=to_account_id,
            to_account_address=to_account_address,
            asset=asset,
            client_transaction_id=client_transaction_id,
            instruction_details=instruction_details,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instruction, effective_date=datetime.now()
    )


def _get_parameter_from_parameters_list(
    vault,
    parameters,
    parameter_name,
    default_value=None,
    optional=False,
    union=False,
    is_parameter_type=False,
):
    """"""
    Get parameter version from parameters list (pre_parameter_change_code, post_parameter_chnage_code)

    Args:
        vault (vault object): It can be a mock_vault or the vault object
        parameters (list[Parameter(Any)|Any]): It's a list of Parameter (pre_parameter_change_code) or Any type (post_parameter_change_code)
        parameter_name (string): the name of the parameter ti get from parameters_list
        default_value (Any): if the optional function parameter is True, and the optional parameter is not set, this value is returned
        optional (bool): if True  the parameter is treated as optional
        union (bool): if True parameter will be treated as a UnionItem
        is_parameter_type (bool): True for pre_parameter_change_code, Fale for post_parameter_change_code
    Returns:
         Any: the parameter value
    """"""
    value = None
    if parameter_name in parameters:
        value = parameters[parameter_name]
        if is_parameter_type:
            value = value.value
        if optional:
            value = value.value
            if value is None:
                value = default_value

        if union:
            value = value.key
    else:
        value = _get_parameter(
            vault=vault,
            name=parameter_name,
            union=union,
            optional=optional,
            default_value=default_value,
        )
    return value
",2024-02-28T00:00:00Z,Unknown,1.0,"[0.27494585514068604, 0.13444529473781586, -1.708411693572998, -0.8298726677894592, 1.8961341381072998, -0.2209021896123886, -0.22858992218971252, 0.15041659772396088, 0.48819538950920105, 0.5196412205696106, -1.674060344696045, 0.6148984432220459, 1.3379788398742676, -0.05421382933855057, -0.24406984448432922, -0.42804333567619324, -0.7624495029449463, -0.6979308128356934, 0.3950456976890564, 0.8678980469703674, 0.4606616199016571, -0.4138285219669342, -0.05641823261976242, -0.25440946221351624, 0.498740553855896, 0.6481209397315979, 0.7616890668869019, 1.1636404991149902, -1.7625632286071777, 0.9428598284721375, -0.1827271431684494, -0.07907568663358688, 1.3828788995742798, -1.2509005069732666, -1.1285594701766968, -0.7310808300971985, 1.0393762588500977, 0.35700395703315735, 1.1528376340866089, -0.44126448035240173, -0.44321954250335693, 0.557235062122345, 0.0649435818195343, -0.11588640511035919, -0.176201730966568, -0.18788444995880127, 1.3308367729187012, -0.07481589168310165, 0.6031087040901184, -0.5050323605537415, 0.3864230215549469, -0.6307492852210999, 0.083551324903965, -0.5061571598052979, 0.9940844178199768, -0.009340379387140274, -0.7018987536430359, 1.1320054531097412, 0.9546157121658325, 0.025331102311611176, 0.753592848777771, 1.2973848581314087, 0.09267072379589081, 0.597323477268219, 0.6474944353103638, 0.8742756247520447, -0.3540405035018921, 0.8781090378761292, -0.12051007151603699, -0.2322147786617279, 0.405327707529068, 0.37786582112312317, -0.40605273842811584, -0.5289772748947144, -1.0243611335754395, 0.5856283903121948, -0.31436556577682495, -1.3456144332885742, -0.028190908953547478, -0.6695528030395508, -0.3299137353897095, -0.2921537756919861, 0.6797214150428772, 0.36283165216445923, -0.9105715155601501, -0.3667493760585785, -0.13941697776317596, 0.4106484651565552, -0.10570631176233292, 1.7441914081573486, -0.7140458226203918, 0.09087231755256653, -0.10196352005004883, -0.33592912554740906, -1.7030725479125977, 0.3772647976875305, -0.42918601632118225, -0.1641150414943695, 0.3368237614631653, -0.30349481105804443, -0.10639847815036774, -0.29486602544784546, -0.12876994907855988, -0.36279070377349854, -0.617169976234436, 1.3964024782180786, 0.1076066792011261, -0.29789555072784424, 0.10584184527397156, -0.9282519221305847, -0.6888884902000427, 0.566717267036438, -0.25107914209365845, -0.45502275228500366, 0.10870727151632309, -1.7814303636550903, 0.7527683973312378, -0.7900415658950806, -0.49856138229370117, 0.1765003800392151, -0.6345954537391663, -0.06791514903306961, -0.33643826842308044, 1.399114727973938, -0.06051342189311981, -0.5122883319854736, -0.3619843125343323, 1.0565459728240967, 0.5926386117935181, -0.3690603971481323, -0.32460880279541016, -1.2795459032058716, -0.8165239691734314, 0.709480881690979, 0.2701178789138794, 0.9802457690238953, -0.0701611340045929, -0.6116199493408203, 0.24568700790405273, 0.20503422617912292, 0.1581215113401413, -0.14928887784481049, -0.7463715076446533, -0.5018750429153442, 0.37223610281944275, -0.7483909130096436, 0.86213618516922, -0.6330387592315674, 0.07322067022323608, 0.37929821014404297, 0.25545498728752136, 0.7257024049758911, 0.8462256193161011, 0.6693955063819885, -1.0646328926086426, -1.3783607482910156, 0.41840994358062744, 0.8803555965423584, 1.010439395904541, -0.1221734806895256, 1.4454370737075806, 0.13689060509204865, 0.2994281053543091, -0.2907547354698181, -0.4738699793815613, -0.9733551144599915, -0.233660027384758, 0.00482358830049634, 0.16146399080753326, 0.863555371761322, -0.3495651185512543, -0.9926356077194214, 0.31087350845336914, -0.5653623342514038, 1.1633623838424683, -0.027032900601625443, 0.5360268354415894, -0.09857599437236786, 0.09738022834062576, -0.4539937674999237, 0.2663116157054901, -0.3239697217941284, 1.0347509384155273, -0.3595726191997528, -0.16288580000400543, 0.18742267787456512, 0.14450067281723022, 0.5391765236854553, 0.23792731761932373, -0.515561044216156, -0.7803137302398682, -0.02590620145201683, -0.5429465174674988, -0.6610206961631775, -0.21110719442367554, -0.7580389976501465, 0.0008373185410164297, 1.0586360692977905, 0.22152642905712128, -0.8949768543243408, -0.14909930527210236, 0.3614974915981293, 0.26182323694229126, 0.8394150733947754, -0.8415560722351074, 0.6861683130264282, -0.12538351118564606, 1.021354079246521, -0.6510640978813171, 0.11790761351585388, 1.804857850074768, 0.9733820557594299, -0.02075130119919777, 0.2697005271911621, -0.18122076988220215, 0.1828332543373108, -0.328197181224823, -0.527631402015686, -0.6068822145462036, 0.18795113265514374, 0.07198554277420044, -0.47342702746391296, -0.355643093585968, 0.4469601511955261, 1.6224863529205322, -0.365937203168869, -0.35894671082496643, 0.3848041892051697, 0.3245396614074707, 0.3350641131401062, 0.5523439645767212, -0.5061169862747192, -0.14708161354064941, -0.0633285716176033, -0.6128767728805542, 0.7076971530914307, 0.008315988816320896, 0.9529901742935181, 0.4765057861804962, -0.10762520879507065, 0.21298304200172424, 0.5303286910057068, 0.6620481610298157, 0.41382139921188354, -0.5368096232414246, 0.4091760814189911, -0.33841678500175476, -0.044799838215112686, 0.6879211664199829, 0.8840826153755188, -0.52203768491745, 0.5644141435623169, 0.023275887593626976, 0.7631948590278625, 0.17587096989154816, -0.16024887561798096, -0.42426788806915283, -0.2195422500371933, -0.6401194334030151, -0.19234074652194977, 0.29334327578544617, -0.41734185814857483, 0.6881492733955383, 0.8274067044258118, -0.6357226967811584, 0.7630029916763306, -0.9363886713981628, 0.10672346502542496, -0.6451970338821411, 0.8015244007110596, 0.6038411855697632, 0.15723051130771637, -0.1481458842754364, 1.070845127105713, 0.9097219705581665, 0.29731786251068115, 0.3085783123970032, 0.33978453278541565, 0.032117851078510284, -0.8394066691398621, -0.704123318195343, -0.8747207522392273, -0.9438508152961731, 0.5698736310005188, -0.575356662273407, 1.3364503383636475, -0.2898997962474823, 0.34793975949287415, -0.003127666423097253, 0.3577483892440796, 1.0860579013824463, 0.6273171901702881, -0.35036027431488037, 0.005921726115047932, -0.28069794178009033, 0.36050936579704285, 0.5177604556083679, -0.0001841761259129271, 0.5608431100845337, -0.47369518876075745, 0.32896867394447327, 0.786850094795227, -0.3159591853618622, 0.8458565473556519, 0.4803902804851532, -0.1856343299150467, -0.5798144340515137, 0.5761125087738037, 0.6370242834091187, -0.004474983084946871, 0.20194952189922333, 0.5755088925361633, -0.8361338376998901, 0.24482551217079163, -0.2637597322463989, 1.207921028137207, 0.6111018061637878, 0.03748708590865135, 0.4844779372215271, -0.3951207995414734, -1.3073539733886719, -0.8862453103065491, -0.4100310802459717, -1.0486856698989868, 0.6465068459510803, 0.503510057926178, 0.1095266118645668, -0.18653464317321777, 0.6964017748832703, -0.7708088159561157, 0.9458003044128418, 0.06833943724632263, 0.3327791392803192, -0.5247425436973572, -0.7898098230361938, -0.8346425294876099, -0.40701955556869507, -0.030614973977208138, 0.5741680860519409, 0.19251303374767303, 1.5923815965652466, -1.2409636974334717, 0.468949556350708, -0.28935176134109497, -0.16073574125766754, 0.23160620033740997, -0.09170471131801605, -1.1645026206970215, 0.27255988121032715, 0.9851375222206116, -0.1872750073671341, 0.07068005204200745, -0.4212716519832611, 0.04918881878256798, 0.08219658583402634, -0.13653601706027985, 0.38676074147224426, 0.10328420996665955, -0.6266235709190369, 0.7866236567497253, 0.2953190505504608, -1.2382779121398926, 0.2745097279548645, -0.8266432881355286, 0.8514528274536133, 0.6956663131713867, -0.04096183553338051, -0.5126984715461731, -0.2726745903491974, 0.32561638951301575, -0.46399015188217163, -0.5996016263961792, 0.11239074170589447, 0.4182153642177582, -0.1608532965183258, -0.20504948496818542, -0.41073814034461975, -0.34800300002098083, -0.654323935508728, 0.2558882534503937, 0.6662803888320923, -1.238450050354004, 0.19729064404964447, -0.08246209472417831, -0.23152939975261688, -0.6449491381645203, 0.02385120280086994, -0.4365692734718323, 0.45930755138397217, 0.24413247406482697, 0.37322506308555603, -0.0063864667899906635, -0.0632590502500534, -0.14196446537971497, 0.690072238445282, 0.0432916097342968, 0.29810309410095215, -0.3203046917915344, -0.1703900545835495, 0.07886196672916412, -0.48431169986724854, -1.081897497177124, -0.19185584783554077, 0.1883329600095749, 1.2514230012893677, 0.08987406641244888, -0.565818190574646, -0.5340800881385803, 0.18537454307079315, -0.3302571177482605, -0.09048681706190109, 0.10802314430475235, -0.12922190129756927, -0.6803677678108215, -0.09520523995161057, 0.1535983681678772, 0.4881635904312134, -0.369880735874176, -0.003459369298070669, -0.44727545976638794, 1.0422526597976685, 0.22536994516849518, 0.5518327355384827, 0.18536540865898132, -0.0416448637843132, -0.22617107629776, 0.6602991223335266, 0.7404810786247253, 0.07019465416669846, -1.3097410202026367, -0.5599864721298218, 0.10080903023481369, 0.5980716347694397, 0.25575077533721924, -0.27068597078323364, 0.10022909939289093, -0.06904184073209763, -0.5292938351631165, -0.5904807448387146, 0.9500393271446228, 0.530655562877655, -0.48398712277412415, 0.35412877798080444, 0.0028892585542052984, 0.4148234724998474, 0.3453010618686676, 0.43527838587760925, -0.8097705841064453, -0.22209374606609344, 0.3747311234474182, -0.3542559742927551, 0.7374681830406189, 0.9490053057670593, -0.6417780518531799, 0.2322782278060913, -0.40836063027381897, 0.22654250264167786, 0.11067316681146622, 0.08523060381412506, 0.7320060133934021, 0.8937069773674011, -0.32760941982269287, -0.2431272715330124, 0.6448274254798889, 0.006719397380948067, -0.5848249793052673, 0.10292788594961166, -0.3746761679649353, 0.46982648968696594, 0.42334288358688354, -0.27272337675094604, -0.648339033126831, -0.11861386895179749, -0.2283126711845398, 0.05915886536240578, 0.12968885898590088, 0.6662554740905762, -0.09871206432580948, 0.1490783393383026, 0.29258424043655396, -0.7457053065299988, 0.11912675946950912, -0.1436450481414795, 0.18132978677749634, 0.23885786533355713, 0.6455080509185791, 0.23540453612804413, 0.5295729041099548, 0.17321518063545227, -0.11540737748146057, 0.6459141969680786, 0.5781962871551514, 0.11659537255764008, -0.8632749319076538, 0.13543076813220978, -1.4457874298095703, -0.4516393542289734, 0.767691969871521, 0.03675554320216179, 0.029188182204961777, -0.1958097219467163, 1.3714771270751953, 0.2582204341888428, 0.34041354060173035, -0.2351355105638504, -0.48901528120040894, 0.9638146758079529, 0.24066145718097687, -0.7204377055168152, 0.2859817147254944, 0.16315658390522003, -0.8897956609725952, 0.5668706893920898, -0.33704936504364014, -0.35124489665031433, -0.4460917115211487, -0.01797442138195038, 0.32455945014953613, -1.0259281396865845, 0.27886345982551575, -0.572890043258667, -1.0184946060180664, 0.5991970300674438, -2.6280357837677, -1.4437302350997925, 0.58961021900177, 0.31362220644950867, -1.2784533500671387, 0.7747941017150879, -0.29504361748695374, -0.5002619028091431, 0.1647527813911438, -0.9315197467803955, -0.04174022004008293, 0.2793743908405304, -0.016030261293053627, -1.8937828540802002, 0.15579266846179962, -0.27929770946502686, -0.1720999926328659, -0.3155008852481842, -0.8099032640457153, 0.07689058035612106, -0.6843327283859253, -0.9894729256629944, -0.34014803171157837, -0.3878900110721588, 0.46950218081474304, 0.11866743117570877, -0.585730254650116, -0.5667592883110046, -0.5623405575752258, -0.1851428747177124, -1.0151422023773193, 0.785555362701416, -0.6124553084373474, 0.21863409876823425, 0.018792442977428436, -0.4138035774230957, -0.07167085260152817, 0.3028808534145355, 0.029922155663371086, 0.9041100144386292, 0.44312670826911926, 0.20193032920360565, -0.36451518535614014, -0.41771599650382996, -0.08806301653385162, 0.18400759994983673, 0.2580394446849823, -0.7235641479492188, -0.6935228109359741, 0.12346242368221283, -0.677047610282898, -0.6167114973068237, 0.7835699915885925, -0.8936179280281067, 0.11156317591667175, -0.1845850646495819, -0.5309389233589172, -0.0017535921651870012, -0.5635697245597839, -0.35673630237579346, -0.09964924305677414, -0.18028700351715088, 0.09950099140405655, 0.42145079374313354, -0.7919538021087646, -0.08075973391532898, 0.03674964979290962, 0.087778240442276, -0.08972124010324478, 0.09053005278110504, 0.32727187871932983, 1.099839210510254, 0.21231424808502197, -0.6147885918617249, -0.7356711626052856, -0.17269442975521088, 0.2659342885017395, 0.5581371784210205, 0.9857246279716492, 0.09831945598125458, -0.8441115617752075, -0.20062099397182465, 1.0930840969085693, -0.16305187344551086, 0.6802806258201599, 0.3943570554256439, -0.11207529157400131, 0.41415518522262573, 0.3984009027481079, -0.9944313764572144, -0.46710872650146484, 0.28204992413520813, -0.27676716446876526, 0.6314011812210083, -0.7567832469940186, -0.3416158854961395, 0.31715506315231323, -0.11441924422979355, -0.6724937558174133, 0.7739596366882324, -0.008762292563915253, 0.6771408915519714, 0.19405066967010498, -1.28264319896698, 0.41091102361679077, 0.8191521167755127, 1.28171968460083, -0.6953955292701721, 0.6880326271057129, -1.0800328254699707, -0.44266021251678467, -0.029582565650343895, 1.6364192962646484, -0.8113556504249573, 0.6562178730964661, -0.18092390894889832, 0.13263148069381714, 1.2738195657730103, -0.009672208689153194, -0.6389205455780029, 0.6176801323890686, -0.31582513451576233, 0.37519118189811707, -0.4985353648662567, -0.1924028992652893, 0.8579932451248169, -0.15753252804279327, 0.5354517102241516, 1.7348612546920776, 0.0034207452554255724, 1.1180821657180786, -0.4338552951812744, -0.3379805386066437, 0.3482387959957123, -0.5799307227134705, -0.8907474279403687, 0.2380683869123459, 0.2031865119934082, -0.5481664538383484, -0.4243927001953125, 0.16923774778842926, 1.2135009765625, 0.09747786074876785, 0.5459436774253845, 0.29067113995552063, 0.22078002989292145, -0.32693156599998474, 0.19677208364009857, 0.9405973553657532, -0.044078145176172256, 0.055888645350933075, 1.40019953250885, 0.5460536479949951, -0.4805629849433899, 0.06984597444534302, -0.9742829203605652, 0.07936017215251923, 0.1679016649723053, 1.0954384803771973, 0.5620002746582031, -0.3037033677101135, -0.21693579852581024, -0.3147624135017395, -0.3151693046092987, -0.700085461139679, -1.4343602657318115, -0.8318490386009216, -0.504575252532959, 0.04140695184469223, 1.0127322673797607, -0.8336066603660583, -1.0759133100509644, 0.0027866053860634565, -0.9073717594146729, -0.6929689049720764, 0.08161697536706924, -0.09383253753185272, 0.04851039499044418, 0.39389991760253906, -0.10351228713989258, -0.4893489480018616, -0.04831063002347946, 0.041345417499542236, 0.15869632363319397, -0.6815789937973022, -0.5368524789810181, 0.4118368923664093, 0.8419997096061707, 0.2904811203479767, 0.4371465742588043, 0.3034863770008087, -0.7295498251914978, 0.4479908347129822, -0.045194193720817566, -0.5676854252815247, 0.1839543581008911, 0.1262969821691513, 0.13416656851768494, -1.1309670209884644, -0.3076391816139221, 0.9416760206222534, 0.3170031011104584, 0.653302013874054, -0.13822777569293976, -0.2771894931793213, -0.30945083498954773, -1.0012212991714478, -0.8658934831619263, -0.6104870438575745, -0.20658616721630096, 0.7312355041503906, 0.10981849581003189, 0.864031195640564, -0.2308521270751953, -0.036061324179172516, -1.7118371725082397, -0.4827217161655426, -0.6968856453895569, 0.05457936227321625, 0.9289034605026245, 0.8848763704299927, -1.0793818235397339, 0.011183926835656166, -0.46146467328071594, 1.1969786882400513, -0.3436061143875122, -0.15727263689041138, -0.5220623016357422, -0.20031535625457764, -0.13570661842823029, 0.15774089097976685, 0.15234488248825073, 0.24361681938171387, -0.03781828284263611, -0.13837113976478577, 0.6975474953651428, 0.5791419148445129, 0.5427072644233704, -0.1308922916650772, 0.5639520287513733, -0.0810820460319519, -0.572213888168335, -1.1993939876556396, -0.864782989025116, 0.3088684380054474]"
sc-copilot/INITIALISE SMART CONTRACT/initialise_smart_contract_test.py,"import random
import json
from datetime import datetime, timedelta, timezone, date
from decimal import Decimal
from json import dumps
from dateutil.relativedelta import relativedelta

from common.test_utils.contracts.unit.common import ContractModuleTest
from common.test_utils.contracts.unit.types_extension import (
    DEFAULT_ADDRESS,
    Phase,
    Balance,
    Rejected,
    Tside,
    RejectedReason,
    UnionItemValue,
    OptionalValue,
    Parameter,
)


DEFAULT_DENOMINATION = ""EUR""
DEFAULT_DATE = datetime(2023, 5, 26)
DEFAULT_ASSET = ""COMMERCIAL_BANK_MONEY""
ACCOUNT_ID = ""Main account""
DEFAULT_DATE = datetime(month=11, day=22, year=2022)

# ACCOUNTS
""""""
Put here the internal accounts that it's going to be used in the smart contract
""""""

# ADDRESSES
""""""
Put here the addresses that it's going to be used in the smart contract
""""""

CONTRACT_MODULES_FILE = ""put here the path for the smart contract script file""


# Functions to help testing
def has_calls(vault, call_string):
    for i in vault.mock_calls:
        if call_string in str(i):
            return True
    return False


def count_calls(vault, call_string):
    count = 0
    for i in vault.mock_calls:
        if call_string in str(i):
            count += 1
    return count


def create_balances(addresses):
    balance_dict = {}
    for address in addresses:
        balance_dict[(address[""key""], DEFAULT_ASSET, ""EUR"", Phase.COMMITTED)] = Balance(
            net=address[""value""]
        )
    return balance_dict


def create_execution_id():
    return ""MOCK_{}_{}_{}"".format(
        random.randint(0, 1000), random.randint(0, 1000), random.randint(0, 1000)
    )


# Default values
""Put here the default values for each parameter, Key: parameter name, value: parameter value""
default_parameters_values = {}


class ContractModulesTest(ContractModuleTest):
    contract_modules_file = CONTRACT_MODULES_FILE

    def create_postings_batch(self, posting_instructions, effective_date):
        """"""
        Creates a posting instruction batch to be used in the vault object.
        """"""
        return self.mock_posting_instruction_batch(
            effective_date,
            denomination=""EUR"",
            posting_instructions=posting_instructions,
        )

    def setUp(self):
        """"""
        Instantiate common used objects for the testing cases.
        """"""
        super().setUp()
        self.effective_date = datetime.utcnow()
        self.instruction_details = {
            ""event_type"": ""DIRECT_DEBIT"",
            ""functional_domain"": ""PSU"",
            ""transfer_transaction_label"": ""LABEL"",
            ""transfer_transaction_short_id"": ""ID"",
            ""direct_debit_type"": ""FRAI"",
            ""invoice_identifier"": ""ID"",
            ""analytic_imputation"": ""ANALYTIC"",
            ""direct_debit_local_identifier"": ""DIR_DEBIT_ID"",
            ""TVA"": ""TVA"",
            ""operation_code"": ""RQD"",
            ""amount_before_tax"": ""0"",
            ""amount_with_TVA"": ""0"",
            ""Facture"": ""01"",
        }
        self.posting_instruction = self.mock_posting_instruction(
            amount=10,
            credit=10,
            value_timestamp=self.effective_date + timedelta(days=1),
            instruction_details=self.instruction_details,
        )
        self.test_postings = self.create_postings_batch(
            [self.posting_instruction], self.effective_date
        )
        self.balance_dict = create_balances(
            [
                {""key"": DEFAULT_ADDRESS, ""value"": Decimal(10)},
            ]
        )
        self.balance_dict[
            (
                f""INVOICE_PSU_FC_{self.effective_date.strftime('%Y-%m-%d')}"",
                ""COMMERCIAL_BANK_MONEY"",
                ""EUR"",
                Phase.COMMITTED,
            )
        ] = Balance(net=Decimal(10))

        self.balance_ts = [(self.effective_date, self.balance_dict)]
        self.mock_vault = self.create_mock(
            balance_ts=self.balance_ts,
            denomination=""EUR"",
            postings=self.test_postings,
            **default_parameters_values,
        )
        self.mock_vault.get_hook_execution_id.return_value = create_execution_id()

    def create_mock(
        self,
        balance_ts=None,
        postings=None,
        creation_date=DEFAULT_DATE,
        client_transaction=None,
        flags=None,
        **kwargs,
    ):
        balance_ts = balance_ts or []
        postings = postings or []
        client_transaction = client_transaction or {}
        flags = flags or []

        params = {
            key: {""value"": value}
            for key, value in locals().items()
            if key not in self.locals_to_ignore
        }
        parameter_ts = self.param_map_to_timeseries(params, creation_date)
        return super().create_mock(
            balance_ts=balance_ts,
            parameter_ts=parameter_ts,
            postings=postings,
            creation_date=creation_date,
            client_transaction=client_transaction,
            flags=flags,
            **kwargs,
        )

    def test_number_to_string(self):
        result = self.run_function(""_number_to_string"", self.mock_vault, number=1000)
        self.assertEqual(
            ""1000.00"",
            result,
        )
        result = self.run_function(""_number_to_string"", self.mock_vault, number=54.12)
        self.assertEqual(
            ""54.12"",
            result,
        )
        result = self.run_function(
            ""_number_to_string"", self.mock_vault, number=3.14159265
        )
        self.assertEqual(
            ""3.14"",
            result,
        )
        result = self.run_function(""_number_to_string"", self.mock_vault, number=1.6666)
        self.assertEqual(
            ""1.67"",
            result,
        )

    def test_make_random_numberp(self):
        max_value = 10
        for i in range(20):
            result = self.run_function(
                ""_make_random_number"", self.mock_vault, max=max_value
            )
            self.assertLessEqual(result, max_value)

    def test_to_decimal(self):
        inputs = [
            (""0.1"", Decimal(""0.1"")),
            (2, Decimal(""2"")),
            (3.5, Decimal(""3.5"")),
            (Decimal(""0""), Decimal(""0"")),
        ]
        for input in inputs:
            result = self.run_function(""to_decimal"", self.mock_vault, value=input[0])
            self.assertEqual(input[1], result)

    def test_round_to_precision(self):
        result = self.run_function(
            ""_round_to_precision"",
            self.mock_vault,
            precision=2,
            amount=Decimal(3.14159265),
        )
        self.assertEqual(
            Decimal(""3.14""),
            result,
        )

    def test_hollidays_list(self):
        result = self.run_function(
            ""_hollidays_list"", self.mock_vault, date=datetime(day=2, month=2, year=2024)
        )
        self.assertEqual(
            [
                datetime(day=1, month=1, year=2024),
                datetime(day=1, month=4, year=2024),
                datetime(day=1, month=5, year=2024),
                datetime(day=8, month=5, year=2024),
                datetime(day=9, month=5, year=2024),
                datetime(day=20, month=5, year=2024),
                datetime(day=14, month=7, year=2024),
                datetime(day=15, month=8, year=2024),
                datetime(day=1, month=11, year=2024),
                datetime(day=11, month=11, year=2024),
                datetime(day=25, month=12, year=2024),
            ],
            result,
        )

    def test_gauss_easter(self):
        dates = [
            [""4"", ""23"", ""2000""],
            [""4"", ""15"", ""2001""],
            [""3"", ""31"", ""2002""],
            [""4"", ""20"", ""2003""],
            [""4"", ""11"", ""2004""],
            [""3"", ""27"", ""2005""],
            [""4"", ""16"", ""2006""],
            [""4"", ""8"", ""2007""],
            [""3"", ""23"", ""2008""],
            [""4"", ""12"", ""2009""],
            [""4"", ""4"", ""2010""],
            [""4"", ""24"", ""2011""],
            [""4"", ""8"", ""2012""],
            [""3"", ""31"", ""2013""],
            [""4"", ""20"", ""2014""],
            [""4"", ""5"", ""2015""],
            [""3"", ""27"", ""2016""],
            [""4"", ""16"", ""2017""],
            [""4"", ""1"", ""2018""],
            [""4"", ""21"", ""2019""],
            [""4"", ""12"", ""2020""],
            [""4"", ""4"", ""2021""],
            [""4"", ""17"", ""2022""],
            [""4"", ""9"", ""2023""],
            [""3"", ""31"", ""2024""],
            [""4"", ""20"", ""2025""],
            [""4"", ""5"", ""2026""],
            [""3"", ""28"", ""2027""],
            [""4"", ""16"", ""2028""],
            [""4"", ""1"", ""2029""],
            [""4"", ""21"", ""2030""],
            [""4"", ""13"", ""2031""],
            [""3"", ""28"", ""2032""],
            [""4"", ""17"", ""2033""],
            [""4"", ""9"", ""2034""],
            [""3"", ""25"", ""2035""],
            [""4"", ""13"", ""2036""],
            [""4"", ""5"", ""2037""],
            [""4"", ""25"", ""2038""],
            [""4"", ""10"", ""2039""],
            [""4"", ""1"", ""2040""],
            [""4"", ""21"", ""2041""],
            [""4"", ""6"", ""2042""],
            [""3"", ""29"", ""2043""],
            [""4"", ""17"", ""2044""],
            [""4"", ""9"", ""2045""],
            [""3"", ""25"", ""2046""],
            [""4"", ""14"", ""2047""],
            [""4"", ""5"", ""2048""],
            [""4"", ""18"", ""2049""],
            [""4"", ""10"", ""2050""],
            [""4"", ""2"", ""2051""],
            [""4"", ""21"", ""2052""],
            [""4"", ""6"", ""2053""],
            [""3"", ""29"", ""2054""],
            [""4"", ""18"", ""2055""],
            [""4"", ""2"", ""2056""],
            [""4"", ""22"", ""2057""],
            [""4"", ""14"", ""2058""],
            [""3"", ""30"", ""2059""],
            [""4"", ""18"", ""2060""],
            [""4"", ""10"", ""2061""],
            [""3"", ""26"", ""2062""],
            [""4"", ""15"", ""2063""],
            [""4"", ""6"", ""2064""],
            [""3"", ""29"", ""2065""],
            [""4"", ""11"", ""2066""],
            [""4"", ""3"", ""2067""],
            [""4"", ""22"", ""2068""],
            [""4"", ""14"", ""2069""],
            [""3"", ""30"", ""2070""],
            [""4"", ""19"", ""2071""],
            [""4"", ""10"", ""2072""],
            [""3"", ""26"", ""2073""],
            [""4"", ""15"", ""2074""],
            [""4"", ""7"", ""2075""],
            [""4"", ""19"", ""2076""],
            [""4"", ""11"", ""2077""],
            [""4"", ""3"", ""2078""],
            [""4"", ""23"", ""2079""],
            [""4"", ""7"", ""2080""],
            [""3"", ""30"", ""2081""],
            [""4"", ""19"", ""2082""],
            [""4"", ""4"", ""2083""],
            [""3"", ""26"", ""2084""],
            [""4"", ""15"", ""2085""],
            [""3"", ""31"", ""2086""],
            [""4"", ""20"", ""2087""],
            [""4"", ""11"", ""2088""],
            [""4"", ""3"", ""2089""],
            [""4"", ""16"", ""2090""],
            [""4"", ""8"", ""2091""],
            [""3"", ""30"", ""2092""],
            [""4"", ""12"", ""2093""],
            [""4"", ""4"", ""2094""],
            [""4"", ""24"", ""2095""],
            [""4"", ""15"", ""2096""],
            [""3"", ""31"", ""2097""],
            [""4"", ""20"", ""2098""],
            [""4"", ""12"", ""2099""],
        ]

        for date in dates:
            result = self.run_function(""_gauss_easter"", self.mock_vault, y=int(date[2]))
            self.assertEqual(
                datetime(day=int(date[1]), month=int(date[0]), year=int(date[2])),
                result,
            )

    def test_periods_per_year_returning_type(self):
        result = self.run_function(
            ""_get_periods_per_year"", None, payment_schedule_frequency=""S""
        )
        self.assertTrue(isinstance(result, int))
        self.assertEqual(6, result)

    def test_date_to_string(self):
        result = self.run_function(
            ""_date_to_string"",
            self.mock_vault,
            date=datetime(day=15, month=8, year=2023),
        )
        self.assertEqual(""15-08-2023"", result)

    def test_date_in_range(self):
        result = self.run_function(
            ""_date_in_range"",
            self.mock_vault,
            start_date=datetime(day=15, month=8, year=2023),
            end_date=datetime(day=15, month=10, year=2023),
            query_date=datetime(day=10, month=9, year=2023),
        )
        self.assertTrue(result)

        result = self.run_function(
            ""_date_in_range"",
            self.mock_vault,
            start_date=datetime(day=15, month=8, year=2023),
            end_date=datetime(day=15, month=10, year=2023),
            query_date=datetime(day=15, month=9, year=2024),
        )
        self.assertFalse(result)

    def test_get_last_day_of_month(self):
        result = self.run_function(
            ""_get_last_day_of_month"",
            self.mock_vault,
            queried_date=datetime(day=1, month=4, year=2024),
        )
        self.assertEqual(datetime(day=30, month=4, year=2024).date(), result.date())

        result = self.run_function(
            ""_get_last_day_of_month"",
            self.mock_vault,
            queried_date=datetime(day=1, month=2, year=2024),
        )
        self.assertEqual(datetime(day=29, month=2, year=2024).date(), result.date())

    def test_is_the_last_day_of_month(self):
        result = self.run_function(
            ""_is_the_last_day_of_month"",
            self.mock_vault,
            queried_date=datetime(day=1, month=4, year=2024),
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_is_the_last_day_of_month"",
            self.mock_vault,
            queried_date=datetime(day=29, month=2, year=2024),
        )
        self.assertTrue(result)

    def test_string_to_dateg(self):
        result = self.run_function(
            ""_string_to_date"", self.mock_vault, date_string=""15-08-2023""
        )
        self.assertEqual(datetime(day=15, month=8, year=2023), result)

    def test_datetime_to_string(self):
        result = self.run_function(
            ""_datetime_to_string"",
            self.mock_vault,
            date=datetime(
                day=1, month=2, year=2024, hour=9, minute=30, second=5, microsecond=560
            ),
        )
        self.assertEqual(result, ""01-02-2024_09:30:05.000560"")

    def test_make_timestamp(self):
        result = self.run_function(
            ""_make_timestamp"",
            self.mock_vault,
        )
        today = datetime.now()
        self.assertEqual(
            result.rsplit(""_"", 1)[0],
            f""{today.day:02d}_{today.month:02d}_{today.year:04d}"",
        )

    def test_current_milli_time(self):
        result = self.run_function(
            ""current_milli_time"", self.mock_vault, timestamp=""1000000""
        )
        self.assertEqual(
            ""1"",
            result,
        )

    def test_calculate_new_day(self):
        result = self.run_function(
            ""_calculate_new_day"",
            self.mock_vault,
            today=datetime(day=1, month=4, year=2024),
            reduction_frequency=""M"",
        )
        self.assertEqual(datetime(day=1, month=5, year=2024).date(), result.date())

        result = self.run_function(
            ""_calculate_new_day"",
            self.mock_vault,
            today=datetime(day=1, month=4, year=2024),
            reduction_frequency=""L"",
        )
        self.assertEqual(datetime(day=1, month=4, year=2024).date(), result.date())

    def test_get_number_of_days_between_dates(self):
        expected_outputs = [
            {
                ""start_date"": datetime(day=2, month=10, year=2023),
                ""end_date"": datetime(day=2, month=10, year=2023) + timedelta(days=30),
                ""result"": 30,
            },
            {
                ""start_date"": datetime(day=2, month=10, year=2023),
                ""end_date"": datetime(day=2, month=10, year=2023) + timedelta(days=10),
                ""result"": 10,
            },
            {
                ""start_date"": datetime(day=2, month=10, year=2023) - timedelta(days=30),
                ""end_date"": datetime(day=2, month=10, year=2023),
                ""result"": 30,
            },
            {
                ""start_date"": datetime(day=2, month=10, year=2023) - timedelta(days=10),
                ""end_date"": datetime(day=2, month=10, year=2023),
                ""result"": 10,
            },
        ]
        for expected_output in expected_outputs:
            result = self.run_function(
                ""_get_number_of_days_between_dates"",
                self.mock_vault,
                start_date=expected_output[""start_date""],
                end_date=expected_output[""end_date""],
            )
            self.assertEqual(result, expected_output[""result""])

    def test_validate_union_shape(self):
        result = self.run_function(
            ""_validate_union_shape"",
            self.mock_vault,
            value=""constant_capital"",
            keys=[""constant_capital"", ""constant_payment"", ""in_fine""],
        )
        self.assertTrue(result)
        result = self.run_function(
            ""_validate_union_shape"",
            self.mock_vault,
            value=""x"",
            keys=[""constant_capital"", ""constant_payment"", ""in_fine""],
        )
        self.assertFalse(result)

    def test_validate_date_string(self):
        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""24-09-2024"",
        )
        self.assertTrue(result)

        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""2--09-2024"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""24-0.9-2024"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""31-02-2024"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""2024-02-31"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_date_string"",
            self.mock_vault,
            date_string=""2024-31-02"",
        )
        self.assertFalse(result)

    def test_validate_number_string(self):
        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""1.9"",
        )
        self.assertTrue(result)

        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""1"",
        )
        self.assertTrue(result)

        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""1a"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""-1.9"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""1.9.9"",
        )
        self.assertFalse(result)

        result = self.run_function(
            ""_validate_number_string"",
            self.mock_vault,
            number_string=""1,9"",
        )
        self.assertFalse(result)

    def test_validate_phase(self):
        self.run_function(""_validate_phase"", self.mock_vault, phase=""MANAGEMENT"")

        with self.assertRaises(Rejected) as e:
            self.run_function(""_validate_phase"", self.mock_vault, phase=""CONTRACTING"")
        self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)

    def test_validate_status_code(self):
        self.run_function(
            ""_validate_status_code"", self.mock_vault, status_code=""APPROVED""
        )

        with self.assertRaises(Rejected) as e:
            self.run_function(
                ""_validate_status_code"", self.mock_vault, status_code=""DRAFT""
            )
        self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)

        with self.assertRaises(Rejected) as e:
            self.run_function(
                ""_validate_status_code"", self.mock_vault, status_code=""PENDING""
            )
        self.assertEqual(e.exception.reason_code, RejectedReason.CLIENT_CUSTOM_REASON)

    def test_get_parameter_decimal(self):
        """"""
        Test if the get_parameter returns the object of the parameter's type
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts, denomination=""EUR"", test_decimal=Decimal(""10"")
        )
        result = self.run_function(
            ""_get_parameter"", mock_vault, vault=mock_vault, name=""test_decimal""
        )
        self.assertTrue(isinstance(result, Decimal))

    def test_get_parameter_decimal_at(self):
        """"""
        Test if the get_parameter returns the object of the parameter's type using the 'at' argument
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts, denomination=""EUR"", test_decimal=Decimal(""10"")
        )
        result = self.run_function(
            ""_get_parameter"",
            mock_vault,
            vault=mock_vault,
            name=""test_decimal"",
            at=self.effective_date,
        )
        self.assertTrue(isinstance(result, Decimal))

    def test_get_parameter_optional(self):
        """"""
        Test if the get_parameter returns the object of the parameter's type using the 'at' argument
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts,
            denomination=""EUR"",
            test_decimal_optional=OptionalValue(Decimal(""10"")),
        )
        result = self.run_function(
            ""_get_parameter"",
            mock_vault,
            vault=mock_vault,
            name=""test_decimal_optional"",
            optional=True,
        )
        self.assertTrue(isinstance(result, Decimal))

    def test_get_parameter_union(self):
        """"""
        Test if the get_parameter returns the object of the parameter's type using the 'at' argument
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts,
            denomination=""EUR"",
            test_union=UnionItemValue(""S""),
        )
        result = self.run_function(
            ""_get_parameter"",
            mock_vault,
            vault=mock_vault,
            name=""test_union"",
            union=True,
        )
        self.assertTrue(isinstance(result, str))

    def test_get_parameter_json(self):
        """"""
        Test if the get_parameter returns the object of the parameter's type using the 'is_json' argument
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts,
            denomination=""EUR"",
            atypical_payment_schedule=json.dumps([{""key"": ""value""}]),
        )
        result = self.run_function(
            ""_get_parameter"",
            mock_vault,
            vault=mock_vault,
            name=""atypical_payment_schedule"",
            is_json=True,
        )
        self.assertTrue(isinstance(result, list))
        self.assertTrue(isinstance(result[0], dict))

    def test_get_parameter_json_without_the_is_json_argument(self):
        """"""
        Test if the get_parameter returns the a str type if the parameter is a dict but it's not used the 'is_json' argument
        """"""
        mock_vault = self.create_mock(
            balance_ts=self.balance_ts,
            denomination=""EUR"",
            atypical_payment_schedule=json.dumps([{""key"": ""value""}]),
        )
        result = self.run_function(
            ""_get_parameter"",
            mock_vault,
            vault=mock_vault,
            name=""atypical_payment_schedule"",
        )
        self.assertTrue(isinstance(result, str))

    def test_get_list_from_parameter(self):
        result = self.run_function(
            ""_get_list_from_parameter"",
            self.mock_vault,
            parameter=json.dumps([9, ""A"", {}, True]),
        )
        self.assertEquals(result, [9, ""A"", {}, True])

        result = self.run_function(
            ""_get_list_from_parameter"",
            self.mock_vault,
            parameter=json.dumps([]),
        )
        self.assertEquals(result, [])

    def test_get_balance_at(self):
        """"""
        Simple test to check if the data is in the correct format and value
        """"""
        result = self.run_function(
            ""_get_balance_at"",
            self.mock_vault,
            vault=self.mock_vault,
            address=f""INVOICE_PSU_FC_{self.effective_date.strftime('%Y-%m-%d')}"",
            timestamp=self.effective_date,
        )
        self.assertTrue(isinstance(result, Decimal))
        self.assertEqual(10, result)

    def test_address_exists(self):
        """"""
        Test if the function returns the address in the correct value format
        """"""
        balances_addresses = [
            (
                self.balance_ts[0][1],
                f""INVOICE_PSU_FC_{self.effective_date.strftime('%Y-%m-%d')}"",
                True,
            ),
            ({}, f""INVOICE_PSU_FC_{self.effective_date.strftime('%Y-%m-%d')}"", False),
        ]
        for balance_address in balances_addresses:
            result = self.run_function(
                ""_address_exists"",
                self.mock_vault,
                balances=balance_address[0],
                name=balance_address[1],
            )

            self.assertTrue(isinstance(result, bool))
            self.assertEqual(balance_address[2], result)

    def test_get_all_addresses_returning_type(self):
        """"""
        Test if the function returns the address in the correct value format
        """"""
        result = self.run_function(
            ""_get_all_addresses"", self.mock_vault, balances=self.balance_ts[0][1]
        )

        self.assertTrue(isinstance(result, list))

        for item in result:
            self.assertTrue(isinstance(item, str))
        self.assertEqual([key[0] for key in self.balance_dict.keys()], result)

    def test_create_posting(self):
        result = self.run_function(
            ""_create_posting"",
            self.mock_vault,
            vault=self.mock_vault,
            amount=Decimal(""0""),
            denomination=""EUR"",
            from_account_id=""test"",
            from_account_address=""TESTADDRESSFROM"",
            to_account_id=""test"",
            to_account_address=""TESTADDRESSTO"",
            asset=""DEFAULT"",
            client_transaction_id=""ID"",
            instruction_details={},
        )
        self.assertEqual(
            count_calls(self.mock_vault, ""make_internal_transfer_instructions""), 0
        )
        result = self.run_function(
            ""_create_posting"",
            self.mock_vault,
            vault=self.mock_vault,
            amount=Decimal(""1000""),
            denomination=""EUR"",
            from_account_id=""test"",
            from_account_address=""TESTADDRESSFROM"",
            to_account_id=""test"",
            to_account_address=""TESTADDRESSTO"",
            asset=""DEFAULT"",
            client_transaction_id=""ID"",
            instruction_details={},
        )
        self.assertEqual(
            count_calls(self.mock_vault, ""make_internal_transfer_instructions""), 1
        )

    def test_get_parameter_from_paramter_list(self):
        result = self.run_function(
            ""_get_parameter_from_paramter_list"",
            self.mock_vault,
            vault=self.mock_vault,
            parameters={""phase"": Parameter(value=OptionalValue(""LITIGATION""))},
            parameter_name=""phase"",
            default_value=""CONTRACTING"",
            optional=True,
            union=False,
            is_parameter_type=True,
        )
        self.assertEqual(""LITIGATION"", result)

        result = self.run_function(
            ""_get_parameter_from_paramter_list"",
            self.mock_vault,
            vault=self.mock_vault,
            parameters={""phase"": OptionalValue(""LITIGATION"")},
            parameter_name=""phase"",
            default_value=""CONTRACTING"",
            optional=True,
            union=False,
            is_parameter_type=False,
        )
        self.assertEqual(""LITIGATION"", result)
",2024-02-28T00:00:00Z,Unknown,1.0,"[0.3236459493637085, 1.0437562465667725, -2.107100009918213, -0.5781261920928955, 1.5135465860366821, 0.0011049248278141022, 0.2648382782936096, 0.43159401416778564, 0.7051190733909607, 0.5764122009277344, -1.9261833429336548, 0.5818333625793457, 0.8239378929138184, 0.3464180827140808, -0.44702452421188354, -0.7504572868347168, -0.22265082597732544, -1.350435733795166, -0.34450146555900574, -0.6946927905082703, 0.3832446336746216, -1.070788860321045, -0.21163973212242126, 0.3530735969543457, 0.9174540638923645, 0.6669808626174927, -0.8233159780502319, 0.1958933025598526, -1.15828275680542, -0.19519111514091492, -0.45803606510162354, 0.3754241466522217, 0.928912341594696, -0.3106304407119751, -0.7530929446220398, -0.32241761684417725, 0.8205981254577637, 0.05841546878218651, -0.09415292739868164, -0.3713778257369995, 0.035512566566467285, -0.5799070596694946, 0.2156466394662857, 0.5099829435348511, 0.5020421147346497, 0.05462287738919258, 1.0219818353652954, 0.4707973003387451, 0.12134823948144913, 0.10208164155483246, 0.040927112102508545, -0.07562735676765442, 0.14728745818138123, -0.26245927810668945, 1.4163421392440796, 0.5539910793304443, -1.2408688068389893, 0.8811460733413696, 0.832711935043335, -0.5147925019264221, 0.378881573677063, 0.6632328033447266, 0.15792453289031982, 0.78998863697052, 0.3777116537094116, -0.2246265858411789, -0.015616439282894135, 0.2863602638244629, -0.39508092403411865, -0.03559718281030655, 0.2790660262107849, 0.4747437536716461, 0.14674586057662964, -0.5946197509765625, -0.8491714596748352, 1.0145065784454346, -0.07704199850559235, -1.1489492654800415, -0.3841034770011902, -0.04300673305988312, 0.6749509572982788, 0.007753794081509113, 0.5673985481262207, -0.10506927222013474, 0.39083415269851685, -0.7335270643234253, -0.01960892416536808, -0.21880148351192474, -0.21451511979103088, 1.3330485820770264, -0.7480664253234863, 0.7519693374633789, -0.4540178179740906, 0.33818143606185913, -1.468679666519165, -0.20542171597480774, -0.5326799154281616, 0.36301350593566895, 0.04934397339820862, 0.14012785255908966, -0.016859102994203568, 0.028517527505755424, 0.4450426995754242, -0.2804272472858429, -0.30260640382766724, 0.9691629409790039, 0.9029182195663452, -0.30244699120521545, 0.508155882358551, -0.6783571243286133, -0.38202211260795593, -0.5734585523605347, -0.7324749231338501, -0.5702140927314758, -0.3353041410446167, 0.00734807550907135, 0.45237937569618225, -0.10639800131320953, -0.7305080890655518, 0.4921248257160187, -0.2029881626367569, -0.7198654413223267, 0.22100961208343506, 0.4868566393852234, 0.0006439834833145142, 0.12079601734876633, -0.09330840408802032, -0.06127481907606125, -0.08239378035068512, -0.41141796112060547, 0.3414917588233948, -0.8802411556243896, -0.4703270196914673, 0.2631213963031769, 0.26110565662384033, 0.5917719602584839, 0.7620246410369873, -0.9405629634857178, 0.030846981331706047, -0.10425969958305359, -0.46755483746528625, -0.16108062863349915, -1.1636234521865845, -0.5711292028427124, 0.13999280333518982, -0.2735082507133484, 0.8313695192337036, -0.41915538907051086, -0.2992928624153137, 0.32886621356010437, 0.488370418548584, -0.22953471541404724, 0.9543231725692749, 0.5279176831245422, -0.3559858202934265, -1.1517219543457031, -0.1648215502500534, 0.445743203163147, 0.178298220038414, 0.3753565549850464, 0.5936013460159302, -0.5167942643165588, 0.11407238990068436, 0.40283331274986267, -0.389992892742157, -0.03443340212106705, -0.22311946749687195, 0.9027306437492371, 0.2024124264717102, -0.8488585352897644, 0.12344324588775635, -0.9560515880584717, 0.16437602043151855, -0.4296262264251709, 0.12867170572280884, 0.4386981427669525, 0.27330291271209717, -0.32141393423080444, -0.13274109363555908, -0.7893788814544678, 1.5161287784576416, -1.2758947610855103, 0.32501381635665894, -0.4353191554546356, -0.8664505481719971, -0.40478020906448364, 1.0288249254226685, -0.4791209101676941, -0.49763065576553345, -0.14193642139434814, 0.45314690470695496, 0.7637447118759155, -0.7329164743423462, -0.7181583046913147, -0.7031599283218384, -1.7241389751434326, 0.4444054663181305, -0.13852667808532715, 0.3162294328212738, -0.7436214685440063, -0.17821088433265686, 0.08954720199108124, -0.11408369243144989, 0.3963301181793213, 0.3755352795124054, 0.42003369331359863, -0.7445831298828125, 1.0280413627624512, -0.19705164432525635, -0.029960084706544876, 1.1473804712295532, 0.5965359210968018, -0.14988099038600922, 0.528905987739563, 0.13148285448551178, 0.14616377651691437, -0.16302789747714996, -0.6396285891532898, -0.5414777994155884, 0.2994755506515503, 0.5756212472915649, -0.25431838631629944, 0.26636916399002075, 0.6894538998603821, 0.7036296129226685, -0.14859572052955627, -1.246366024017334, 0.25159865617752075, -0.4755585193634033, -0.14849860966205597, 0.020882487297058105, -0.8776805400848389, 0.7499160766601562, 0.2620293200016022, 0.1172221451997757, 0.8552553057670593, -0.2001763880252838, 0.014116860926151276, -0.4403080642223358, 0.6054247617721558, 0.37606507539749146, 0.8788278102874756, -0.15733493864536285, 0.2627757787704468, 0.08757585287094116, 0.01029876247048378, -0.6953907608985901, -0.05628524720668793, 0.17217066884040833, 0.7226312160491943, 0.6828199625015259, 0.32901573181152344, 0.17501875758171082, 0.49845078587532043, 0.057888761162757874, -0.04172000288963318, 0.04830555245280266, 0.09290879219770432, 0.25860506296157837, 0.47116178274154663, 0.023719195276498795, -0.06120144575834274, 0.8990238904953003, 0.39200925827026367, -0.7878068685531616, -0.5745512247085571, -1.1488935947418213, -0.21048122644424438, -0.19141341745853424, -0.2384890913963318, -0.37825465202331543, 0.0004938505589962006, -0.41935139894485474, 1.2507691383361816, 0.8758083581924438, -0.008950281888246536, 0.6068099737167358, -0.13556471467018127, -0.5059016346931458, 0.5301269292831421, -1.242755651473999, -0.53546541929245, -0.05510631203651428, 0.72945237159729, -0.32664328813552856, -0.3322816491127014, 0.6233165264129639, 0.04731518402695656, -0.2922089099884033, 0.11240620911121368, 1.307009220123291, 0.5304998159408569, -0.5584568381309509, 0.8470662236213684, -0.7389307022094727, 0.45210713148117065, 0.32426536083221436, -0.38876739144325256, 0.4856378734111786, -1.168666124343872, 0.2457873374223709, 0.729250431060791, 0.035497892647981644, 1.001053810119629, -0.5268298387527466, -0.41692572832107544, -0.00825594738125801, 0.48344719409942627, -0.2615886330604553, -0.12314216792583466, 0.07343008369207382, -0.3152046501636505, -0.8687478303909302, -0.3831574022769928, 0.29340052604675293, 0.8870012760162354, 0.5752924680709839, -0.09361310303211212, 0.2888575792312622, -0.8369390964508057, -0.21298474073410034, -1.1935979127883911, -0.8462576866149902, -0.5909978747367859, 0.4984602630138397, -0.38923269510269165, -0.3095692992210388, 0.4959380030632019, 0.3044975996017456, -0.15408407151699066, 1.087870717048645, 0.4257599115371704, 0.6006537675857544, 0.27065712213516235, -0.06027435511350632, -0.8467128276824951, 0.6912068128585815, 0.1640802025794983, 0.22407770156860352, 0.36260324716567993, 1.1468877792358398, -0.7088059782981873, 0.5521581768989563, 0.24199721217155457, -0.5212404727935791, -0.26848334074020386, 0.41965675354003906, -0.3935542106628418, 0.893132209777832, 1.001224398612976, 0.184543177485466, 0.4974469244480133, 0.26291486620903015, -0.35929441452026367, 0.6315712928771973, -0.06943942606449127, -0.187272310256958, 0.24699144065380096, -0.3605530560016632, 0.6506260633468628, 1.0547586679458618, -0.06868322193622589, 0.10579507052898407, -0.4654017984867096, 0.8454738259315491, 0.3656446635723114, 0.1877986341714859, 0.3069745898246765, -0.08121446520090103, 0.8312525153160095, -0.1703736037015915, -0.3252103924751282, 0.40905988216400146, 0.4006035327911377, -0.07557821273803711, -0.05056365951895714, -0.2992511987686157, -0.1754971444606781, -0.1728796362876892, 0.33645516633987427, 0.4196541905403137, -0.19538015127182007, -0.1608281135559082, -0.1799941509962082, -0.14643891155719757, -0.8281739950180054, 0.344756543636322, -0.0665179193019867, 1.0083768367767334, 0.05807396024465561, 0.5196631550788879, -0.6481281518936157, -0.5355371832847595, -0.3767307698726654, 0.5261645913124084, -0.3393513262271881, -0.008741505444049835, -0.6521171927452087, -0.2798604965209961, -0.14251424372196198, -0.4371468126773834, -0.819551944732666, 1.4925892353057861, 0.6079850196838379, -0.4570886790752411, -1.4068124294281006, -0.26051098108291626, -0.17022958397865295, 0.04685536026954651, -0.40468716621398926, -0.30683961510658264, 1.0981916189193726, -0.19554902613162994, -0.3797772228717804, 0.46505630016326904, 0.15793421864509583, 0.8022114634513855, -0.4027351438999176, 0.2806236743927002, -0.004799572750926018, 0.4165557324886322, 0.33987894654273987, 0.8492127656936646, -0.161724254488945, 0.6362009048461914, 0.6709301471710205, 0.7165395021438599, 0.5585920214653015, -0.23784364759922028, -1.1416248083114624, -0.8864850997924805, -0.10845289379358292, 0.6992717981338501, -0.0067980969324707985, -0.33409222960472107, -0.48329848051071167, -0.18877528607845306, 0.5670396089553833, -0.020626408979296684, 0.30719274282455444, 0.2553368806838989, -0.40976613759994507, 0.4255521893501282, -0.008353635668754578, 0.35674238204956055, 0.8531627655029297, 0.7173737287521362, -0.8701650500297546, -0.8152011632919312, 0.80727219581604, -0.5736843347549438, 0.23294556140899658, 0.3275681734085083, 0.12972213327884674, 0.5501155257225037, -0.31011390686035156, 0.2018355280160904, -0.19279861450195312, 0.18883152306079865, 0.5918642282485962, 0.5561879277229309, 0.02438366413116455, -0.4385068118572235, 0.2230399250984192, 0.6274927854537964, -0.33790215849876404, 0.13815757632255554, -0.5291418433189392, 0.8937007188796997, 0.564144492149353, -0.0863291472196579, -0.6235210299491882, 0.7084218263626099, 0.2898474335670471, 0.04914543405175209, -0.3316575288772583, -0.04924052953720093, -0.182375967502594, 0.11646000295877457, 0.16136594116687775, -0.8432002663612366, 0.2725733518600464, -1.1106441020965576, -0.5266816020011902, 0.2804802656173706, 0.6998424530029297, 0.4603971838951111, -0.8950003981590271, 0.10940923541784286, -0.5217164754867554, 0.15920934081077576, 0.1507059633731842, -0.39069151878356934, -0.1243719831109047, 0.15844154357910156, -0.7970336675643921, -0.2068231999874115, 0.5590205192565918, 0.6726304292678833, 0.3008362650871277, -0.05662098899483681, 1.3380080461502075, 0.1090802475810051, 0.04964597895741463, -0.22722187638282776, -0.32155388593673706, 0.6205288767814636, 0.19505372643470764, -0.9208580255508423, -0.13004642724990845, 0.3613382577896118, 0.1089504212141037, 0.7002066373825073, 0.35384148359298706, 0.1795840859413147, 0.03142627328634262, -0.06477014720439911, 0.09076182544231415, -0.22991319000720978, 0.5315792560577393, 0.6946244835853577, -0.21445319056510925, 0.5715062618255615, -1.6043989658355713, -1.538982629776001, 0.017946327105164528, 0.4854789078235626, -1.5121588706970215, 0.8541034460067749, 0.7603272199630737, -0.03503837436437607, 0.36466872692108154, -0.6982743740081787, -0.3306955099105835, -0.978762686252594, 0.15185609459877014, -1.16376793384552, -0.01871132105588913, 0.2688179910182953, 0.5763792991638184, 0.40019479393959045, -0.5101485848426819, -0.17338690161705017, -0.4554504156112671, 1.1120511293411255, -0.16908368468284607, -0.4307107925415039, 0.9738296866416931, -0.06203792244195938, -0.847454309463501, 0.07097254693508148, -0.11173597723245621, -0.3036292791366577, -1.2022404670715332, 1.0724176168441772, -0.40672796964645386, -0.7337117791175842, -0.6149414777755737, -0.7295464277267456, -0.4458925426006317, 0.4456694424152374, -0.3754070997238159, 0.5507964491844177, 0.23999112844467163, -1.2106369733810425, -0.3600355386734009, -0.5002752542495728, 0.24597075581550598, -0.6898633241653442, 0.47816765308380127, 0.7105275988578796, -0.7856472730636597, 0.05053039267659187, -0.42300254106521606, -0.7417588233947754, 0.7134549617767334, 0.2208699733018875, -0.16130444407463074, -0.330716609954834, 0.2636546492576599, 0.35888218879699707, 0.47837722301483154, -0.007782168686389923, 1.058799147605896, 0.28584402799606323, -0.09080053865909576, 0.024688908830285072, -0.30130890011787415, -0.4002021551132202, -0.3269091844558716, -0.6206264495849609, -0.5341362953186035, -0.3555383086204529, -0.5941797494888306, 1.3316099643707275, 0.25962695479393005, 0.8161765336990356, -1.0700511932373047, -0.526279091835022, -0.5148131251335144, 0.14492398500442505, 0.26640862226486206, -0.06082594394683838, -0.3790086805820465, -0.3726477324962616, -0.0822065994143486, 0.02400861121714115, 1.1765931844711304, -0.1310325562953949, 0.03243081271648407, 0.5181754231452942, 0.24324078857898712, -0.8790124654769897, -0.13884352147579193, 0.48741620779037476, 0.6024916172027588, 1.880497932434082, 0.2881735563278198, 0.4260255694389343, 0.04933420941233635, -0.46937546133995056, -0.09811419248580933, 0.475463330745697, -0.4222920536994934, -0.012542294338345528, 0.5422776937484741, -0.7403085827827454, -0.25278720259666443, 0.24185484647750854, 1.204874873161316, -1.262488603591919, 0.5519835948944092, -1.1236064434051514, -0.43595799803733826, -0.47376763820648193, 1.4185130596160889, -0.2873276472091675, 0.31145524978637695, 0.1579316258430481, 0.592081606388092, 0.9554412961006165, -0.23457467555999756, -0.902174711227417, -0.2689802944660187, -0.8157167434692383, 0.02709960751235485, -0.62502121925354, 0.7038276195526123, 0.681122362613678, 0.33624619245529175, 1.5888640880584717, 0.7126308679580688, 0.33632728457450867, 0.012135479599237442, -0.3315514624118805, 0.4806429147720337, 0.3213469684123993, -0.865357518196106, -0.5263980627059937, -0.4972700774669647, 0.02349705994129181, -0.45248115062713623, 0.1718597710132599, 0.13093844056129456, 1.4539241790771484, 0.12097638845443726, 0.41141682863235474, 0.2830866277217865, -0.10544861853122711, -0.5329650640487671, 0.4963858127593994, 1.0481983423233032, -0.6555344462394714, 0.672524094581604, 1.0010838508605957, 0.14552539587020874, -0.1425001472234726, 0.22089320421218872, -0.6305797100067139, 0.1097504049539566, -0.22715486586093903, 0.24701684713363647, 0.4231308400630951, -0.5856419801712036, -0.09731162339448929, -0.5177103877067566, -0.1606070101261139, 0.14729423820972443, -0.339068740606308, -0.47860920429229736, -0.9047726988792419, 0.23529130220413208, 0.40362048149108887, -0.3578263521194458, 0.3213123083114624, 0.8833674192428589, 0.3518674969673157, -0.9176367521286011, -0.03504352644085884, -0.12258733063936234, 0.021399423480033875, 0.5201351046562195, 0.17778316140174866, -0.1233610287308693, -0.3982880711555481, 0.2692564129829407, 0.28269243240356445, -0.23674443364143372, -0.33043527603149414, -0.3535405397415161, 0.36788955330848694, -0.11761851608753204, -0.16864216327667236, -0.33050230145454407, 0.11430700123310089, 0.17107702791690826, -0.3775281310081482, -0.039468664675951004, 0.46816903352737427, -0.3079374432563782, 0.1739010065793991, -0.7088638544082642, -0.18442681431770325, -0.5391370058059692, 0.26197153329849243, 0.037480175495147705, 0.22461730241775513, -0.5086530447006226, -0.6268169283866882, -0.7128562927246094, -1.1637980937957764, -0.5182927250862122, -0.47249656915664673, 0.9969209432601929, -0.7080520391464233, -0.07131469249725342, -0.04850595071911812, -0.787559986114502, -0.9843219518661499, -0.2040722370147705, -1.2307789325714111, -0.1277064085006714, 0.6145409941673279, 0.32292675971984863, 0.11140058189630508, -0.5723403692245483, -0.6455039978027344, 1.5618414878845215, -0.5783313512802124, 0.14069169759750366, -0.37409988045692444, 0.269320547580719, -0.7214246988296509, 0.10114061832427979, -0.13810542225837708, -0.5490744113922119, 0.8339570760726929, 0.28738632798194885, 0.5660504102706909, 0.06381819397211075, -0.722773551940918, -0.5526626110076904, 0.7962577939033508, 0.41895031929016113, -1.567463994026184, -1.1810966730117798, -0.3952427804470062, -0.17404012382030487]"
sc-copilot/DIRECT_DEBIT/direct_debit_test.py,def test_direct_debit_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.23024693131446838, 0.6071354746818542, -3.0234947204589844, -0.803119421005249, 1.1667205095291138, -0.8498461246490479, 0.8899127244949341, -0.3204042911529541, -0.41172072291374207, -0.9368276596069336, -0.4431672692298889, 1.0140681266784668, 1.161440372467041, 0.6855204105377197, -1.2949409484863281, -0.3654036521911621, 0.3673976957798004, -1.3108704090118408, -0.05637475848197937, 0.5261764526367188, 0.647507905960083, -0.47689342498779297, -1.0389117002487183, -0.9774008989334106, 1.230085015296936, -0.5550161600112915, 0.44715261459350586, 0.1538972109556198, -0.651802659034729, 0.2581597864627838, -0.17956390976905823, -0.027563951909542084, 1.3657240867614746, -0.6854719519615173, -0.49383485317230225, -0.9506443738937378, 0.5973336100578308, 0.8473000526428223, -0.3935813009738922, -0.30028051137924194, -0.8934977054595947, 0.3376116156578064, -0.761934220790863, -0.5163926482200623, 1.5469157695770264, -0.9313953518867493, 1.0268135070800781, 1.6861263513565063, -0.1279081255197525, -0.9766016602516174, 0.24990764260292053, -0.5290010571479797, 0.9765914678573608, -0.3583061397075653, 0.4600400924682617, -0.31005650758743286, -1.0141386985778809, 0.8029407858848572, 0.45869117975234985, -0.5018569827079773, 0.9689233899116516, 0.6135306358337402, -0.19771257042884827, 0.3192734122276306, 0.23206092417240143, -0.12507769465446472, -0.2073207050561905, 0.2631534934043884, 0.518700897693634, 0.2529263198375702, 0.7825556993484497, -0.1475512683391571, 0.8069808483123779, -0.36064308881759644, 0.8992420434951782, 0.05701622739434242, -0.29638880491256714, -0.15088501572608948, -0.6348440647125244, 0.1880171000957489, -0.04345245659351349, -0.40294986963272095, 0.6799198389053345, 0.14654283225536346, 0.6263089179992676, -0.75843346118927, 0.24346818029880524, -0.7908434271812439, -0.3287036418914795, 2.033311605453491, -0.070015087723732, -0.9392231702804565, -0.24892638623714447, 1.2527269124984741, -1.019148588180542, 0.1956305205821991, -0.17422018945217133, 1.1630878448486328, -0.25071561336517334, -0.21745385229587555, 0.35039037466049194, 0.20245005190372467, 0.6153991222381592, -0.9420522451400757, -0.3005612790584564, 0.1341925859451294, -0.22220858931541443, 0.26725834608078003, -0.28312450647354126, -0.7546123266220093, -0.7680128812789917, 0.8295724987983704, -0.8780017495155334, 0.0011986419558525085, 0.3522784113883972, 0.8246509432792664, 0.9026353359222412, -0.6535353660583496, -1.4327343702316284, 0.31025004386901855, -0.31904393434524536, -0.42893388867378235, 0.14778776466846466, 0.8047171831130981, -0.38921916484832764, 1.4780083894729614, -1.954372763633728, 0.6002095937728882, 0.8498814105987549, -0.6701762676239014, 0.5593892335891724, 0.45964115858078003, -1.0868864059448242, -0.19584894180297852, -0.548229992389679, 0.3317531943321228, 0.7659525871276855, -0.6495721340179443, -0.7297229766845703, -0.21265003085136414, -0.4015565812587738, 0.366237074136734, -0.7458313703536987, 0.7029941082000732, 0.2634260356426239, -0.6730925440788269, 0.756619930267334, -1.147828459739685, -0.035352710634469986, -0.369488000869751, 0.37942978739738464, 0.49055713415145874, 0.558321475982666, 0.2890656590461731, 0.7914527654647827, 0.14714480936527252, 0.7737486362457275, -0.3058807849884033, 1.165224313735962, 1.4159150123596191, 0.008129451423883438, 0.18459829688072205, -0.9399496912956238, -0.006839580833911896, -0.049428753554821014, -1.224301815032959, 0.4079672694206238, 2.0269203186035156, 0.7672290802001953, -0.25686389207839966, -0.8213756084442139, -1.0676774978637695, 0.0043336376547813416, -0.38695859909057617, -0.45839548110961914, 0.5557396411895752, -0.03566884994506836, -0.22567225992679596, 0.8844553232192993, -0.3783053755760193, 0.5861014127731323, -0.5441184043884277, 0.8250778913497925, 0.8310133218765259, -0.3086782693862915, -0.3243386447429657, 0.5628244280815125, -0.8092236518859863, -0.36788269877433777, -0.6904387474060059, 0.42423638701438904, -0.15231812000274658, -0.7768173813819885, -0.4126162528991699, -0.8622727394104004, -1.3835152387619019, 0.4672195315361023, 0.641721248626709, 1.1957318782806396, -0.09016600996255875, -0.018762465566396713, -0.11008458584547043, -0.17288579046726227, 0.3617543876171112, -0.43672284483909607, 0.02045866847038269, -0.44988781213760376, -0.6236077547073364, -0.05799455940723419, 0.05401056259870529, 1.8416588306427002, 0.41321954131126404, -1.1277809143066406, -0.07169602811336517, 1.1146562099456787, -0.1606118083000183, -0.3456711173057556, -0.8513270616531372, -0.46663737297058105, 0.3416440486907959, 0.07810014486312866, -0.9969987273216248, -0.06629672646522522, -0.5343794822692871, 0.5647067427635193, 0.1904342770576477, -0.8966905474662781, 0.6877866387367249, -0.5361275672912598, 0.01554674468934536, 0.30056726932525635, -1.2363195419311523, -0.585633397102356, 0.14059679210186005, 0.9098538160324097, 1.5970344543457031, 0.010214734822511673, 0.9350878596305847, 0.7763074636459351, -0.15970927476882935, -0.2420291006565094, 0.32904762029647827, -0.02681799978017807, 0.550626814365387, -0.10810858011245728, -0.3934054374694824, 0.03993987292051315, 0.1340797245502472, 0.30067288875579834, 0.7398681640625, -1.3863321542739868, 0.326416939496994, -0.6730797290802002, 0.46487027406692505, 0.48537173867225647, 0.3215918242931366, -0.5532424449920654, -1.1890054941177368, 0.45993772149086, -0.5301119089126587, -0.012848161160945892, -0.20353317260742188, 1.5950580835342407, -0.6815358400344849, -1.0755380392074585, -1.2202792167663574, -0.7302840948104858, 0.5892954468727112, -0.23661205172538757, -1.0605847835540771, -0.10623419284820557, 0.4917699992656708, 1.1112834215164185, 0.645058810710907, 0.4664244055747986, -0.6999920606613159, 0.8067470788955688, -0.41435253620147705, -0.7282174825668335, 0.6418582201004028, -0.5190203785896301, -0.30947041511535645, -0.2616143822669983, 0.5048462152481079, 1.0855237245559692, 0.21648971736431122, -0.27768635749816895, -0.10401317477226257, 0.4073610305786133, 0.3334612250328064, 1.6546674966812134, -0.04623616486787796, -0.40417030453681946, 1.7074854373931885, -0.3281720280647278, -0.1803465336561203, 0.20333020389080048, 0.4993339776992798, 0.07428575307130814, -0.7351113557815552, -0.1607993245124817, 0.7157561779022217, 0.7122063636779785, 1.393027901649475, 0.8054587841033936, -0.43989482522010803, 0.2525455951690674, -0.08423636853694916, 0.5981078147888184, -0.014362812042236328, 0.22289401292800903, 0.3973345160484314, -0.5925929546356201, 0.16593784093856812, -1.4610809087753296, 0.5631837844848633, 1.040486454963684, 0.2600674629211426, 0.2784730792045593, -0.5189312100410461, 1.1819932460784912, -0.5751407146453857, -0.21093927323818207, -0.9520018100738525, -0.23312458395957947, 1.0843267440795898, 0.1949174404144287, 0.9399646520614624, -0.6709668040275574, 0.026839353144168854, 0.8124560117721558, 0.9611832499504089, 0.6040024757385254, -0.5287812352180481, -0.5336222052574158, -0.5617603063583374, -0.5490810871124268, 0.19519223272800446, -0.004132568836212158, 1.1594762802124023, 0.07801571488380432, -0.0943133756518364, 0.5754273533821106, -1.286848545074463, 0.43929189443588257, -0.9700372219085693, 0.3624810576438904, 0.6448999643325806, 0.3970780670642853, 0.28285419940948486, -0.256673663854599, 0.08148886263370514, 0.0828748568892479, -0.06273923814296722, 0.9161080121994019, -0.3920564651489258, 0.5805057883262634, 0.8911572098731995, 0.2422359734773636, -0.17860935628414154, 0.17821787297725677, 0.5035161375999451, 0.0007687173783779144, -0.5079129934310913, 0.2601217031478882, 0.6354471445083618, 0.6522461771965027, 0.10615512728691101, 0.4430009126663208, 0.22550395131111145, -0.969708263874054, 0.6650882959365845, 0.4361007511615753, 1.0219860076904297, 0.9951620697975159, -0.2215861827135086, -1.179559350013733, 0.7621814012527466, -0.12934067845344543, 1.0485684871673584, 0.7848855257034302, 0.15998432040214539, 0.46150994300842285, -0.4421839714050293, 0.5100007057189941, -0.12710070610046387, -0.006339769810438156, 0.28627273440361023, -0.2755352556705475, 0.2750215530395508, 0.2329789400100708, -0.03315800428390503, 0.4090835452079773, 1.0239940881729126, 0.32476454973220825, -0.4027860164642334, 1.2113193273544312, 0.7300657033920288, -0.22919994592666626, -0.08689384162425995, -0.3845783472061157, -1.8035814762115479, 0.5140466690063477, -0.7093948125839233, -0.08712340891361237, 0.10261458158493042, -1.6722102165222168, -0.9740120768547058, -0.17121681571006775, 0.589611291885376, -0.29455283284187317, -0.49675998091697693, -0.4689517617225647, -0.017360754311084747, 0.0001868065446615219, -0.29599589109420776, 1.2442569732666016, 1.2174152135849, -0.578153669834137, 0.5820468068122864, 0.2549402415752411, 0.19151782989501953, 0.1828942596912384, -0.25312069058418274, -0.8692294359207153, -0.05633500963449478, 0.7174302339553833, 0.9251409769058228, 0.608906626701355, -0.9958375096321106, -0.25031301379203796, 0.31933608651161194, 0.19973687827587128, 0.08503414690494537, -0.7018135786056519, -0.26990681886672974, -0.5680822134017944, 1.9894204139709473, 0.09899783134460449, 0.5368770360946655, 0.15795579552650452, -0.8820359110832214, -0.008423738181591034, -0.9403477907180786, 0.6721135973930359, 2.421755075454712, 0.6555310487747192, -0.6903585195541382, -0.5117776393890381, -0.41787558794021606, -0.05900774896144867, 1.0631928443908691, -0.02380969002842903, 1.1992990970611572, 0.311882346868515, -1.4929604530334473, 0.5607592463493347, 0.11954248696565628, -0.016515150666236877, 0.866884708404541, -1.0120106935501099, 0.16476678848266602, -0.5589262247085571, 0.8282022476196289, -0.07202117145061493, 0.6241044998168945, 0.7316353917121887, -0.3775422275066376, -0.3980201184749603, 1.3011460304260254, -1.1791901588439941, -0.2926555573940277, 0.6716374754905701, -0.35414212942123413, 0.0016105882823467255, -0.6978785991668701, 0.35470667481422424, 0.48387178778648376, 0.4155077636241913, 0.7152292728424072, -0.16603028774261475, -0.6010279059410095, -0.9686923027038574, -0.06558851152658463, 0.208346888422966, 1.0989940166473389, 0.7060321569442749, -1.115637183189392, -0.2817884683609009, -0.9183991551399231, 0.6063827872276306, -0.34798941016197205, 0.06571263819932938, -0.1485399305820465, -0.4539918005466461, -0.05014318972826004, -0.22386635839939117, 0.5172582864761353, 0.1628900170326233, -0.21715891361236572, -0.33320868015289307, 0.4915581941604614, -0.02953290194272995, -0.6575570106506348, 0.006949795410037041, 0.12522031366825104, 0.8484176397323608, -0.8008332252502441, -2.0247790813446045, -0.8026485443115234, -0.9638438820838928, 0.9763860702514648, 0.6713076233863831, 0.27516821026802063, 0.8329999446868896, -0.12543925642967224, 0.49466952681541443, -1.4723663330078125, -0.965310275554657, -0.4798082709312439, 0.07699026167392731, -0.021574873477220535, -0.024147434160113335, 0.0550042986869812, -0.7480459809303284, -0.43545448780059814, -0.27599307894706726, -0.9191534519195557, 0.15710458159446716, -0.28523895144462585, 0.2632366120815277, -0.08082181215286255, -1.0438642501831055, -0.4926444888114929, -0.267694354057312, -0.7654457092285156, -0.7528815269470215, -0.03173263370990753, -0.20859944820404053, 0.8764459490776062, 0.43798696994781494, 0.9019885063171387, 0.48183584213256836, 0.6582493782043457, -0.6158729195594788, -0.9751154184341431, -0.8544070720672607, -0.44837480783462524, -0.5454108715057373, -1.1420259475708008, 0.10437766462564468, 0.19483551383018494, -1.1911494731903076, -1.0467724800109863, 0.16374477744102478, 0.6057165861129761, -0.04685380682349205, -0.46643173694610596, -0.33992260694503784, -0.7316946983337402, 0.9441388249397278, 0.710665225982666, 0.1135866641998291, 1.0372785329818726, 0.20553573966026306, 0.16450098156929016, 0.3544192910194397, 0.29859697818756104, 0.41640424728393555, 0.589271605014801, -0.09828346967697144, -0.7954015731811523, -0.3788832426071167, -1.2421295642852783, -0.5694490671157837, -0.2872806787490845, 0.49943849444389343, 0.17403149604797363, -0.17917874455451965, -0.9862945675849915, 0.621671736240387, -0.053668536245822906, 1.1795077323913574, 0.9567084908485413, -0.23188409209251404, 0.17176206409931183, 0.2661237418651581, 0.15043587982654572, -0.7682336568832397, -0.11280323565006256, -0.9653840065002441, -0.1647750735282898, 0.542391300201416, -1.0211666822433472, -0.03487484157085419, 0.6034841537475586, 0.336344450712204, -0.5193895101547241, -1.0213086605072021, 0.009991910308599472, 0.5134409070014954, -0.7003915309906006, 0.6057433485984802, -1.4301910400390625, -0.1837378442287445, 1.6587634086608887, 0.5258155465126038, 0.8228906989097595, -0.839897096157074, 0.345073938369751, 0.6865391731262207, 0.14937624335289001, -0.17815062403678894, 0.027277421206235886, 0.28106606006622314, -0.3888240456581116, 0.7678918242454529, -0.22325268387794495, 0.11657362431287766, 0.07076720893383026, -0.2490321546792984, -0.3536299467086792, 1.0362157821655273, -0.505825936794281, 0.2204633355140686, -0.22111332416534424, -0.5959078073501587, -0.7230349779129028, 0.5081062912940979, 1.1688978672027588, -0.4441615343093872, 0.4540257453918457, -2.743788003921509, -1.6109699010849, -1.2829062938690186, 0.7734525203704834, -0.6964258551597595, 0.6427456140518188, -0.023100299760699272, 0.8031768798828125, 0.6540806293487549, 0.4757637679576874, 0.2546080946922302, -0.21967989206314087, -0.12556327879428864, -0.9889652729034424, 1.282008409500122, 0.6194718480110168, 1.6568899154663086, -0.1578332930803299, 1.961103916168213, 1.2918472290039062, 0.23090113699436188, 0.3970571756362915, 0.6768707036972046, 0.3536526560783386, 0.5747543573379517, -0.24783745408058167, -0.8768725395202637, -0.8902230858802795, -0.7930334806442261, -0.34270501136779785, -0.8442709445953369, -0.06490212678909302, 1.331801414489746, -0.05048669874668121, 0.214220330119133, -0.02033276855945587, -0.028018895536661148, -1.569784164428711, 0.7168171405792236, 0.6779050827026367, 0.08161936700344086, 0.32889068126678467, 0.8721437454223633, 0.4587344527244568, 0.0807378888130188, 1.0311591625213623, -1.053853154182434, -0.6066424250602722, -0.3862189054489136, 0.4870308041572571, 0.8541809916496277, -0.022713039070367813, -0.4942588210105896, 0.21393458545207977, -0.23733896017074585, -0.8629935383796692, -0.3551051616668701, -0.9707216620445251, -0.3049545884132385, 0.5693013668060303, 0.024983644485473633, -0.8235530257225037, 0.3063390851020813, -0.5990760326385498, 0.9165928363800049, -0.6244039535522461, -0.044495634734630585, 0.27172183990478516, -0.22577255964279175, 1.2255702018737793, 0.42476537823677063, 0.9888989329338074, -0.42115020751953125, -0.23921167850494385, -0.19443857669830322, -0.2545579671859741, -1.3217262029647827, -0.8232263326644897, 1.0293927192687988, 0.7421707510948181, -0.23329825699329376, 0.25565847754478455, -0.5141189098358154, 0.14917431771755219, -1.0916221141815186, -0.7531009912490845, -0.38642627000808716, -0.8615791201591492, 1.0223641395568848, -0.9549779891967773, -0.47781848907470703, 0.6710309982299805, -0.25985586643218994, -0.8001737594604492, 0.5004820227622986, -0.4367503225803375, 1.1265877485275269, -0.7977619767189026, 0.9892057180404663, -0.5074572563171387, -0.2499295026063919, 0.22785763442516327, -0.2854936122894287, 0.5861436724662781, -0.48624753952026367, -0.6376566290855408, -1.0479676723480225, -0.4243919253349304, -0.9317386150360107, 0.42493224143981934, 0.004066921770572662, 0.08687404543161392, 0.3268127143383026, -0.24643641710281372, -0.7441451549530029, -0.156195268034935, 1.0295774936676025, -0.22920939326286316, -0.49716678261756897, -1.2707161903381348, -0.8036240339279175, -0.581571102142334, -0.11170823127031326, -0.028317108750343323, -0.3499899208545685, 0.1962357759475708, 2.7040858268737793, -0.4571944773197174, 0.1571725308895111, -1.0288070440292358, 0.20051878690719604, 0.06096716225147247, -0.5158983469009399, -0.7003253698348999, -0.04648788645863533, -0.6581357717514038]"
sc-copilot/DIRECT_DEBIT/direct_debit_schedule_code.py,def direct_debit_schedule_code():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[-0.2935106158256531, 0.49971145391464233, -2.755617380142212, -0.8770768046379089, 0.8203400373458862, -0.9247341156005859, 0.30124470591545105, -0.45179131627082825, -1.140773892402649, -0.9878808259963989, -0.9095035195350647, 0.3346368670463562, 2.0730085372924805, 0.36578166484832764, -0.8059499263763428, -0.044651687145233154, -0.38076525926589966, -0.8929553627967834, -0.5300219058990479, 0.7978571653366089, 0.7386810183525085, -0.12081702053546906, -0.760441780090332, -1.2108614444732666, 1.0435400009155273, -0.28241342306137085, 1.1978853940963745, -0.3146927058696747, -0.8074051141738892, 0.47347885370254517, -0.4685323238372803, 0.4098775088787079, 1.1111032962799072, -0.41269204020500183, -0.1540011465549469, -0.84430330991745, 0.5189090967178345, 0.5005940794944763, -0.40214523673057556, -0.8197279572486877, -0.9702966809272766, 0.13295109570026398, -0.618720531463623, -0.09178884327411652, 1.1527009010314941, -1.2018139362335205, 1.2906651496887207, 0.5609303712844849, -0.6233140230178833, -0.8890426158905029, 0.8060405254364014, -0.29966863989830017, 0.5000177621841431, -0.5415582656860352, 0.245548278093338, -0.19369390606880188, -0.37344858050346375, 0.9614119529724121, 0.12395017594099045, 0.2966611385345459, 1.9427857398986816, 0.8023906946182251, 0.20774933695793152, 0.31284213066101074, 0.40038540959358215, 0.3017198443412781, -0.17740324139595032, 0.6211222410202026, 0.6523931622505188, 0.13060878217220306, 0.3158128261566162, -0.028969764709472656, 0.9242925643920898, -0.07309716939926147, 1.124224305152893, 0.4257862865924835, -0.20476049184799194, -0.23022252321243286, -0.24982145428657532, 0.35223472118377686, -0.6855223774909973, -0.11811290681362152, 0.6356434226036072, -0.3421635031700134, 0.11078674346208572, -0.4791775643825531, 0.5312799215316772, -0.7550472617149353, -0.1376275271177292, 2.174452304840088, -0.5888726711273193, -1.388817548751831, -0.29445013403892517, 1.053433895111084, -1.3529963493347168, 0.25222650170326233, -0.6038933992385864, 0.5954588651657104, -0.22304707765579224, -0.6352711319923401, 0.202572301030159, -0.12491951137781143, 1.135319471359253, -0.7196160554885864, 0.05171965807676315, -0.3671630620956421, -0.1592564582824707, 0.30893272161483765, -0.07876794785261154, -0.6052809357643127, -0.551674485206604, 0.9334396123886108, -0.470009446144104, -0.27209198474884033, 0.5962895750999451, 0.6451330184936523, 1.0530287027359009, -1.2913519144058228, -1.370796799659729, 0.6489229202270508, -0.4668601155281067, -1.2620978355407715, 0.560273289680481, 0.5152442455291748, 0.2061777412891388, 1.0596847534179688, -1.7830480337142944, 0.6096691489219666, 0.8477804660797119, -1.8040887117385864, 0.8950989246368408, 0.30167412757873535, -0.7920491695404053, 0.1338220089673996, -0.46499526500701904, 0.3019510507583618, 0.6493740081787109, -1.0962023735046387, -0.8077706098556519, 0.09642398357391357, 0.27060210704803467, 0.1910470724105835, -0.91414475440979, -0.1695801466703415, -0.4535650610923767, -0.370008260011673, 0.2807942032814026, -1.2461390495300293, 0.3786156177520752, -0.47075024247169495, 0.13050174713134766, 0.6511341333389282, 0.09213618189096451, 0.19978667795658112, 1.1030739545822144, -0.0865139588713646, 1.2820119857788086, -0.49115198850631714, 0.9155153632164001, 1.103891372680664, 0.6357642412185669, 0.49745309352874756, -0.6141538023948669, 0.2468937337398529, -0.09503604471683502, -1.4367873668670654, 0.3665820360183716, 1.2896854877471924, 0.05343613028526306, 0.06299024075269699, -0.5631272792816162, -0.48861631751060486, -0.15730074048042297, -0.25668197870254517, -0.11814922094345093, 0.3144207000732422, -0.19149595499038696, 0.03237083926796913, 0.7949953675270081, -0.658552885055542, 0.07285899668931961, -0.5954406261444092, 0.9257689714431763, 0.9602140188217163, -0.7576132416725159, 0.2773005962371826, 0.42077702283859253, -0.8092302680015564, -0.8867447376251221, -0.8198105096817017, -0.20974847674369812, 0.4597139358520508, -0.08352819085121155, -0.08423054218292236, -1.028798222541809, -0.5989370346069336, 0.5882644653320312, 0.48619961738586426, 0.8444404006004333, 0.009138178080320358, -0.09728981554508209, -0.032926976680755615, -0.4182397425174713, 0.049391716718673706, -0.2247811257839203, 0.9156514406204224, 0.020554184913635254, 0.08777625858783722, -0.03926160931587219, 0.29533544182777405, 1.7133431434631348, 0.2902217209339142, -1.270438551902771, -0.25077101588249207, 0.7767113447189331, -0.3902481198310852, -0.6789336204528809, -0.6610615253448486, -0.5170660018920898, 0.25384044647216797, -0.11644145846366882, -0.8407121896743774, -0.13766609132289886, -0.30574771761894226, 0.8748913407325745, -0.13218578696250916, -0.7467271089553833, 0.8796117305755615, -0.18056230247020721, 0.16108272969722748, -0.22195649147033691, -0.6900025010108948, -1.2262585163116455, -0.10522373020648956, 1.046407699584961, 1.7120559215545654, 0.7056804895401001, 1.0836491584777832, 1.2841238975524902, -0.4514649510383606, -0.17632338404655457, 0.4236742854118347, 0.6172078251838684, 0.5400140285491943, -0.10775743424892426, -0.325625479221344, 0.17939728498458862, 0.25180527567863464, -0.016146069392561913, 0.4063648581504822, -1.2692780494689941, -0.578524112701416, -0.8576657772064209, 0.41885465383529663, 0.39756298065185547, -0.1032186821103096, -0.9918879866600037, -1.2349740266799927, 0.7427139282226562, -0.4422086477279663, 0.29938220977783203, 0.7003457546234131, 1.628758192062378, -0.8814318180084229, -1.174431562423706, -1.1681840419769287, -0.6530231237411499, 1.2264220714569092, 0.18271015584468842, -1.3222850561141968, 0.24309760332107544, 0.41767609119415283, 0.7037380933761597, 0.8304730653762817, 0.3213427662849426, -0.7904292345046997, 0.7699538469314575, -0.35211050510406494, -0.9753589630126953, 0.7715884447097778, -0.23706749081611633, -0.7610725164413452, -0.46425551176071167, 0.42591431736946106, 0.9144217371940613, 0.19964691996574402, -0.209109365940094, 0.5949984788894653, 0.3505133390426636, -0.12436022609472275, 1.851362943649292, -0.1820717751979828, -0.7351364493370056, 1.519052267074585, -0.2638613283634186, -0.3742351830005646, 0.32565009593963623, 1.0045545101165771, 0.14137139916419983, -0.7917084693908691, -0.44090694189071655, 0.3207945227622986, 0.4158806800842285, 1.1364600658416748, 0.40365877747535706, -0.766823410987854, 0.41395267844200134, 0.2829558551311493, 0.17633625864982605, -0.10657154023647308, 0.7764654755592346, 0.01813601516187191, -0.709041953086853, 0.3513088822364807, -1.5401110649108887, 0.9285640120506287, 1.0440821647644043, -0.143142431974411, 0.5269379019737244, -0.5443655252456665, 1.0690281391143799, -0.8491430282592773, -0.19597554206848145, -1.516154408454895, -0.020801350474357605, 1.990747332572937, -0.156652569770813, 0.46916696429252625, -0.08603525906801224, 0.04394548386335373, 0.47101444005966187, 0.5609146356582642, 0.5648595094680786, -0.3772175908088684, -0.7490516304969788, -0.45067667961120605, -0.7166330218315125, 0.00023319199681282043, 0.3364763557910919, 1.009251594543457, 0.520552396774292, 0.23344579339027405, 0.630160927772522, -1.4773144721984863, 0.3671298325061798, -0.6412684321403503, -0.20239275693893433, 0.15044943988323212, 0.3290862441062927, 0.20414860546588898, -0.16511358320713043, -0.37394359707832336, 0.36064398288726807, 0.08681988716125488, 0.5096988677978516, -0.581704318523407, 0.3923932909965515, 0.6564396619796753, -0.21186068654060364, -0.17499642074108124, 0.4428519606590271, 0.7215802669525146, -0.1420838087797165, -0.1827991008758545, 0.05921696498990059, 0.33632367849349976, 0.9801716804504395, -0.01725667715072632, -0.052484676241874695, -0.039009395986795425, -0.7228541374206543, 0.49256882071495056, 0.2781139016151428, 0.6272754669189453, 0.2917848229408264, -0.4273817837238312, -1.0836341381072998, 0.37545275688171387, 0.035408008843660355, 1.1253193616867065, 0.455098032951355, 0.10204800218343735, 0.7472922801971436, -0.3858376443386078, 0.4254879653453827, 0.2653065323829651, -0.19728457927703857, 0.4905358552932739, -0.17433109879493713, 0.3888147473335266, 0.044529303908348083, -0.2516479194164276, 0.9104479551315308, 0.9773992300033569, 0.5066763758659363, -0.25283288955688477, 0.9782243967056274, 0.8564078211784363, 0.014874190092086792, -0.08216604590415955, -0.42735999822616577, -2.0250496864318848, 0.17991410195827484, -1.0359611511230469, 0.2901443541049957, 0.658367395401001, -1.0505592823028564, -1.3315151929855347, 0.0052115097641944885, -0.14933942258358002, -0.017027918249368668, -0.2572478950023651, -0.3687435984611511, 0.646621823310852, 0.2454167753458023, -0.24556246399879456, 0.8434758186340332, 1.4225164651870728, -0.40763092041015625, 0.09030875563621521, 0.45254138112068176, 0.4090430736541748, 0.43168753385543823, 0.08337585628032684, -0.7672111988067627, 0.14097261428833008, 0.8100163340568542, 0.4550027847290039, 0.6549032926559448, -0.758599042892456, -0.1683070808649063, 0.874032735824585, 0.8326084613800049, 0.15070591866970062, -0.9561743140220642, -0.5652264356613159, -0.5643205642700195, 1.7784299850463867, 0.1885649412870407, 0.8240882158279419, 0.46947282552719116, -1.1525596380233765, 0.06186896562576294, -1.1018333435058594, 0.7482748031616211, 1.9071944952011108, 0.2602638304233551, -0.6562068462371826, -0.20989534258842468, 0.28465914726257324, 0.8948454856872559, 1.5710361003875732, -0.20220047235488892, 1.282191276550293, 0.9004923701286316, -1.5853348970413208, 0.46061643958091736, 0.2474169135093689, 0.1876979023218155, 1.031328558921814, -1.217415690422058, 0.07435779273509979, -0.8431277871131897, 0.7168225049972534, -0.07125169783830643, 0.8362694978713989, 0.694465696811676, -0.11804553866386414, -0.07581926882266998, 1.744377613067627, -0.7966439127922058, 0.36801695823669434, 0.2843983471393585, -0.5017065405845642, 0.41048040986061096, -0.6660882234573364, 0.47766387462615967, -0.1274673044681549, 1.1283543109893799, 1.000866174697876, -0.37826624512672424, -0.21852481365203857, -0.8764454126358032, 0.06989957392215729, -0.3187010884284973, 1.123971939086914, 0.771817147731781, -1.2982594966888428, -0.3816521465778351, -0.7136562466621399, 0.6688886880874634, -0.31511831283569336, 0.2705407738685608, 0.13557741045951843, -0.6227438449859619, -0.143884539604187, -0.6073135137557983, 0.8657352924346924, 0.6944753527641296, -0.15005454421043396, -0.2652708888053894, 0.06632006168365479, -0.5291116237640381, -0.57752525806427, 0.6814919114112854, 0.5100339651107788, 0.4347796142101288, -0.14751434326171875, -2.173287868499756, -0.6151742935180664, -0.3967869281768799, 0.7646046876907349, 0.6529983878135681, -0.027982696890830994, 0.30057239532470703, -0.1716528832912445, 0.5365127921104431, -1.2676907777786255, -0.9213789105415344, -0.28807345032691956, -0.056320033967494965, 0.09183433651924133, -0.25186318159103394, 0.10784260183572769, -0.6263015270233154, -0.6016274094581604, 0.24358417093753815, -1.2329219579696655, -0.1367427110671997, -0.2755754590034485, -0.043999768793582916, -0.46536219120025635, -1.0620946884155273, -0.6181484460830688, -0.11166224628686905, -0.4598032832145691, -1.2706880569458008, 0.2756291627883911, -0.1816478818655014, 0.7709628939628601, 0.7761777639389038, 1.221449613571167, 0.7207049131393433, 0.6836398243904114, -0.8359447717666626, -1.0900025367736816, -0.5909358263015747, -0.5809744000434875, -0.64985191822052, -0.9157706499099731, 0.5108284950256348, -0.0007811263203620911, -0.5991831421852112, -1.209254264831543, 0.10126268863677979, 0.6811542510986328, -0.12298007309436798, -0.5069860219955444, -0.2772221565246582, -0.3130771517753601, 0.7586879730224609, 1.0337121486663818, 0.36732417345046997, 0.8754636645317078, 0.6819099187850952, 0.4892403483390808, 0.972993791103363, 0.5003658533096313, 0.2806220054626465, 0.6581863164901733, -0.3360183835029602, -1.2492347955703735, -0.8074244856834412, -0.8456876873970032, -0.19626528024673462, -0.16274042427539825, 0.296999454498291, -0.3284211754798889, -0.7767708897590637, -0.825018048286438, 0.5406437516212463, -0.07075072079896927, 0.546504557132721, 0.580357551574707, -0.8624906539916992, 0.17352822422981262, 0.19925343990325928, -0.16849981248378754, -0.6667238473892212, -0.5013158321380615, -0.29550549387931824, 0.06940948963165283, 0.06911338120698929, -0.618211567401886, -0.015147801488637924, 0.7628745436668396, 0.5758664608001709, -0.4709901809692383, -0.6815018653869629, -0.19387410581111908, 0.5912646055221558, -0.4496268630027771, 0.41544777154922485, -1.3074170351028442, -0.5027265548706055, 1.5373626947402954, 0.41030240058898926, 0.6486722230911255, -0.9144456386566162, 0.24105370044708252, 0.55347740650177, 0.19849249720573425, -0.2572067379951477, -0.12678343057632446, 0.34597131609916687, 0.006209556013345718, 0.3574603796005249, 0.3821536898612976, 0.34627747535705566, -0.11349575221538544, -0.6718959808349609, -0.47777503728866577, 0.8898647427558899, -0.2909071743488312, 0.3864654302597046, -0.0500355139374733, -0.8899389505386353, -0.673866331577301, 0.06060700863599777, 0.9491333365440369, 0.036697059869766235, 0.04375737905502319, -2.7515206336975098, -1.191298007965088, -1.507939100265503, 0.42410653829574585, -0.8146511316299438, 0.6258941292762756, -0.42743194103240967, 1.0441336631774902, 0.44094038009643555, 0.29965439438819885, 0.7353413105010986, 0.3030388653278351, -0.11564266681671143, -1.1276390552520752, 1.2274976968765259, 0.2826310992240906, 1.4907827377319336, -0.3300088942050934, 1.6424367427825928, 0.8189965486526489, 0.6390995383262634, 0.8733789920806885, 0.324146568775177, -0.00910050980746746, 0.38124895095825195, -0.9425057172775269, -1.3459489345550537, -0.7172242403030396, -0.4633057117462158, -0.2431814819574356, -0.9285731315612793, 0.21478399634361267, 1.8324565887451172, -0.2848132252693176, 0.750171959400177, 0.8053889870643616, -0.44832655787467957, -1.6167144775390625, 0.1383620798587799, 0.672959566116333, 0.10319328308105469, 0.3782346844673157, 0.7984371185302734, 0.618476152420044, 0.05033353343605995, 0.6363567113876343, -1.1196069717407227, -0.4270067811012268, 0.1285153478384018, 0.8161715269088745, 0.02309839427471161, -0.7700632810592651, -0.6078683137893677, 0.4470134973526001, 0.29415878653526306, -0.8557490110397339, -0.7768746018409729, -1.0891121625900269, -0.23277859389781952, 0.24001578986644745, 0.13025830686092377, -1.1328074932098389, 0.29472678899765015, -0.572739839553833, 0.6063870191574097, -0.5339087247848511, -0.03768754005432129, 0.5317384004592896, -0.054694145917892456, 0.8015803098678589, 0.4888855218887329, 0.8288455605506897, -0.3584856390953064, 0.3618907332420349, -0.27486753463745117, -0.2462746948003769, -0.8985080122947693, -0.7668884992599487, 0.6806867122650146, 0.17558372020721436, -0.7566198110580444, 0.034271761775016785, -0.975943922996521, 0.46467339992523193, -0.7603417038917542, -0.8135136365890503, 0.009473321959376335, -0.7154614925384521, 0.8776330947875977, -0.802482008934021, -0.6501269936561584, 0.7465266585350037, -0.24813491106033325, -0.03086693584918976, 0.33077797293663025, -0.8717088103294373, 0.3579503893852234, -0.5975045561790466, 0.52086341381073, -0.47989580035209656, -0.18977561593055725, 0.32847195863723755, 0.03016003966331482, 0.5245118141174316, -0.7992501258850098, -0.9972051382064819, -0.6071082353591919, -0.33623620867729187, -1.0420478582382202, 0.28223809599876404, -0.3614456355571747, 0.3355872929096222, 0.4824489951133728, -0.0609237439930439, -0.5712802410125732, -0.8510555624961853, 1.7682099342346191, -0.05494062229990959, -0.463779091835022, -0.674609899520874, -1.0470542907714844, -0.7061686515808105, 0.5484360456466675, -0.15532690286636353, -0.2672249972820282, 0.27987703680992126, 2.6427931785583496, -0.29356881976127625, 0.3292567729949951, -1.2419495582580566, 0.34699106216430664, -0.04926622658967972, -0.18336687982082367, -0.34034329652786255, -0.413806676864624, -0.5709249973297119]"
sc-copilot/DIRECT_DEBIT/direct_debit_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef direct_debit_post_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.6530404686927795, 0.21863608062267303, -3.236323356628418, -0.8654453158378601, 2.1479110717773438, -0.27776697278022766, 0.9636496305465698, 0.08237870782613754, -0.2541893422603607, -0.9312443137168884, -0.9563984274864197, 0.05142740160226822, 1.26571524143219, 0.8478870391845703, -0.20749489963054657, 0.09122312068939209, 0.12399911880493164, -1.2618043422698975, -0.168818861246109, 0.922014594078064, 0.6303120851516724, -0.4847632050514221, -0.7110167741775513, -1.128222942352295, 1.2599287033081055, 0.6499745845794678, 0.3070191740989685, -0.18434025347232819, -0.3841727674007416, 0.5598056316375732, 0.022691741585731506, -0.030429834499955177, 0.30777645111083984, -0.5606353878974915, 0.0060577355325222015, -0.8825370073318481, 0.4123753011226654, -0.07631105929613113, -0.2588191628456116, -1.441831350326538, 0.35987985134124756, 0.20159323513507843, 0.06587830185890198, 0.3077316880226135, 0.361419141292572, -0.5037660002708435, 1.2635655403137207, -0.039102159440517426, -0.01736363023519516, -1.7536540031433105, -0.06555096805095673, -0.244162917137146, 0.34175026416778564, -0.28812330961227417, 1.0046736001968384, 0.45610523223876953, -0.09762253612279892, 1.2233250141143799, -0.28300023078918457, -0.30580902099609375, 2.0199203491210938, 0.5499164462089539, -0.20112423598766327, 0.8639867305755615, 0.5143396258354187, 0.026682551950216293, -0.6386042833328247, 0.2597160339355469, -0.17538711428642273, -0.3523269593715668, 0.22202672064304352, 0.44797706604003906, 0.0761750116944313, 0.41092050075531006, 0.4218045473098755, 0.646186113357544, -0.8039501905441284, -1.7418535947799683, -0.18110862374305725, 0.7733757495880127, -0.23040437698364258, 0.05011481046676636, 1.3407407999038696, -0.6464909911155701, 0.6221954226493835, -0.40055006742477417, 0.11977219581604004, -0.10854834318161011, 0.024439167231321335, 1.1643035411834717, 0.05064794793725014, -0.8971964120864868, 0.339073121547699, 0.24223288893699646, -0.621576189994812, -0.014169186353683472, -0.1957271248102188, 0.31738337874412537, -0.27310287952423096, -0.4130862355232239, -0.018702013418078423, 0.427898108959198, 0.7172091603279114, -0.0005470998585224152, -0.21836110949516296, 0.44440513849258423, 1.1293762922286987, 0.5758833885192871, -0.6697121858596802, -1.4926013946533203, -0.396880567073822, 0.7155219316482544, 0.02640499174594879, -0.06180528551340103, 0.009236857295036316, 0.044064462184906006, 1.8719961643218994, -0.7434613704681396, -1.0880149602890015, 0.7138510942459106, -0.3456466794013977, -0.7142201066017151, 1.5509045124053955, 1.0761395692825317, -0.3278545141220093, -0.3381366431713104, -0.22988630831241608, 0.217673659324646, 0.29829537868499756, -1.0130383968353271, 0.5669722557067871, 0.07069909572601318, -0.8478035926818848, 0.5419191718101501, 0.23735669255256653, 0.5142918825149536, 0.5116426348686218, -0.5067199468612671, -0.08932267874479294, 0.22475367784500122, 0.8061268329620361, -0.11466079205274582, -0.46949827671051025, -0.8338360786437988, -0.07439275830984116, -1.0501914024353027, 0.3808717727661133, -0.5012823343276978, 1.016284704208374, 0.07742255926132202, -0.1210925281047821, -0.29376065731048584, 0.45216768980026245, 0.8892284035682678, 1.2215089797973633, -0.882853627204895, 1.136934518814087, -0.5472334623336792, 0.6220196485519409, 0.061156339943408966, 0.9401047229766846, 0.10615362226963043, -0.08249814808368683, 1.1067512035369873, 0.2829670310020447, -1.1977484226226807, -0.08974970877170563, 0.7109967470169067, 0.3431801497936249, 1.2903168201446533, -0.7931374907493591, -0.30602091550827026, 0.14331182837486267, -0.8033745884895325, 0.5846850872039795, 0.08543848991394043, 0.41625770926475525, -1.0100829601287842, 0.3733632266521454, -1.2875810861587524, 0.5262794494628906, -0.5834563374519348, 0.9538179636001587, 0.41384217143058777, -0.970673680305481, 0.07773254811763763, 1.139193058013916, -0.7314457297325134, -0.8124521374702454, -0.3117819130420685, -0.4166504740715027, 0.6455559730529785, -1.2614085674285889, 0.11765455454587936, -0.989708423614502, -0.40724942088127136, 1.0162585973739624, -0.5042029023170471, 0.344085156917572, 0.1246892437338829, 0.02069878578186035, -0.07388000935316086, -0.0481475293636322, 0.2247658520936966, -0.7429026365280151, 0.6191211938858032, -0.0754072293639183, 0.8235708475112915, 0.2732146382331848, 0.19090110063552856, 1.151197910308838, -0.1507365107536316, -0.624570369720459, -0.024857334792613983, -0.7082235813140869, -0.3731849789619446, -0.33448326587677, -0.1792895495891571, -0.3617843985557556, -0.04039919376373291, -0.13132146000862122, -0.5790417790412903, -0.07541631162166595, 0.6252387762069702, -0.05280786752700806, -0.5918574333190918, -0.9406324028968811, 0.3802788257598877, -0.29490500688552856, -0.09944185614585876, -0.04272845387458801, -0.41191887855529785, -0.515860915184021, 0.31693339347839355, 0.44391876459121704, 1.1949764490127563, 0.07458104938268661, 0.428468257188797, 1.0523935556411743, -0.0008684992790222168, 0.0983702763915062, 0.7527359127998352, 1.0302915573120117, 0.7227159142494202, 0.30174800753593445, 0.6174682378768921, 0.11579728126525879, -0.08492698520421982, -0.3308051824569702, 0.8465577363967896, -0.15822216868400574, -0.6140884160995483, 0.08129382133483887, 0.5197935700416565, -0.16477209329605103, -0.4488376975059509, -1.4411412477493286, -0.7812676429748535, 0.2385263592004776, 0.23598212003707886, 0.9361485242843628, 0.18622863292694092, 0.7485322952270508, -0.4206399917602539, -0.5811141729354858, -0.24681468307971954, -0.8544881343841553, 0.5873680710792542, 0.8286020755767822, -0.32384809851646423, 1.0576564073562622, 0.326465368270874, 0.756583571434021, 1.0164642333984375, 0.30996787548065186, -0.24236756563186646, 0.7137900590896606, -0.6011108160018921, -0.26610854268074036, 1.3017761707305908, -0.46052730083465576, -0.8332485556602478, -0.09144501388072968, 0.6555536389350891, -0.7170770764350891, -0.5088530778884888, 0.1447952687740326, 0.6128718852996826, -0.15663111209869385, 0.24661967158317566, 1.5142934322357178, -0.21617621183395386, -0.8872168064117432, 0.9297692775726318, -0.8875935673713684, -0.05284515768289566, 0.5310230255126953, 0.21932372450828552, -0.14005175232887268, -1.201300859451294, 0.023726511746644974, 0.7079991102218628, 0.8571480512619019, 0.900692880153656, 0.5072377324104309, -0.6897389888763428, 0.5058631300926208, 0.10623937845230103, 0.10400830954313278, -0.05121535807847977, 0.7030187845230103, 0.023118630051612854, -0.8294577598571777, 0.6821601986885071, -1.2787888050079346, 0.9981308579444885, 0.5478496551513672, 0.4144018590450287, -0.050919562578201294, -0.7367083430290222, 0.9022364020347595, -1.4634263515472412, -0.5584139823913574, -0.8192665576934814, 0.47983086109161377, 1.3298184871673584, -0.10583410412073135, 0.6008718609809875, -0.4121354818344116, 0.09194909781217575, 0.8210294842720032, 0.30582574009895325, 0.39471274614334106, -0.7989898920059204, -0.661230742931366, 0.25323382019996643, 0.18747617304325104, 0.030720755457878113, 0.23213642835617065, 0.7576248049736023, 0.6075195074081421, -0.3269369900226593, 0.25783029198646545, -0.4275472164154053, 0.03551509231328964, -0.7745369672775269, -0.7196952104568481, -0.09676859527826309, 0.6654178500175476, 0.6958239078521729, -0.513117253780365, 0.6195773482322693, 0.23372581601142883, -0.19858931005001068, 0.18776199221611023, -0.18276885151863098, 1.147837519645691, 0.9358479976654053, -0.0377543605864048, 0.45059168338775635, 0.8808010816574097, 0.5170443058013916, 0.3086273670196533, -0.394100546836853, 0.5990921258926392, 1.0621832609176636, 0.38786908984184265, -0.17667627334594727, 0.030489526689052582, 0.5446689128875732, -0.161359041929245, -0.08818811178207397, -0.3045990467071533, 0.5875019431114197, 0.06514474749565125, -0.4503312408924103, -0.7315431237220764, -0.48543474078178406, -0.4689719080924988, 0.8873915672302246, 0.6605613231658936, -0.1842869222164154, 0.3059964179992676, 0.23620934784412384, 0.23053032159805298, -0.3869855999946594, 0.021654672920703888, -0.003617525100708008, -0.01655716635286808, -0.23524607717990875, 0.18709994852542877, -0.5420675873756409, 0.37461358308792114, 0.4941377341747284, 0.5297208428382874, -0.7180070281028748, 0.4917422831058502, 0.3975137174129486, 0.5962048172950745, 0.3515956401824951, -0.7830914258956909, -1.467496395111084, 0.42243117094039917, -0.43183082342147827, 0.42979949712753296, 0.14181581139564514, -0.8128170967102051, -1.2311662435531616, 0.9754942655563354, -0.8803474307060242, 0.46498245000839233, 0.21247658133506775, -0.40977537631988525, -0.24699896574020386, 0.6259896159172058, 0.39585936069488525, 0.7131209373474121, 0.5492775440216064, -0.5156503915786743, -0.5857685804367065, 0.9927893280982971, 0.7260817289352417, 0.6537736654281616, -0.05643901973962784, 0.14511168003082275, 0.3967682123184204, 0.514467716217041, 0.3889402747154236, 0.2681850790977478, -1.2601253986358643, -0.23508372902870178, 0.8151411414146423, 0.7617623805999756, 0.2061135172843933, -0.5496597290039062, 0.12570859491825104, -0.045463040471076965, 0.9730972051620483, 0.06774929165840149, 0.4948355555534363, 0.24538831412792206, -0.6023657917976379, 0.09460043907165527, -0.42363882064819336, 0.24227377772331238, 1.2450146675109863, 0.08897443860769272, -0.1686733067035675, -0.08888424932956696, 0.25318241119384766, 0.19423234462738037, 0.45917487144470215, 0.4189431369304657, 0.35405081510543823, 1.0055029392242432, -1.8794586658477783, -0.3693516254425049, 0.06992588192224503, -0.28531813621520996, 0.562512993812561, -0.20863884687423706, -0.08458934724330902, -0.5987817049026489, 0.7789077162742615, -0.04750174656510353, 0.009166128933429718, 0.4960048198699951, -1.1695175170898438, 0.4134148359298706, 0.8679260015487671, -1.4943456649780273, 0.04993520677089691, 0.7380266189575195, -0.8064908981323242, 0.24364344775676727, 0.04082464426755905, 1.0305194854736328, -0.17381219565868378, 0.6619453430175781, 0.8075916767120361, -0.050758589059114456, -0.06234772875905037, -0.6611398458480835, -0.20180271565914154, -0.851677417755127, 0.8794212341308594, 0.4039227366447449, -0.8069359064102173, -0.09365198761224747, -0.2002626210451126, 0.7064849138259888, -0.34649109840393066, -0.0027711689472198486, -0.22975143790245056, -0.08356235921382904, -0.3793431520462036, -0.8454111218452454, -0.014989510178565979, 0.27039605379104614, 0.07342084497213364, -0.3566046953201294, -0.08677107095718384, -0.5917981266975403, 0.12035907804965973, -0.05265204608440399, 0.2774154841899872, 0.5845228433609009, -1.4503412246704102, -1.2635102272033691, -0.6492457389831543, -0.3898991346359253, 0.505032479763031, 1.1328654289245605, -0.019112491980195045, 0.6105256080627441, -0.372365266084671, 0.8315247297286987, -0.329731285572052, -1.1040639877319336, -0.10230404138565063, 0.05342860147356987, -0.19074401259422302, 0.15299884974956512, -0.8552582263946533, -0.7483810782432556, 0.0545307919383049, -0.25961434841156006, -0.9063014984130859, 0.791812539100647, -0.5705482959747314, -0.19456669688224792, 0.21571680903434753, -0.5677695870399475, -0.46429604291915894, 0.10675089806318283, -0.5012751817703247, -0.5773791074752808, 0.3576844334602356, -0.0684313178062439, 0.0029192715883255005, 0.6676753759384155, 0.20706681907176971, -0.06198187544941902, 0.5134446620941162, 0.3958331346511841, -1.4292175769805908, 0.4234219789505005, -0.11367711424827576, -0.08228647708892822, -1.6453967094421387, 0.8280467391014099, -0.32147490978240967, -0.5427194833755493, -1.0995264053344727, 0.11858019977807999, 0.31260576844215393, -0.6254492998123169, -0.6624577045440674, -0.7142927050590515, -0.2970491051673889, 0.5730379819869995, 0.4651355743408203, 0.6104201674461365, 0.5064300298690796, 0.3242092430591583, 0.32769715785980225, 0.6199832558631897, 0.5414892435073853, -0.019374094903469086, 0.5113657116889954, -0.09261245280504227, -1.0323594808578491, -0.323748916387558, -0.5907066464424133, -0.02745620161294937, 0.41482746601104736, -0.5917607545852661, 0.28696829080581665, -1.6928424835205078, -0.1186494380235672, -0.023843690752983093, -0.19596999883651733, 0.1787981390953064, 1.1588332653045654, 0.07169179618358612, -0.44954341650009155, -0.25202977657318115, -0.8801773190498352, 0.11127657443284988, -0.6274980902671814, -0.2899016737937927, 0.31977319717407227, -0.28986096382141113, -0.39944344758987427, 0.09149259328842163, 1.09279203414917, -0.1507766991853714, -1.1731390953063965, -0.21275940537452698, -0.48740458488464355, 0.7171027660369873, -0.8911087512969971, 1.1586182117462158, -1.2267816066741943, -0.3454959988594055, 1.1667592525482178, 0.6868886947631836, -0.30661797523498535, -0.8161114454269409, -0.4743868112564087, -0.6339659690856934, -0.18127025663852692, -0.3656598925590515, -0.18274948000907898, 0.5623443722724915, -1.0927231311798096, 0.38655146956443787, 0.8615789413452148, -0.7055121660232544, -0.27709531784057617, -0.6835846304893494, -1.2072620391845703, 1.1899439096450806, -0.4003162384033203, 0.1594036966562271, 0.091209277510643, -0.5646728277206421, -0.3223843276500702, -0.48217326402664185, 0.6966110467910767, 0.2269192337989807, 1.1203885078430176, -2.0565342903137207, -1.420623779296875, -1.3020625114440918, 0.48416057229042053, 0.11308122426271439, 0.9494447708129883, -0.07402116060256958, 0.8708804845809937, 0.3401678800582886, 0.22833192348480225, 0.1712418496608734, 0.41106125712394714, -0.18634872138500214, -0.7277801036834717, 0.552448034286499, 0.47708630561828613, 0.794597864151001, 0.4014418423175812, 2.1893749237060547, 0.9084163904190063, 0.9863269925117493, 0.6135976314544678, 0.692328691482544, -0.36697056889533997, 0.5257534980773926, -1.3027470111846924, -1.5951550006866455, -0.41503286361694336, -0.22786667943000793, -0.3513515889644623, -0.37828272581100464, -0.1363224983215332, 0.6616352200508118, -0.5553485155105591, -0.10316318273544312, -0.3431602120399475, -0.7436131238937378, -0.34397611021995544, 0.40171319246292114, 0.07487018406391144, 0.8573073744773865, 0.4781455993652344, 0.9643630385398865, 0.22597062587738037, 0.21986496448516846, 0.6163712739944458, -0.08097265660762787, 0.11390047520399094, 0.9924147129058838, 0.279651403427124, 0.19739307463169098, -0.9954119920730591, 0.04421594738960266, -0.032735425978899, 0.309460312128067, -0.5750560164451599, -0.22197361290454865, -0.5545780062675476, -0.22639571130275726, -0.23177826404571533, 0.20849153399467468, 0.004871360957622528, -0.29532933235168457, 0.12242023646831512, 0.15783284604549408, -1.6297919750213623, 0.06690891087055206, 0.3990393280982971, -0.8314868211746216, 0.026292666792869568, 0.7054186463356018, 0.02883383072912693, 0.026494178920984268, -0.07959078252315521, -0.19906893372535706, -0.4966915249824524, -1.2981412410736084, -0.7489631175994873, 0.08920557796955109, -0.5385667085647583, -0.8011932373046875, 0.14161913096904755, 0.56678706407547, 0.05476174131035805, -0.33637887239456177, -0.8918843865394592, -0.05904857814311981, -0.5476232767105103, 1.176088571548462, -0.28927600383758545, -1.3941779136657715, -0.33614641427993774, -0.2702372968196869, -0.13411179184913635, 0.2785354256629944, -0.5274309515953064, 0.08824091404676437, -0.48245489597320557, -0.3370368778705597, -0.31085336208343506, -0.5086684226989746, 0.5480709075927734, -1.1874403953552246, -0.11586757004261017, -0.0764114037156105, -0.018937721848487854, -0.737791895866394, 0.0563046932220459, -1.0028026103973389, -0.4418501853942871, -0.6129194498062134, 1.0677345991134644, -0.30142876505851746, -0.15926557779312134, -0.5036763548851013, 0.18810759484767914, 0.576907753944397, -0.11120390146970749, -0.5950044393539429, -0.5244725942611694, -1.025741457939148, -0.44608768820762634, 0.17156633734703064, -0.5944912433624268, 0.19642490148544312, 0.1927320659160614, 2.149580955505371, 0.4255867600440979, 0.3080265522003174, -0.45303553342819214, 0.795182466506958, 0.2078096568584442, -0.5990128517150879, -1.2398967742919922, -0.47431570291519165, -0.3470728397369385]"
sc-copilot/DIRECT_DEBIT/direct_debit_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef direct_debit_pre_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.5844272971153259, 0.29050540924072266, -3.2710139751434326, -0.8861572742462158, 2.052995443344116, -0.26511716842651367, 1.0280661582946777, 0.10060463100671768, -0.3774101734161377, -0.9881464242935181, -1.0484094619750977, 0.24695006012916565, 1.3227403163909912, 0.9788503646850586, -0.24300101399421692, 0.053145118057727814, 0.11944545805454254, -1.2079049348831177, -0.04255836457014084, 0.9534149765968323, 0.48103195428848267, -0.5651669502258301, -0.7264852523803711, -1.1960833072662354, 1.0812029838562012, 0.4722325801849365, 0.2727120816707611, -0.12164515256881714, -0.41182148456573486, 0.6584419012069702, 0.11133713275194168, 0.01632620580494404, 0.20771276950836182, -0.7089406251907349, -0.009908057749271393, -0.9805500507354736, 0.45052823424339294, 0.061891958117485046, -0.2818143963813782, -1.567868709564209, 0.4374149441719055, 0.19447147846221924, 0.13001200556755066, 0.2092970460653305, 0.38043609261512756, -0.40696245431900024, 1.3974412679672241, -0.04987478256225586, 0.05735550448298454, -1.7220282554626465, -0.14832325279712677, -0.013873681426048279, 0.28154557943344116, -0.23175325989723206, 1.1582789421081543, 0.4382029175758362, -0.2440682202577591, 1.175391674041748, -0.3092246651649475, -0.23988227546215057, 2.0997843742370605, 0.6355271339416504, -0.11938738822937012, 0.8916537761688232, 0.6732494831085205, 0.018270693719387054, -0.6058893203735352, 0.2582838535308838, -0.0405503511428833, -0.34298521280288696, 0.2512189745903015, 0.5376604199409485, 0.01240580528974533, 0.33015498518943787, 0.5290583968162537, 0.5655289888381958, -0.8292932510375977, -1.674849510192871, -0.1548900306224823, 0.728369414806366, -0.11928175389766693, 0.21305975317955017, 1.4234014749526978, -0.7281219959259033, 0.6229395866394043, -0.340870201587677, 0.09005143493413925, -0.11410151422023773, -0.010819397866725922, 1.234768033027649, 0.006619587540626526, -0.8940794467926025, 0.28400707244873047, 0.3069172501564026, -0.6805384159088135, 0.011310212314128876, -0.37739047408103943, 0.4000583291053772, -0.19787296652793884, -0.5869467258453369, 0.020348474383354187, 0.32981187105178833, 0.7119449377059937, 0.061294637620449066, -0.3142223656177521, 0.3477025032043457, 0.9764056205749512, 0.38859665393829346, -0.5616337060928345, -1.4556248188018799, -0.4771058261394501, 0.8436466455459595, -0.007846258580684662, 0.03765677660703659, 0.01153794676065445, 0.09466475248336792, 1.866781234741211, -0.6495743989944458, -1.0734225511550903, 0.6782668232917786, -0.384115070104599, -0.8526803255081177, 1.6159889698028564, 1.073062539100647, -0.5056300163269043, -0.1901700794696808, -0.4225916862487793, 0.32811635732650757, 0.5685233473777771, -0.9985498189926147, 0.5479535460472107, 0.10227656364440918, -0.7904704809188843, 0.6309353709220886, 0.15034033358097076, 0.5322961807250977, 0.4371277093887329, -0.506899356842041, -0.2504998445510864, 0.31155285239219666, 0.8283851146697998, -0.11176401376724243, -0.6133595705032349, -0.8635610938072205, -0.09810268133878708, -1.0590178966522217, 0.5063114166259766, -0.49185216426849365, 1.0507906675338745, 0.13665926456451416, -0.09747157245874405, -0.2424110621213913, 0.35357630252838135, 1.0135552883148193, 1.281907320022583, -0.8514316082000732, 1.1387343406677246, -0.6153687834739685, 0.5878798961639404, 0.008821945637464523, 0.8024388551712036, 0.1126808300614357, 0.04188733175396919, 1.0497615337371826, 0.18473464250564575, -1.1838574409484863, -0.08154010772705078, 0.9231374263763428, 0.395169734954834, 1.2637253999710083, -0.7421895265579224, -0.20472517609596252, 0.0895753800868988, -0.7591561079025269, 0.5890724658966064, 0.24183309078216553, 0.43928587436676025, -0.9326299428939819, 0.391871839761734, -1.2949827909469604, 0.5059096217155457, -0.47060954570770264, 0.9295357465744019, 0.49785560369491577, -1.03702974319458, -0.08306917548179626, 1.0345968008041382, -0.6222702264785767, -0.5893122553825378, -0.4359890818595886, -0.5437972545623779, 0.7096073031425476, -1.258608341217041, -0.06931418925523758, -0.8288482427597046, -0.5132819414138794, 1.024827241897583, -0.3549770712852478, 0.37594491243362427, 0.05671168118715286, 0.037158526480197906, -0.12556162476539612, -0.05654042959213257, 0.22608083486557007, -0.801767110824585, 0.7486292719841003, 0.01850869134068489, 0.7027255892753601, 0.33748772740364075, 0.10908570885658264, 1.2725814580917358, -0.06317391246557236, -0.5837857127189636, -0.12435781210660934, -0.4147009253501892, -0.22032961249351501, -0.4002392292022705, -0.20403876900672913, -0.2925536036491394, 0.024541664868593216, -0.4933738708496094, -0.6880159378051758, -0.16241614520549774, 0.6298712491989136, -0.029294118285179138, -0.6799468994140625, -0.9013413190841675, 0.2584531903266907, -0.45275306701660156, -0.141871377825737, -0.22435738146305084, -0.42463284730911255, -0.5134209394454956, 0.37099337577819824, 0.3646237254142761, 1.0967860221862793, -0.06117597222328186, 0.3841314911842346, 0.9033430218696594, 0.016416974365711212, 0.05693155527114868, 0.8495087623596191, 0.8938048481941223, 0.8660130500793457, 0.24026204645633698, 0.3972967267036438, 0.3403000235557556, -0.15138515830039978, -0.36652669310569763, 0.9008488655090332, -0.24484002590179443, -0.5368704795837402, 0.07005784660577774, 0.4669482707977295, -0.22121760249137878, -0.23107454180717468, -1.3828396797180176, -0.7496781349182129, 0.216454416513443, 0.08887520432472229, 0.8958419561386108, 0.26001203060150146, 0.8400648236274719, -0.48786258697509766, -0.563379168510437, -0.12623128294944763, -1.0217547416687012, 0.4989137053489685, 0.8996918201446533, -0.3383287191390991, 1.134031057357788, 0.23410356044769287, 0.7095147371292114, 0.9801453351974487, 0.345422625541687, -0.1319524645805359, 0.6293067336082458, -0.515692412853241, -0.24171192944049835, 1.3256886005401611, -0.44124507904052734, -0.8323570489883423, -0.0675412267446518, 0.7231539487838745, -0.5736192464828491, -0.34723907709121704, 0.214087575674057, 0.6000095009803772, -0.07457862049341202, 0.17290040850639343, 1.4928958415985107, -0.18321166932582855, -0.80609130859375, 0.8816533088684082, -0.9483088254928589, -0.08087968081235886, 0.4372576177120209, 0.35151252150535583, -0.11379192024469376, -0.9998990297317505, -0.005740109831094742, 0.74878990650177, 0.8523626327514648, 0.7836501598358154, 0.48418259620666504, -0.7336022853851318, 0.572258472442627, 0.259682297706604, 0.2505452334880829, -0.41893553733825684, 0.4338676333427429, -0.13479220867156982, -1.1609461307525635, 0.6485007405281067, -1.3789536952972412, 1.0376744270324707, 0.641246497631073, 0.5457543134689331, 0.08084471523761749, -0.6942557692527771, 0.7543972134590149, -1.3434088230133057, -0.7272480726242065, -0.9088075160980225, 0.3140389323234558, 1.3100228309631348, 0.028633736073970795, 0.5691419839859009, -0.3921022415161133, 0.17213577032089233, 0.8341063857078552, 0.3256678581237793, 0.5298649668693542, -0.8014269471168518, -0.6711341142654419, 0.12265567481517792, 0.1379062831401825, -0.03583744913339615, 0.13818401098251343, 0.8162294030189514, 0.6764721274375916, -0.26018667221069336, 0.1781432330608368, -0.33441227674484253, 0.07077236473560333, -0.822716236114502, -0.5201396346092224, 0.0028802119195461273, 0.7230467200279236, 0.7155956029891968, -0.5131576657295227, 0.6692181825637817, 0.09506430476903915, -0.09167338162660599, 0.24540962278842926, -0.1762257218360901, 1.043778419494629, 0.9152451753616333, -0.08584737032651901, 0.33884280920028687, 0.8904195427894592, 0.427534282207489, 0.20589137077331543, -0.2927634119987488, 0.6522185802459717, 0.930921733379364, 0.3834778070449829, -0.17276860773563385, 0.15895111858844757, 0.5813390016555786, -0.04104847088456154, 0.0024108998477458954, -0.2858642041683197, 0.6041332483291626, 0.06666816771030426, -0.47137323021888733, -0.6709469556808472, -0.5493581295013428, -0.3415367603302002, 0.7662453651428223, 0.6279672384262085, -0.20003879070281982, 0.35646161437034607, 0.3134889006614685, 0.22217562794685364, -0.33530187606811523, 0.09879714250564575, -0.03448709100484848, 0.044285424053668976, -0.2538132071495056, 0.17476359009742737, -0.43827545642852783, 0.33718669414520264, 0.5314933061599731, 0.47685354948043823, -0.5966390371322632, 0.7183352112770081, 0.29136544466018677, 0.6192755699157715, 0.3844563364982605, -0.9652718305587769, -1.3262677192687988, 0.5064130425453186, -0.5497051477432251, 0.4168560802936554, 0.16199444234371185, -0.7584806680679321, -1.2128610610961914, 1.0000412464141846, -0.7940686941146851, 0.5248920321464539, 0.134209543466568, -0.3917969763278961, -0.11863084137439728, 0.6339529156684875, 0.4192692041397095, 0.7328226566314697, 0.4762824773788452, -0.47582152485847473, -0.44714459776878357, 0.8720827102661133, 0.8042597770690918, 0.7058196067810059, -0.020904144272208214, 0.04181090369820595, 0.4543688893318176, 0.47484660148620605, 0.35765084624290466, 0.2737688720226288, -1.173828363418579, -0.2280474603176117, 0.7867608666419983, 0.6867565512657166, 0.07394824177026749, -0.633064329624176, 0.16832278668880463, -0.14929860830307007, 0.9121337532997131, -0.1081840917468071, 0.5643837451934814, 0.15205788612365723, -0.5004645586013794, 0.008182507008314133, -0.43937546014785767, 0.22716808319091797, 1.3365265130996704, 0.2064969539642334, -0.009557504206895828, -0.06029001995921135, 0.4738170802593231, 0.25207361578941345, 0.5396896004676819, 0.6177377700805664, 0.44312387704849243, 0.9193357229232788, -1.8262660503387451, -0.2907758951187134, 0.04022297263145447, -0.2964790463447571, 0.45667698979377747, -0.16881802678108215, 0.07918199151754379, -0.5169188380241394, 0.764610767364502, -0.1113094612956047, 0.01681865006685257, 0.5911946296691895, -1.1090431213378906, 0.3811337351799011, 0.8695780634880066, -1.4697961807250977, -0.04666134715080261, 0.7181819677352905, -0.7588963508605957, 0.23258499801158905, 0.13098348677158356, 1.0211046934127808, -0.28494811058044434, 0.6671051979064941, 0.8969566226005554, -0.13061940670013428, 0.11505108326673508, -0.8739764094352722, -0.20158950984477997, -0.7586072683334351, 1.0114407539367676, 0.5642861127853394, -0.6769716739654541, -0.08386719971895218, -0.22579164803028107, 0.7649115920066833, -0.4491649270057678, 0.05311628803610802, -0.15858986973762512, -0.10514451563358307, -0.5025741457939148, -0.892390787601471, 0.16316089034080505, 0.3172907531261444, 0.10748422145843506, -0.3604128956794739, -0.017316050827503204, -0.6187950372695923, -0.0023901015520095825, 0.172453835606575, 0.12297383695840836, 0.4298420548439026, -1.492735505104065, -1.3512682914733887, -0.5725401639938354, -0.4921654760837555, 0.5980059504508972, 1.0877283811569214, -0.022354938089847565, 0.6786798238754272, -0.39188194274902344, 0.91401606798172, -0.36264631152153015, -1.039206624031067, -0.07039908319711685, -0.11831963807344437, -0.22020570933818817, 0.1476447880268097, -0.6731621026992798, -0.8619221448898315, -0.004621770232915878, -0.0026149116456508636, -0.7816826105117798, 0.6754158139228821, -0.5804859399795532, -0.1926494687795639, 0.1467783898115158, -0.516081690788269, -0.34699660539627075, 0.1499347686767578, -0.39904963970184326, -0.7126227617263794, 0.25282570719718933, -0.10957466065883636, -0.0718810111284256, 0.5335884690284729, 0.21778516471385956, 0.011046787723898888, 0.5270987153053284, 0.4120517373085022, -1.4114441871643066, 0.24838048219680786, -0.058784566819667816, -0.07868524640798569, -1.7677761316299438, 0.8944125175476074, -0.35501766204833984, -0.5742996335029602, -1.0560799837112427, 0.0911826342344284, 0.36991775035858154, -0.6941894292831421, -0.629885196685791, -0.6004248857498169, -0.15065090358257294, 0.5126667022705078, 0.4263935387134552, 0.6284704804420471, 0.47325342893600464, 0.296867698431015, 0.3618727922439575, 0.6899363994598389, 0.5975339412689209, 0.08600276708602905, 0.5644867420196533, -0.2130463570356369, -1.1224936246871948, -0.42446523904800415, -0.5731493234634399, -0.02197445183992386, 0.3916687071323395, -0.603039026260376, 0.26776155829429626, -1.530862808227539, -0.16066157817840576, -0.15584179759025574, -0.05257175862789154, 0.1883053183555603, 1.124677062034607, 0.013598717749118805, -0.4466060996055603, -0.21133504807949066, -0.8810731172561646, -0.14247924089431763, -0.7745084762573242, -0.4857083857059479, 0.37417852878570557, -0.1925162374973297, -0.6087683439254761, 0.051790595054626465, 1.295589804649353, -0.04317653924226761, -1.13791823387146, -0.29495713114738464, -0.48751068115234375, 0.4887305200099945, -0.8852973580360413, 1.1672910451889038, -1.216617465019226, -0.2909202575683594, 1.0606237649917603, 0.6270842552185059, -0.08161687105894089, -0.7742527723312378, -0.288483202457428, -0.42462384700775146, -0.3547097444534302, -0.38012972474098206, -0.49175119400024414, 0.5946774482727051, -1.0419697761535645, 0.4572731554508209, 0.9278528690338135, -0.6319804191589355, -0.27067747712135315, -0.5193014740943909, -1.0147514343261719, 1.1020848751068115, -0.3853202760219574, 0.20417436957359314, 0.004675589501857758, -0.5630143880844116, -0.3871617913246155, -0.4970824122428894, 0.6953591108322144, 0.19386842846870422, 1.0467932224273682, -2.08500075340271, -1.2457771301269531, -1.0999163389205933, 0.4951653778553009, 0.24677994847297668, 0.7851142287254333, -0.1767508089542389, 0.7739232778549194, 0.513461709022522, 0.3191104531288147, 0.2216217815876007, 0.3597177267074585, -0.17191150784492493, -0.5856921672821045, 0.5678189396858215, 0.5166359543800354, 0.9063730239868164, 0.33429229259490967, 2.041760206222534, 0.8209334015846252, 1.047615885734558, 0.457919716835022, 0.6620297431945801, -0.48190805315971375, 0.7070305347442627, -1.4039052724838257, -1.8043954372406006, -0.38720405101776123, -0.2539474368095398, -0.46143266558647156, -0.48924198746681213, 0.07475487887859344, 0.7894060611724854, -0.5317733883857727, -0.008868448436260223, -0.2591656744480133, -0.7622637748718262, -0.3968372941017151, 0.31372565031051636, 0.17370635271072388, 0.8131204843521118, 0.2609500288963318, 0.9345337152481079, 0.317292183637619, 0.27066266536712646, 0.5771070122718811, -0.13476742804050446, 0.07623662054538727, 0.7888662815093994, 0.3312228322029114, 0.22247479856014252, -1.032952070236206, -0.0681348592042923, 0.017598658800125122, 0.13932690024375916, -0.6318659782409668, -0.2678471505641937, -0.5926966071128845, -0.34997010231018066, -0.3775750994682312, 0.17304131388664246, -0.05786333233118057, -0.11678019165992737, -0.09029130637645721, 0.13324828445911407, -1.6868280172348022, -0.07172521203756332, 0.46300360560417175, -0.8930577039718628, -0.00036117807030677795, 0.8439357280731201, 0.01030830666422844, -0.09720996022224426, 0.012969091534614563, -0.057750944048166275, -0.28209781646728516, -1.2909939289093018, -0.7670365571975708, -0.15982604026794434, -0.5347259044647217, -0.8088964223861694, 0.1788249909877777, 0.40194591879844666, 0.07285520434379578, -0.33776411414146423, -0.9576433300971985, -0.03649324178695679, -0.5196606516838074, 1.075835943222046, -0.26672953367233276, -1.5334492921829224, -0.20528607070446014, -0.22868336737155914, -0.19097700715065002, 0.26029807329177856, -0.4397561550140381, 0.07115761935710907, -0.5166789889335632, -0.4240284264087677, -0.37036433815956116, -0.5106343030929565, 0.645304799079895, -1.2678658962249756, -0.012517879717051983, -0.23447012901306152, -0.03412371501326561, -0.6763487458229065, 0.09135778248310089, -1.1778404712677002, -0.28008556365966797, -0.7451615333557129, 0.9977539777755737, -0.29703786969184875, -0.053462348878383636, -0.43608030676841736, 0.11578875035047531, 0.34892386198043823, -0.06183595955371857, -0.6046968698501587, -0.5642247200012207, -0.8921120166778564, -0.5440488457679749, 0.07741054892539978, -0.6323046684265137, -0.0055014342069625854, 0.1409815102815628, 2.1612486839294434, 0.3433743715286255, 0.2880857288837433, -0.5137939453125, 1.0150517225265503, 0.24284502863883972, -0.618208646774292, -1.142282485961914, -0.4802282154560089, -0.39224788546562195]"
sc-copilot/INTEREST PAYMENT SCHEDULE/interest_payment_test.py,def test_interest_payment_schedule_code(self):\n    # Test implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.5739306807518005, 0.6219993829727173, -3.24377703666687, -0.8070513010025024, 0.8328475952148438, -1.3173168897628784, 1.1139565706253052, -0.5056335926055908, 0.7200438976287842, 0.03765825182199478, -0.1762186884880066, 1.206762671470642, 0.4640926122665405, 0.5836350917816162, -1.4046260118484497, -0.5349818468093872, 0.7374520897865295, -0.3160904049873352, -0.459152489900589, 0.3392677903175354, 0.5270161628723145, 0.11384264379739761, -1.2387175559997559, -0.7990121841430664, 1.056061029434204, -0.18065983057022095, 0.04097762703895569, 0.5918558239936829, -0.6629573106765747, 0.16887179017066956, -0.006768122315406799, 0.26990652084350586, 1.044668436050415, -1.517571210861206, -0.8468654155731201, -0.502496063709259, 0.6155890226364136, 0.8852907419204712, -0.2272970825433731, -0.37002819776535034, -0.5329009890556335, 0.8982862234115601, -0.2208033800125122, 0.45226043462753296, 2.00199031829834, -1.0587663650512695, 1.7485847473144531, 1.2074687480926514, 0.3204830288887024, -0.8034272789955139, 0.3369043469429016, -0.8958448767662048, 0.6357567310333252, 0.3609691262245178, 0.7005356550216675, 0.5701318383216858, -0.940941572189331, 0.8940123915672302, 0.2648278474807739, -0.5575816631317139, 1.1164298057556152, 1.0704668760299683, -0.33226433396339417, 0.7256968021392822, -0.13797025382518768, 0.43147334456443787, -0.940976619720459, -0.047602348029613495, -0.5139530897140503, 0.6930246353149414, 0.2617616653442383, 0.36719024181365967, 0.4745483696460724, -0.8828250169754028, 0.23792801797389984, 0.1539832204580307, -0.36383500695228577, -0.08161039650440216, -0.8868905305862427, -0.08946625143289566, -0.1252783238887787, -0.4826950430870056, 0.7304456233978271, 0.5771703124046326, 0.7057254314422607, -0.8639694452285767, 0.0032338332384824753, -1.064650058746338, -0.05659131705760956, 1.5797710418701172, -0.38365307450294495, -0.4049101173877716, -0.25868406891822815, 0.8387146592140198, -1.3431143760681152, -0.12159015238285065, -0.3946149945259094, 0.6190551519393921, -0.5475714206695557, -0.03470410779118538, -0.26302626729011536, -0.20918574929237366, -0.06355609744787216, -0.5712180137634277, -0.4850444793701172, 0.29714375734329224, -0.26825740933418274, -0.29313915967941284, 0.08365629613399506, -1.0636478662490845, -0.2028331458568573, 1.2086608409881592, -0.7818378210067749, -0.047924209386110306, -0.5996079444885254, -0.1688719093799591, 0.8183444738388062, -0.4896300435066223, -0.6115731596946716, 0.40449532866477966, -1.367764949798584, -0.420596182346344, 0.5160964727401733, 2.0860512256622314, -1.069177508354187, 1.333951473236084, -1.0233341455459595, 1.0136289596557617, 0.7509546279907227, -0.0668974220752716, 0.4117451012134552, 0.21212726831436157, -1.0841209888458252, -0.30576857924461365, -0.7390570640563965, -0.31122350692749023, 0.1582479476928711, -0.619158148765564, -0.598804235458374, 0.14873841404914856, -0.4105474054813385, -0.41582971811294556, -0.46203768253326416, 0.0020213723182678223, -0.14214426279067993, -0.6490883827209473, 0.3813285231590271, -1.307936191558838, -0.2360198050737381, -0.6155158877372742, 0.28604286909103394, 0.7863518595695496, 0.8526369333267212, 0.18466490507125854, 0.6513125896453857, -0.574378490447998, 0.19535744190216064, -0.7779971361160278, 0.9078797698020935, 1.2384462356567383, 0.16632616519927979, -0.06442174315452576, -0.6376477479934692, 0.6360868215560913, -0.5739122629165649, -1.3134099245071411, 0.06645247340202332, 1.982008695602417, 0.4653257727622986, -0.4001820385456085, -0.6428763270378113, -1.0294986963272095, -0.45989102125167847, -0.6581706404685974, 0.47252437472343445, 0.1587134599685669, 0.3701901137828827, -0.08498086035251617, 1.1460875272750854, -0.1963985711336136, 0.09569306671619415, -0.38082706928253174, 0.23126809298992157, 0.8494219779968262, -0.5635812282562256, -0.4474228024482727, 0.6390185356140137, -0.6663429737091064, -0.21970853209495544, -0.8706613779067993, 0.19794420897960663, -0.14392265677452087, -0.9134070873260498, -0.5728238821029663, -1.1803524494171143, -0.9841881990432739, 0.04877889156341553, 0.4835599660873413, 0.6144461631774902, -0.09748689085245132, -0.37719160318374634, -0.2188793420791626, -0.6450145244598389, 0.3193669021129608, -0.46248042583465576, 0.14609982073307037, -0.6089255213737488, -0.8914395570755005, -0.045616552233695984, -0.20641030371189117, 1.9081552028656006, 0.33748742938041687, -0.6879522800445557, 0.6509753465652466, 0.5790137052536011, 0.157632976770401, -0.3248858153820038, -0.6410311460494995, -1.0391597747802734, 0.3811599612236023, 1.0360881090164185, -1.1245002746582031, 0.45153000950813293, -0.5788577198982239, 0.4519211947917938, 0.25048956274986267, -0.45945408940315247, 0.8145625591278076, -0.42966973781585693, -0.5195963978767395, -0.0761050283908844, -1.2213594913482666, -0.45428839325904846, 0.04629333317279816, 0.47507181763648987, 1.2273075580596924, -0.3037055432796478, 0.7800025939941406, 0.9739151000976562, -0.5290085673332214, -0.5099302530288696, 0.5476295351982117, 0.2210066020488739, 0.5885700583457947, -0.03830844908952713, 0.25312507152557373, -0.17817196249961853, -0.1635003238916397, 0.44783928990364075, 1.147173285484314, -0.10377936065196991, 0.5799427032470703, -0.16360430419445038, 0.9147343039512634, 0.19690556824207306, 0.4091838598251343, 0.21448731422424316, -1.1005445718765259, 0.46716731786727905, 0.278353214263916, 0.5405905246734619, 0.0846041664481163, 1.9238678216934204, -0.4327342212200165, -1.3743782043457031, -1.4994208812713623, -0.5100555419921875, 0.1320207118988037, -0.29121336340904236, -0.14341187477111816, 0.05234529823064804, 0.8263581395149231, 1.1782255172729492, 1.224209189414978, 0.10969872772693634, -0.6155622005462646, 0.4623783826828003, -0.404055655002594, -0.38811320066452026, 1.0773799419403076, -0.6559061408042908, -1.0897763967514038, -0.32129713892936707, 0.5857197642326355, -0.04340878129005432, 0.39614975452423096, -0.1069212481379509, 0.14105862379074097, 0.28231412172317505, 0.2635372281074524, 1.045208215713501, 0.030602306127548218, -0.2372817099094391, 1.2597734928131104, -0.12997637689113617, -0.3277653455734253, 0.45387864112854004, 0.06481986492872238, 0.223874032497406, -0.41250964999198914, 0.17232085764408112, 0.5707861185073853, 0.4658357501029968, 1.5750023126602173, 0.4797873795032501, -0.6105762720108032, 0.8727782964706421, -0.8456679582595825, 0.5618609189987183, 0.3004816174507141, 0.11498665809631348, 0.028533073142170906, -1.1101034879684448, -0.16510997712612152, -1.5143685340881348, 0.7881733775138855, 0.3181394338607788, 0.32605427503585815, 0.14931626617908478, -0.5726498961448669, 0.7051040530204773, -0.29381832480430603, 0.36061060428619385, -0.7471025586128235, -0.251591295003891, 0.8038219809532166, -0.5176311135292053, 0.4930054545402527, -0.42206791043281555, -0.17110969126224518, 0.5576645135879517, 1.1228790283203125, 0.6247929334640503, -0.6638901233673096, 0.3427622318267822, -0.6681768298149109, -0.17136037349700928, 0.575589120388031, -0.9846318960189819, 0.8254770040512085, 0.6681129336357117, -0.639849066734314, 0.9190582036972046, -1.8386635780334473, -0.3258437216281891, -0.6999518275260925, 0.22776716947555542, 0.6037493348121643, 0.7909154891967773, -0.3292437195777893, -0.890430212020874, 0.1929248571395874, -0.1934480518102646, -0.03550634905695915, 0.9602501392364502, -0.23124606907367706, 0.8609496355056763, 0.8042711019515991, -0.06933627277612686, 0.016580849885940552, 0.2550802230834961, -0.14851029217243195, -0.08946485817432404, -0.5472187399864197, 0.5076555013656616, 0.26265019178390503, 0.5276158452033997, 0.12873375415802002, 0.4618411064147949, 0.2613367438316345, -0.5813079476356506, 0.5296059846878052, 0.8941802978515625, 1.048403263092041, 1.453303337097168, 0.12973010540008545, -1.6680879592895508, 0.7869559526443481, -0.047116849571466446, 0.5939086079597473, 0.9121452569961548, -0.219558984041214, 0.3888111710548401, -0.2726024389266968, 0.1076301857829094, -0.05606677755713463, 0.20970483124256134, 0.20068281888961792, -0.3108198046684265, 0.13411405682563782, 0.5926837921142578, 0.13700531423091888, -0.440441370010376, 0.524070143699646, 0.9000687599182129, -0.9546509981155396, 0.6505917906761169, 0.7473810911178589, 0.17401443421840668, -0.19558759033679962, -0.13338381052017212, -1.3708949089050293, 0.5138154029846191, 0.07227760553359985, 0.11581504344940186, 0.3356378674507141, -1.505324125289917, -1.1230194568634033, -0.14219993352890015, 0.007304325699806213, -0.3017024099826813, -0.3131740689277649, -0.3524477481842041, -0.38573896884918213, 0.11872650682926178, -0.1629324108362198, 1.308305263519287, 1.0223361253738403, -0.2861812710762024, -0.0131303071975708, 0.8308294415473938, -0.0036440789699554443, 0.5569759607315063, -0.44959756731987, -0.5180216431617737, -0.053002096712589264, 0.43640029430389404, 0.6246723532676697, 0.41901615262031555, -1.8972594738006592, -0.4915449023246765, 0.8309768438339233, 0.5454900860786438, -0.3102607727050781, -0.6570686101913452, -0.06009148061275482, -0.049253761768341064, 0.8236230611801147, -0.16739767789840698, 0.41464364528656006, -0.5276727676391602, -0.7370809316635132, 0.021251294761896133, -1.005018711090088, 0.5931661128997803, 1.868653655052185, 0.37991824746131897, -0.6114398837089539, -0.12073048949241638, -0.13732551038265228, -0.031286947429180145, 0.7414951920509338, 0.024781007319688797, 1.0435092449188232, 0.29753318428993225, -1.1230812072753906, -0.04191160202026367, -0.5210105180740356, 0.20406915247440338, 0.9574452638626099, 0.10635708272457123, 0.07078340649604797, -0.9761977195739746, 0.6229017972946167, 0.32249903678894043, 0.6508455276489258, 0.8674205541610718, -1.0399712324142456, 0.036063626408576965, 0.8328803181648254, 0.0006871968507766724, -0.3135218024253845, 0.6795834302902222, -0.09915898740291595, -0.25342699885368347, -0.04769337177276611, 0.2541492283344269, 0.7434579133987427, 0.10296814888715744, 0.36035141348838806, -0.4854658842086792, -0.9104841351509094, -0.8074350357055664, -0.1733153611421585, 0.0756058618426323, 0.901885449886322, 0.9403715133666992, -0.6593225002288818, 0.07040822505950928, -0.8324615955352783, 0.6565980911254883, -0.36156442761421204, 0.30646950006484985, -0.2946702539920807, -0.22676274180412292, -0.17006757855415344, 0.3494601249694824, 0.7715790271759033, 0.2298225313425064, 0.07213780283927917, 0.04221242666244507, 1.1081500053405762, -0.5502936840057373, -1.2229773998260498, 0.44606834650039673, 0.291032612323761, 0.7241767644882202, -1.2783229351043701, -1.2780624628067017, -0.03413715958595276, -0.5295737385749817, 0.5063493847846985, 0.8670088052749634, -0.3074588179588318, 0.9729095101356506, -0.006979010999202728, 0.3846278786659241, -1.3546128273010254, -1.3703725337982178, -0.030212216079235077, 0.18360671401023865, -0.20403556525707245, -0.4273693859577179, -0.06904275715351105, -1.08733069896698, 0.14421328902244568, -0.6437669992446899, -1.4719469547271729, 0.7105661034584045, -0.2182609885931015, 0.1971925050020218, 0.5983892679214478, -0.8068350553512573, -0.13833561539649963, 0.4383774399757385, -0.9114741683006287, -0.3010450601577759, -0.577869176864624, 0.40187859535217285, -0.2992066740989685, 0.4318739175796509, 0.7384133338928223, 0.5550473928451538, 0.4357515573501587, -0.3170524835586548, -1.0878546237945557, -0.38163989782333374, -0.34077247977256775, -0.24059180915355682, -2.037888288497925, 0.043532583862543106, 0.3126504421234131, -0.6734665632247925, -0.6770228147506714, -0.08468611538410187, 0.6331218481063843, -0.054642580449581146, -0.8937807083129883, -0.5683601498603821, -1.0490076541900635, 1.184566617012024, -0.05584045127034187, -0.4813167452812195, 0.2612142562866211, 0.264132559299469, -0.020785950124263763, -0.0737575814127922, -0.05350509285926819, 0.06139763072133064, 0.3005830943584442, -0.1785319596529007, -0.6988852024078369, 0.831914484500885, -1.3540277481079102, -0.8618507385253906, -0.08373221009969711, 0.2935054898262024, -0.05978604406118393, 0.10976613312959671, -0.9219358563423157, 0.7250533103942871, 0.25400570034980774, 0.11175858974456787, 1.6425144672393799, 0.6713292598724365, -0.48312899470329285, 0.42676883935928345, 0.08672585338354111, -0.22937129437923431, -0.41696417331695557, -0.8212528228759766, 0.04384296387434006, 0.8913798332214355, -0.4460475444793701, 0.4199203550815582, 0.5145213007926941, -0.5131943821907043, -0.6930366158485413, -0.41923150420188904, -0.32031986117362976, 0.24035035073757172, -0.10028615593910217, 1.13368821144104, -1.5952105522155762, 0.018869785591959953, 1.8768656253814697, 0.23709788918495178, 1.2506320476531982, -0.03109036013484001, -0.18421581387519836, 0.46093621850013733, 0.8465020656585693, -0.21653644740581512, 0.4185655117034912, 0.6193785667419434, -0.46006903052330017, 1.5533485412597656, -0.6024465560913086, -0.017342351377010345, -0.48460090160369873, 0.09068603813648224, 0.06682135164737701, 1.2706729173660278, 0.029716603457927704, 0.6541244387626648, 0.4418421983718872, -0.6361591815948486, -0.8209025859832764, 0.47995999455451965, 0.9130755662918091, -0.5004041194915771, 0.7847025990486145, -2.152005195617676, -1.455967903137207, -1.1377661228179932, 0.45437103509902954, -0.8040918707847595, 0.7551236748695374, 0.3614417314529419, 1.0060641765594482, 0.594099760055542, 0.6064661741256714, 0.30969691276550293, -0.314024418592453, 0.3039363622665405, -1.2464697360992432, 1.287402629852295, 0.8958820104598999, 1.6156327724456787, -0.6246870756149292, 2.3339486122131348, 1.237866997718811, 0.40070122480392456, 0.46919408440589905, -0.09265615046024323, -0.6574534773826599, 0.3042903542518616, -0.8643244504928589, -0.7426645755767822, -0.4761129319667816, -0.39102432131767273, -0.07708613574504852, -0.7023607492446899, -0.06734617054462433, 1.1342499256134033, -0.013284689746797085, 0.08678052574396133, -0.06872859597206116, -0.01576101966202259, -1.4597594738006592, 0.8203288912773132, 0.9335689544677734, 0.4788368046283722, 0.42178773880004883, 0.7679944038391113, 0.18242815136909485, 0.4257456064224243, 1.1336222887039185, -0.7379401326179504, -0.9941906332969666, -0.3261052370071411, 0.3909125030040741, 1.0704416036605835, -0.11329704523086548, -0.048168666660785675, -0.8324202299118042, -0.1664973348379135, -0.5102360248565674, -0.4418827295303345, -1.0463740825653076, -0.09335511922836304, 0.4306831657886505, 0.3461384177207947, -0.1389777809381485, 0.8032162189483643, -0.21911616623401642, 0.3590352535247803, -0.6158866286277771, -0.2324674278497696, 0.6075432300567627, -0.03523697704076767, 1.3390655517578125, 0.6477721929550171, 0.2943077087402344, -0.3396875262260437, -1.0648701190948486, -0.5585582852363586, -0.4350512623786926, -1.2463616132736206, -1.6168304681777954, 0.3441274166107178, 1.229318618774414, 0.025381911545991898, 0.15749388933181763, 0.37549686431884766, 0.16658170521259308, -1.3734819889068604, -0.9623123407363892, -0.4295671582221985, -0.8719229102134705, 0.6645544767379761, -0.14892493188381195, -0.2966638505458832, 0.13959619402885437, -0.2349161058664322, -0.07514414191246033, 0.6523243188858032, 0.13745561242103577, 0.16962121427059174, -0.8632341623306274, 0.6533330678939819, -1.1285145282745361, -0.7647947072982788, 1.029653787612915, -0.1795545071363449, 0.4434921145439148, -0.7996816635131836, -0.438438355922699, -0.9874288439750671, -0.9693272113800049, -1.3298046588897705, 0.8337324261665344, 0.14624030888080597, -0.04155424237251282, 0.2972223162651062, -0.4055192470550537, -0.4993293583393097, 0.0050324201583862305, 0.8754661083221436, -0.3680296838283539, -0.6885710954666138, -0.44517698884010315, -1.0406913757324219, 0.040387339890003204, 0.6057538986206055, 0.9844271540641785, -0.4918692708015442, 0.6086779832839966, 2.646294593811035, -0.21868479251861572, 0.37240657210350037, -0.4363856315612793, -0.18492984771728516, 0.284709095954895, -0.14420543611049652, -1.0792162418365479, -0.06446792930364609, -0.9067086577415466]"
sc-copilot/INTEREST PAYMENT SCHEDULE/interest_payment_post_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef interest_payment_post_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.823178768157959, 0.30726173520088196, -3.2639474868774414, -0.9082509279251099, 1.8726966381072998, -0.45368313789367676, 1.159118890762329, 0.029563136398792267, 0.1266152262687683, -0.47859305143356323, -0.7606573700904846, 0.1424148976802826, 1.0774357318878174, 0.5840833783149719, -0.23307766020298004, -0.003795914351940155, 0.199942946434021, -0.8160947561264038, -0.2588009834289551, 0.9368777275085449, 0.3829905688762665, -0.133818581700325, -0.6755855679512024, -1.0580846071243286, 1.0919251441955566, 0.6957876682281494, 0.07295678555965424, -0.06732133775949478, -0.5088117718696594, 0.661976158618927, 0.03797103464603424, 0.13003727793693542, 0.2785971760749817, -0.9190871715545654, -0.0806255042552948, -0.555849552154541, 0.3442280888557434, -0.019796021282672882, -0.2525250017642975, -1.3972043991088867, 0.41014325618743896, 0.5125828981399536, 0.20784562826156616, 0.6193777322769165, 0.49805864691734314, -0.5842981934547424, 1.5728460550308228, -0.21645556390285492, 0.11731110513210297, -1.5987889766693115, 0.028715893626213074, -0.4016459286212921, 0.2732698917388916, -0.029709313064813614, 1.0081045627593994, 0.8711206316947937, -0.03489837795495987, 1.2912425994873047, -0.46822959184646606, -0.3506612777709961, 2.0361368656158447, 0.717928946018219, -0.238103449344635, 1.084465503692627, 0.37454038858413696, 0.260219544172287, -0.963296115398407, 0.27946871519088745, -0.6922647953033447, -0.3417123258113861, -0.24012316763401031, 0.6549161672592163, -0.09393836557865143, 0.10934095829725266, 0.22800616919994354, 0.7422826290130615, -0.8376198410987854, -1.7974354028701782, -0.29349255561828613, 0.6985547542572021, -0.2584499716758728, 0.032755009829998016, 1.3836312294006348, -0.5207768678665161, 0.7051228284835815, -0.34424257278442383, -0.03254693001508713, -0.25516417622566223, 0.15281249582767487, 0.8502952456474304, -0.04779151454567909, -0.7204775810241699, 0.3274611830711365, -0.0040422528982162476, -0.6389709711074829, -0.21119752526283264, -0.3062390089035034, -0.07406295835971832, -0.40535086393356323, -0.28580570220947266, -0.30761367082595825, 0.2771468162536621, 0.4360487759113312, 0.13708633184432983, -0.17203247547149658, 0.6623573303222656, 1.1714930534362793, 0.5116033554077148, -0.45536190271377563, -1.5217947959899902, -0.20535403490066528, 0.9173175692558289, 0.035110294818878174, -0.16883757710456848, -0.32877400517463684, -0.49044889211654663, 1.6535086631774902, -0.4808139204978943, -0.7050108313560486, 0.8060986995697021, -0.9121574759483337, -0.7253803014755249, 1.8700149059295654, 1.5268114805221558, -0.6593119502067566, -0.2125525176525116, 0.26077625155448914, 0.4440051019191742, 0.14117495715618134, -0.7389510869979858, 0.5764508247375488, -0.08357911556959152, -0.8910050392150879, 0.3965015411376953, 0.19731543958187103, 0.29594069719314575, 0.11966486275196075, -0.6941584348678589, 0.01259380578994751, 0.507859468460083, 0.83863765001297, -0.39022713899612427, -0.2625510096549988, -1.0379397869110107, -0.233070507645607, -0.8899999856948853, 0.27806809544563293, -0.4901334345340729, 1.0214840173721313, -0.05570878088474274, -0.2174055278301239, -0.16271236538887024, 0.6468590497970581, 0.8916934728622437, 1.2377376556396484, -1.1925604343414307, 0.8268977403640747, -0.7892236113548279, 0.5105544328689575, 0.019786160439252853, 0.9415067434310913, -0.058219462633132935, 0.04703589528799057, 1.4041235446929932, 0.05225042253732681, -1.1596089601516724, -0.18380309641361237, 0.5978823900222778, 0.11286979168653488, 1.3016765117645264, -0.6945716738700867, -0.32930412888526917, 0.01108277216553688, -0.8927504420280457, 0.9769589900970459, 0.016520895063877106, 0.6892316341400146, -0.8984489440917969, 0.35473281145095825, -1.1356525421142578, 0.2244945764541626, -0.563999354839325, 0.6134194135665894, 0.3802676498889923, -1.076554775238037, 0.04711280018091202, 1.2031121253967285, -0.5807236433029175, -0.6818364262580872, -0.3387443721294403, -0.6172341108322144, 0.7464088201522827, -1.2771333456039429, 0.024981975555419922, -1.135634422302246, -0.16106656193733215, 0.9610558152198792, -0.5747169852256775, 0.205173522233963, 0.0892176628112793, -0.16125795245170593, 0.06950170546770096, -0.18249130249023438, 0.342556357383728, -0.8494908809661865, 0.6938629150390625, -0.15427415072917938, 0.7184983491897583, 0.25969213247299194, 0.12150707095861435, 1.194865345954895, -0.19621407985687256, -0.4699293375015259, 0.2974904775619507, -1.055333137512207, -0.4043314456939697, -0.3323066830635071, -0.21159601211547852, -0.7265963554382324, -0.11603927612304688, 0.28693723678588867, -0.5539112687110901, 0.17491799592971802, 0.5155692100524902, -0.23580007255077362, -0.6477594375610352, -0.7572171092033386, 0.3936057686805725, -0.13450023531913757, -0.19259130954742432, -0.18401338160037994, -0.4668242037296295, -0.37642934918403625, 0.28721821308135986, 0.19047372043132782, 0.9990836977958679, -0.0872078686952591, 0.2532676160335541, 1.1022034883499146, -0.25856834650039673, -0.01476801186800003, 0.7253825664520264, 1.0960006713867188, 0.5243021845817566, 0.287905752658844, 0.7023362517356873, -0.1135772168636322, -0.17288005352020264, -0.2067783772945404, 1.0309358835220337, 0.2838219106197357, -0.5092855095863342, 0.35685473680496216, 0.6933855414390564, -0.2834937274456024, -0.4234768748283386, -1.0784319639205933, -0.7482525110244751, 0.13678839802742004, 0.49226313829421997, 1.1854876279830933, 0.31520912051200867, 1.0538588762283325, -0.2741355895996094, -0.743918240070343, -0.3451898694038391, -0.6888529658317566, 0.5801995396614075, 0.7293276190757751, 0.04926099628210068, 1.048256278038025, 0.3883485496044159, 0.6445621848106384, 1.1645915508270264, 0.15080729126930237, -0.15541251003742218, 0.48430243134498596, -0.6775031089782715, -0.16539770364761353, 1.422175407409668, -0.3509705662727356, -1.0614832639694214, -0.14631009101867676, 0.7151305675506592, -1.15468430519104, -0.3257746398448944, 0.22981446981430054, 0.5810209512710571, -0.39160215854644775, 0.2075863480567932, 1.1416072845458984, -0.14499229192733765, -0.8523189425468445, 0.6539347171783447, -0.8448793888092041, -0.19164997339248657, 0.5817258954048157, 0.046914730221033096, -0.03642915561795235, -1.0779005289077759, 0.031580835580825806, 0.6171170473098755, 0.6054067611694336, 1.0246288776397705, 0.3037244379520416, -0.7129533290863037, 0.7207484245300293, -0.25582897663116455, 0.12062032520771027, 0.1562950164079666, 0.7535840272903442, -0.12749998271465302, -1.0484410524368286, 0.616706132888794, -1.1983035802841187, 1.1190674304962158, 0.29391756653785706, 0.48335734009742737, -0.08287963271141052, -0.7394105195999146, 0.8676903247833252, -1.3457958698272705, -0.5437276363372803, -0.44284483790397644, 0.4639356732368469, 1.0953521728515625, -0.3930884301662445, 0.4202755093574524, -0.2196473479270935, 0.02309776097536087, 0.6459043622016907, 0.43350082635879517, 0.3048706352710724, -0.7366255521774292, -0.1529490351676941, 0.27988967299461365, 0.17299027740955353, 0.3504684567451477, -0.08281639963388443, 0.6002492308616638, 0.7805423736572266, -0.559665858745575, 0.3506566882133484, -0.6858114004135132, -0.3832823634147644, -0.590724766254425, -0.721358060836792, -0.15536975860595703, 0.8386397361755371, 0.46051573753356934, -0.7635811567306519, 0.5646671056747437, 0.04269801080226898, -0.05638875812292099, 0.24648673832416534, -0.15320122241973877, 1.4288573265075684, 0.7762280702590942, -0.10052310675382614, 0.42840006947517395, 0.9108965396881104, 0.2142774611711502, 0.1871768832206726, -0.37527963519096375, 0.7098592519760132, 0.7636712789535522, 0.3055347502231598, -0.2278720587491989, 0.1283225268125534, 0.483223021030426, 0.1106872707605362, -0.22483113408088684, -0.14982038736343384, 0.6080424785614014, 0.3762475848197937, -0.19552576541900635, -0.9123350381851196, -0.22942984104156494, -0.4291560649871826, 0.6891239881515503, 0.7096021175384521, -0.2871812582015991, 0.1713065356016159, 0.32254472374916077, 0.049795567989349365, -0.34224918484687805, 0.09254109859466553, 0.04464111477136612, -0.11580663174390793, -0.08399253338575363, 0.2674247920513153, -0.42026016116142273, 0.001055542379617691, 0.36529016494750977, 0.6729995012283325, -1.0975077152252197, 0.13197991251945496, 0.4088137149810791, 0.6740952134132385, 0.3726825714111328, -0.6565301418304443, -1.3787953853607178, 0.5818964838981628, -0.021825402975082397, 0.5643941164016724, 0.36922717094421387, -0.7626171708106995, -1.1954200267791748, 1.015315294265747, -1.1110610961914062, 0.4810352325439453, 0.2043554037809372, -0.3045344352722168, -0.38324713706970215, 0.7154525518417358, 0.443227618932724, 0.7797530889511108, 0.37411072850227356, -0.35561075806617737, -0.9211043119430542, 1.2697862386703491, 0.5642870664596558, 0.6762002110481262, -0.04859165847301483, 0.4084989130496979, 0.4935165047645569, 0.37440356612205505, 0.22289296984672546, 0.11730507016181946, -1.6790611743927002, -0.39078083634376526, 1.0740185976028442, 0.753686785697937, -0.03785847872495651, -0.4698055684566498, 0.1491803675889969, 0.16779223084449768, 0.44249117374420166, -0.06761942058801651, 0.4409787654876709, -0.03449924290180206, -0.4969027042388916, 0.20629148185253143, -0.4171864986419678, 0.211723193526268, 0.9070000648498535, 0.035483211278915405, -0.19805848598480225, 0.030863294377923012, 0.2483128309249878, 0.3278105556964874, 0.2758813500404358, 0.4156961143016815, 0.23977214097976685, 0.8532166481018066, -1.5427186489105225, -0.7628663182258606, -0.18943652510643005, -0.26641443371772766, 0.5405348539352417, 0.4113863706588745, -0.23776450753211975, -0.8634262084960938, 0.6541318893432617, 0.07372212409973145, -0.038018401712179184, 0.6186123490333557, -1.5742425918579102, 0.6737188100814819, 0.5922112464904785, -0.9305630922317505, -0.02381003648042679, 0.7927244305610657, -0.48822689056396484, 0.15177910029888153, 0.21590517461299896, 0.8447567224502563, -0.20836561918258667, 0.35680630803108215, 0.5528473258018494, -0.2053445726633072, -0.23345458507537842, -0.6699788570404053, -0.21676398813724518, -0.7705516815185547, 0.682374119758606, 0.45806461572647095, -0.5692191123962402, 0.18145421147346497, -0.06360228359699249, 0.6879620552062988, -0.1947104036808014, -0.04003894701600075, -0.1826886236667633, -0.009021971374750137, -0.34781694412231445, -0.5404841899871826, 0.08729894459247589, 0.24449396133422852, 0.198899507522583, -0.2900621294975281, 0.1261596381664276, -0.8188307881355286, -0.21237021684646606, 0.3012380301952362, 0.4339105486869812, 0.48531246185302734, -1.554551362991333, -0.9547330141067505, -0.31040477752685547, -0.21650949120521545, 0.23997820913791656, 1.0452840328216553, -0.20669272541999817, 0.7943302989006042, -0.2639242112636566, 0.8057615756988525, -0.23327675461769104, -1.3014869689941406, 0.2931594252586365, 0.1387479305267334, -0.25717276334762573, -0.13555674254894257, -0.9154480695724487, -0.9857807159423828, 0.27582085132598877, -0.35235682129859924, -1.1226599216461182, 0.9905312657356262, -0.5465854406356812, -0.22604918479919434, 0.4164752662181854, -0.47466719150543213, -0.40507858991622925, 0.3539712727069855, -0.4655803143978119, -0.2750580608844757, 0.037900201976299286, 0.07199989259243011, -0.5484078526496887, 0.6155229210853577, 0.1944352090358734, 0.08237193524837494, 0.40319958329200745, 0.389899343252182, -1.4687306880950928, 0.721498966217041, -0.12049737572669983, 0.07586334645748138, -1.9440507888793945, 0.7123733758926392, -0.401660293340683, -0.35513776540756226, -0.9975166916847229, -0.0003683827817440033, 0.3106716275215149, -0.6188153624534607, -0.8554602861404419, -0.7696766257286072, -0.5007750988006592, 0.6447798609733582, 0.33246493339538574, 0.2858738601207733, 0.2197561413049698, 0.28383004665374756, 0.267200231552124, 0.5471509695053101, 0.4950738251209259, -0.08250457793474197, 0.3374480605125427, -0.07763418555259705, -1.0262553691864014, 0.11553969234228134, -0.6146471500396729, -0.1367352306842804, 0.4137999415397644, -0.6870005130767822, 0.1819274127483368, -1.4651881456375122, -0.052905257791280746, 0.05099077895283699, -0.12063424289226532, -0.2382066547870636, 1.3175196647644043, 0.5014987587928772, -0.7225028872489929, -0.21702295541763306, -0.8037041425704956, 0.4188344478607178, -0.7445944547653198, -0.1877565085887909, 0.3520198464393616, -0.08579142391681671, -0.09716369956731796, 0.251945436000824, 1.0879809856414795, -0.43486928939819336, -1.0718151330947876, 0.1054677963256836, -0.6218324303627014, 0.5845444798469543, -0.6257268190383911, 1.2732195854187012, -1.1866973638534546, -0.29375436902046204, 1.2867721319198608, 0.4963585138320923, -0.14891362190246582, -0.3755244016647339, -0.6270081400871277, -0.6628621816635132, 0.09858044236898422, -0.26012125611305237, -0.1533074975013733, 0.7129567861557007, -1.104825735092163, 0.6742594242095947, 0.6123414039611816, -0.6902895569801331, -0.5042927861213684, -0.2302667647600174, -0.9554008841514587, 1.345158576965332, -0.10415278375148773, 0.22287684679031372, 0.41738617420196533, -0.6734362244606018, -0.29364505410194397, -0.4568600058555603, 0.5665243864059448, 0.28076452016830444, 1.1543855667114258, -1.721807837486267, -1.342721939086914, -1.2195991277694702, 0.31837576627731323, 0.026839137077331543, 1.081937313079834, 0.1635662466287613, 0.9598298668861389, 0.3809589743614197, 0.3051982820034027, 0.31454187631607056, 0.4673590660095215, -0.0284031480550766, -0.8550204634666443, 0.6574923992156982, 0.4734641909599304, 0.7402644157409668, 0.19331352412700653, 2.3375868797302246, 0.7146216630935669, 1.026328682899475, 0.7073072195053101, 0.47000759840011597, -0.8132964372634888, 0.3275338411331177, -1.6697787046432495, -1.6007049083709717, -0.2870183289051056, -0.052755966782569885, -0.2541535496711731, -0.3964327871799469, -0.2805728316307068, 0.6257821917533875, -0.5238807201385498, -0.24079015851020813, -0.4101468026638031, -0.6392780542373657, -0.22706572711467743, 0.4581969082355499, 0.23794850707054138, 1.0549306869506836, 0.5108810663223267, 0.7218541502952576, -0.0203976072371006, 0.36656057834625244, 0.8158158659934998, 0.019722644239664078, -0.09604338556528091, 1.0710623264312744, 0.30453240871429443, 0.30002909898757935, -0.854263186454773, 0.24183739721775055, -0.551586389541626, 0.27714401483535767, -0.4192996621131897, -0.3148536682128906, -0.6608455181121826, -0.13269856572151184, -0.29419276118278503, 0.29712599515914917, 0.3306867480278015, -0.12365327030420303, 0.25473910570144653, 0.06044703722000122, -1.6157207489013672, 0.06909189373254776, 0.5397109985351562, -0.6697520613670349, 0.04992983117699623, 0.8876763582229614, -0.315935879945755, 0.04232581704854965, -0.4476633667945862, -0.29640355706214905, -0.5300101041793823, -1.2245856523513794, -1.1430768966674805, -0.09530595690011978, -0.2140854299068451, -0.5701485276222229, 0.09257389605045319, 1.0764164924621582, -0.01659516990184784, -0.4031878113746643, -1.1085171699523926, -0.0707167536020279, -0.5829957723617554, 0.9187026619911194, -0.036177635192871094, -1.2699565887451172, -0.5881815552711487, -0.29844582080841064, 0.16240212321281433, 0.17902353405952454, -0.36881840229034424, -0.34549376368522644, -0.5166980624198914, -0.4648149609565735, -0.5684919357299805, -0.643064022064209, 0.9213855862617493, -1.0900607109069824, -0.3108466863632202, -0.29193347692489624, 0.18738597631454468, -0.7136774063110352, -0.14181414246559143, -1.1345149278640747, -0.2795924246311188, -0.5840930938720703, 0.9571911096572876, -0.3253127932548523, -0.13593600690364838, -0.4847520589828491, 0.2491309642791748, 0.5542303323745728, 0.07784540206193924, -0.7305748462677002, -0.2534409463405609, -1.1897666454315186, -0.19552314281463623, 0.4448503851890564, -0.3160020709037781, 0.13900715112686157, 0.435621440410614, 2.108494520187378, 0.49454113841056824, 0.4369674026966095, -0.2867979407310486, 0.5913410186767578, 0.2951807677745819, -0.32992565631866455, -1.231971025466919, -0.5425338745117188, -0.43414759635925293]"
sc-copilot/INTEREST PAYMENT SCHEDULE/interest_payment_schedule_code.py,def interest_payment_schedule_code():\n    # Function implementation omitted for brevity\n,2024-02-28T00:00:00Z,Unknown,1.0,"[0.14781838655471802, 0.7245074510574341, -2.9501118659973145, -0.8175328373908997, 0.5307216048240662, -1.4014110565185547, 0.6138806343078613, -0.6184567809104919, 0.10866102576255798, -0.09749501943588257, -0.40219175815582275, 0.6917409300804138, 1.275388240814209, 0.2814253568649292, -0.8311573266983032, -0.16315072774887085, -0.08141966164112091, 0.2386346161365509, -0.8646349310874939, 0.7486910223960876, 0.39802753925323486, 0.5500479936599731, -1.0623607635498047, -1.1152375936508179, 0.7685714960098267, 0.2582917809486389, 0.7494680881500244, 0.14439339935779572, -0.9393980503082275, 0.5076453685760498, -0.3957676589488983, 0.6361550688743591, 0.5503503680229187, -1.206668496131897, -0.5062651634216309, -0.26228708028793335, 0.4738251268863678, 0.6234848499298096, -0.116219162940979, -0.8625844717025757, -0.7456941604614258, 0.6639155745506287, -0.05628030374646187, 1.0258251428604126, 1.6840626001358032, -1.3243300914764404, 2.1547629833221436, 0.023305505514144897, -0.19125190377235413, -0.681916356086731, 0.6917462348937988, -0.7400557994842529, 0.3078060448169708, 0.13499540090560913, 0.37668049335479736, 0.8325294256210327, -0.3672369718551636, 0.9295678734779358, -0.20076780021190643, 0.1337321698665619, 1.9045329093933105, 1.459824562072754, -0.01634955406188965, 0.8818820714950562, -0.029940739274024963, 0.7336441874504089, -0.9761418104171753, 0.3953282833099365, -0.5603969097137451, 0.39397770166397095, -0.5065732002258301, 0.541394829750061, 0.34123295545578003, -0.8751989603042603, 0.4967931807041168, 0.6382244229316711, -0.3123124837875366, -0.007653675973415375, -0.46032601594924927, 0.2137177735567093, -0.7667898535728455, -0.08180440217256546, 0.6519554853439331, 0.07675434648990631, 0.12397421151399612, -0.5623323917388916, 0.06953451782464981, -0.9085332751274109, 0.04190681129693985, 1.6566202640533447, -0.8721815347671509, -0.9098230600357056, -0.26362472772598267, 0.4185606837272644, -1.4772322177886963, -0.2257480025291443, -0.8742625713348389, -0.11077336966991425, -0.5890684127807617, -0.43471765518188477, -0.337313711643219, -0.4223693609237671, 0.5112537741661072, -0.1963430941104889, 0.023578673601150513, 0.0556902140378952, 0.06907422840595245, -0.24445493519306183, 0.379987508058548, -0.9790542721748352, 0.037014611065387726, 1.3673837184906006, -0.3155657947063446, -0.47874483466148376, -0.46254807710647583, -0.377551406621933, 0.8557791709899902, -0.9498658180236816, -0.5086299180984497, 0.7087005972862244, -1.463154673576355, -1.1562495231628418, 1.0979673862457275, 1.9168750047683716, -0.6815396547317505, 1.124131441116333, -0.672106921672821, 1.1068735122680664, 0.636739194393158, -1.2441842555999756, 0.6323638558387756, 0.04096037521958351, -0.6305623650550842, 0.0024284422397613525, -0.5554705858230591, -0.38214996457099915, 0.08770743012428284, -1.0769357681274414, -0.57862389087677, 0.4121568500995636, 0.23909397423267365, -0.7773436307907104, -0.4243585467338562, -0.9015955328941345, -0.7917940616607666, -0.4140341877937317, -0.1983594447374344, -1.3935978412628174, 0.16432824730873108, -0.7549124360084534, -0.08414988219738007, 1.2279049158096313, 0.44100242853164673, 0.028510428965091705, 0.9581248164176941, -0.893080472946167, 0.6630903482437134, -1.0108416080474854, 0.5678297877311707, 0.9539132714271545, 0.6417192220687866, 0.2786404490470886, -0.31759488582611084, 1.004146695137024, -0.7364680767059326, -1.4080201387405396, 0.07850523293018341, 1.213991641998291, -0.3683077096939087, 0.0052138157188892365, -0.45913568139076233, -0.517742931842804, -0.6045787930488586, -0.4033113121986389, 1.0830509662628174, -0.24055975675582886, 0.3327007293701172, 0.09461307525634766, 0.9754042625427246, -0.6466130018234253, -0.33091458678245544, -0.47238820791244507, 0.25905880331993103, 1.0000852346420288, -0.9034761190414429, 0.11819528043270111, 0.6173976063728333, -0.6984081864356995, -0.6975899934768677, -0.9511973857879639, -0.5147067904472351, 0.543664813041687, -0.21690410375595093, -0.23597458004951477, -1.3514187335968018, -0.3289158344268799, 0.19922253489494324, 0.31422096490859985, 0.22393648326396942, 0.05152592808008194, -0.5639371871948242, -0.05010512098670006, -0.9453644752502441, 0.20718324184417725, -0.3666657507419586, 1.140974998474121, -0.2517460584640503, -0.15951694548130035, -0.13762295246124268, 0.08192742615938187, 1.764822244644165, 0.20083561539649963, -0.7151869535446167, 0.494173139333725, 0.11599643528461456, -0.06512433290481567, -0.6171679496765137, -0.47499769926071167, -1.1521157026290894, 0.3655756115913391, 0.9366101026535034, -0.9280943870544434, 0.44718432426452637, -0.6338465213775635, 0.7039061784744263, -0.26326459646224976, -0.26430684328079224, 1.2605185508728027, 0.026370130479335785, -0.4155018925666809, -0.7252461314201355, -0.8572825193405151, -1.074479579925537, 0.028678886592388153, 0.45122823119163513, 1.1428735256195068, 0.34375327825546265, 0.7769272923469543, 1.6113159656524658, -0.8717114329338074, -0.46291089057922363, 0.623131513595581, 0.767043948173523, 0.4042789936065674, -0.13399936258792877, 0.2823435664176941, -0.18892039358615875, -0.11009472608566284, 0.04687611386179924, 0.9262366890907288, 0.10327878594398499, -0.30703988671302795, -0.1263885647058487, 0.9298038482666016, 0.08594895154237747, -0.10865329205989838, -0.22030238807201385, -1.1379235982894897, 0.9049524068832397, 0.38429510593414307, 1.012601375579834, 1.0173234939575195, 1.9500329494476318, -0.6303092837333679, -1.5375804901123047, -1.3422839641571045, -0.27397456765174866, 0.7553123235702515, 0.0001626908779144287, -0.0003081858158111572, 0.3017781972885132, 0.6996636986732483, 0.743319034576416, 1.2407622337341309, -0.18051257729530334, -0.5497754216194153, 0.4598483145236969, -0.37449467182159424, -0.8059896230697632, 1.2156343460083008, -0.366071492433548, -1.7348675727844238, -0.4893607497215271, 0.5094590187072754, -0.25329285860061646, 0.5730143189430237, 0.09332157671451569, 0.5921679735183716, 0.10581302642822266, 0.01866726577281952, 1.1134666204452515, -0.2211117297410965, -0.55312180519104, 0.7667184472084045, -0.1744055598974228, -0.52508944272995, 0.8353681564331055, 0.5051523447036743, 0.23769688606262207, -0.494362473487854, -0.15235991775989532, 0.29000943899154663, 0.15761689841747284, 1.3141779899597168, -0.07396368682384491, -0.8699280023574829, 0.9799737334251404, -0.5654457211494446, 0.1622469276189804, 0.21838104724884033, 0.549875020980835, -0.30321529507637024, -1.1976878643035889, 0.009829655289649963, -1.575043797492981, 1.0683016777038574, 0.24308186769485474, 0.017504476010799408, 0.510591983795166, -0.5026686191558838, 0.5333549976348877, -0.6813476085662842, 0.33775007724761963, -1.0389063358306885, -0.07226604968309402, 1.7494844198226929, -1.1359508037567139, 0.04793659597635269, 0.28644847869873047, -0.07582084834575653, 0.21546754240989685, 0.7646962404251099, 0.49033087491989136, -0.6882843971252441, 0.06397899985313416, -0.36447107791900635, -0.3328738510608673, 0.4708990454673767, -0.5217145681381226, 0.598294734954834, 1.0892502069473267, -0.3516795039176941, 0.8496689796447754, -1.9848787784576416, -0.5680010318756104, -0.46472597122192383, -0.46372613310813904, 0.17818091809749603, 0.8285400867462158, -0.4272215962409973, -0.8290529251098633, -0.23926794528961182, -0.10049983859062195, 0.23641788959503174, 0.4985238015651703, -0.30147209763526917, 0.8201125264167786, 0.6172064542770386, -0.5651940107345581, 0.030784107744693756, 0.6515610218048096, -0.082877516746521, -0.28499799966812134, -0.09235674142837524, 0.26140671968460083, -0.04349144548177719, 0.7242577075958252, -0.21717138588428497, 0.08241094648838043, -0.18981288373470306, -0.24602137506008148, 0.28018033504486084, 0.7278105616569519, 0.793126106262207, 0.9859057664871216, 0.05258747190237045, -1.6089324951171875, 0.45739635825157166, 0.12947982549667358, 0.5197027921676636, 0.7409108877182007, -0.26152142882347107, 0.6769462823867798, -0.1806837022304535, 0.07286407798528671, 0.4805575907230377, 0.06560809910297394, 0.48378437757492065, -0.33095595240592957, 0.4684067964553833, 0.46922898292541504, -0.05898156017065048, -0.026087626814842224, 0.3386051058769226, 0.9341504573822021, -0.918951153755188, 0.33960121870040894, 0.9093973636627197, 0.2818226218223572, -0.16772659122943878, -0.0851307362318039, -1.579648494720459, 0.3866395950317383, -0.32696276903152466, 0.5581022500991821, 0.9292398691177368, -0.8232467174530029, -1.2498356103897095, 0.08221839368343353, -0.7832366228103638, -0.07065890729427338, -0.07287546992301941, -0.2534303069114685, 0.15433529019355774, 0.5738962888717651, -0.07896073162555695, 1.0301094055175781, 1.2074251174926758, -0.04708777368068695, -0.7170000672340393, 1.0941596031188965, 0.1097584068775177, 0.5518028736114502, -0.128513902425766, -0.23999281227588654, 0.27181127667427063, 0.5548732280731201, 0.06950807571411133, 0.26172730326652527, -1.711621642112732, -0.3066362142562866, 1.3897881507873535, 1.1889548301696777, -0.36634498834609985, -0.8859707117080688, -0.3065246641635895, 0.09740515053272247, 0.45680877566337585, -0.13692733645439148, 0.6607203483581543, -0.34124818444252014, -0.8089972138404846, 0.17063729465007782, -1.28230619430542, 0.7249464988708496, 1.3853802680969238, -0.16601258516311646, -0.5779716968536377, 0.08532266318798065, 0.5014941692352295, 1.0176975727081299, 0.9623957872390747, -0.14644597470760345, 1.090376615524292, 0.7820991277694702, -1.1178884506225586, -0.3255811333656311, -0.40528327226638794, 0.4445962905883789, 1.0697821378707886, 0.19103389978408813, -0.03391089290380478, -1.3223893642425537, 0.3572618365287781, 0.262099027633667, 0.6933715343475342, 0.9844485521316528, -0.9530336260795593, 0.43689557909965515, 1.2705714702606201, 0.46148034930229187, 0.23503278195858002, 0.35305899381637573, -0.17986690998077393, 0.13940691947937012, -0.14763684570789337, 0.23450303077697754, 0.17924216389656067, 0.6301866173744202, 0.5812002420425415, -0.5564643144607544, -0.7007604837417603, -0.6116175055503845, -0.02191011980175972, -0.4934799373149872, 0.8175126314163208, 0.9539378881454468, -0.7333706617355347, -0.11844352632761002, -0.5531547665596008, 0.6631385684013367, -0.18207703530788422, 0.47695693373680115, -0.13480259478092194, -0.3069433867931366, -0.03746730834245682, 0.08308664709329605, 1.0670006275177002, 0.694766104221344, 0.15469512343406677, 0.22174936532974243, 0.7190099358558655, -1.0119396448135376, -1.2938929796218872, 1.2896113395690918, 0.8423548340797424, 0.5156263113021851, -0.6644124388694763, -1.291191816329956, 0.20243777334690094, 0.07076569646596909, 0.21394360065460205, 0.7704920172691345, -0.5343655347824097, 0.4834529161453247, -0.1737620234489441, 0.5937098264694214, -1.1643030643463135, -1.2703468799591064, 0.4077184498310089, 0.08366092294454575, -0.3060306906700134, -0.7431247234344482, -0.10006646811962128, -0.9753403067588806, 0.04981864243745804, -0.24465380609035492, -1.9190905094146729, 0.5043106079101562, -0.21159185469150543, -0.12435464560985565, 0.16938886046409607, -0.7866650819778442, -0.2795531451702118, 0.5799775719642639, -0.601762056350708, -0.6467686891555786, -0.4314846992492676, 0.3027490973472595, -0.3857532739639282, 0.7191834449768066, 1.1577997207641602, 0.8518760204315186, 0.4643818736076355, -0.6090877056121826, -1.1659808158874512, -0.08788163214921951, -0.3787667751312256, -0.2678728401660919, -1.7754366397857666, 0.46361231803894043, 0.09398699551820755, -0.13679537177085876, -0.9358286261558533, -0.30435800552368164, 0.813539981842041, -0.151032492518425, -0.8617382049560547, -0.649621844291687, -0.737721860408783, 0.978827178478241, 0.3425068259239197, -0.28218305110931396, 0.06922443211078644, 0.7319086194038391, 0.3579360842704773, 0.3706836998462677, 0.0350603312253952, -0.06034795939922333, 0.016748331487178802, -0.41537344455718994, -0.9750948548316956, 0.4221322536468506, -0.7814663648605347, -0.5396429896354675, -0.06552204489707947, 0.007300123572349548, -0.55808025598526, -0.6010723114013672, -0.8007431030273438, 0.5159087777137756, 0.2593027353286743, -0.5062173008918762, 1.3141417503356934, 0.30636513233184814, -0.5895017385482788, 0.1836056113243103, -0.31325623393058777, -0.10348235815763474, -0.6584044098854065, -0.08844307065010071, 0.30991217494010925, 0.5161528587341309, -0.11736852675676346, 0.511842668056488, 0.8259345889091492, -0.3880707025527954, -0.5971120595932007, -0.08627082407474518, -0.5173744559288025, 0.32883667945861816, 0.12785741686820984, 0.9338939189910889, -1.3636528253555298, -0.20722682774066925, 1.8263081312179565, -0.13146185874938965, 0.7749998569488525, 0.03778607398271561, -0.29983460903167725, 0.38644009828567505, 0.7891274690628052, -0.19295048713684082, 0.2681032419204712, 0.7016907334327698, -0.1400262862443924, 1.352412462234497, -0.07057733088731766, 0.2185564935207367, -0.7200863361358643, -0.24445699155330658, -0.15169639885425568, 1.2329964637756348, 0.2664153575897217, 0.6768551468849182, 0.4998551905155182, -1.0066980123519897, -0.773419201374054, 0.07578334212303162, 0.7625466585159302, 0.00686374306678772, 0.4313701093196869, -2.033571243286133, -0.999600887298584, -1.2504775524139404, 0.19184884428977966, -0.8203878402709961, 0.6952782869338989, -0.12210529297590256, 1.1731836795806885, 0.2738074064254761, 0.5559048056602478, 0.8559158444404602, 0.28159815073013306, 0.3659028708934784, -1.418318510055542, 1.2025978565216064, 0.6695975065231323, 1.538219928741455, -0.7173337936401367, 2.1319851875305176, 0.7425158023834229, 0.8624575734138489, 0.9666159152984619, -0.29843348264694214, -1.1504034996032715, 0.2312631756067276, -1.7087326049804688, -1.1745120286941528, -0.2270597666501999, 0.0074363648891448975, 0.0776263177394867, -0.6975321173667908, 0.0748293548822403, 1.482871413230896, -0.32163524627685547, 0.5817036628723145, 0.6819378733634949, -0.46452948451042175, -1.4011595249176025, 0.2713264524936676, 0.9237619042396545, 0.5483734607696533, 0.542508065700531, 0.4122180938720703, 0.45399656891822815, 0.2313973605632782, 0.6578447818756104, -0.6976988315582275, -0.8801153898239136, 0.24913430213928223, 0.6862459778785706, 0.37157759070396423, -0.6966834664344788, -0.11821401119232178, -0.5755530595779419, 0.2951469123363495, -0.4781189560890198, -0.7241730690002441, -1.1415083408355713, 0.0859886109828949, 0.2072010338306427, 0.387445867061615, -0.3770751357078552, 0.7181497812271118, -0.1169407069683075, 0.10225440561771393, -0.6263529062271118, -0.09802749752998352, 0.9935972094535828, 0.2770828604698181, 0.991517186164856, 0.9405235052108765, -0.07222104072570801, -0.39257487654685974, -0.6293955445289612, -0.8191351890563965, -0.44262897968292236, -0.8385833501815796, -1.6973551511764526, 0.15875056385993958, 0.8475199937820435, -0.39108002185821533, 0.01975545473396778, 0.16920088231563568, 0.3338151276111603, -1.0038949251174927, -1.1069196462631226, 0.07076072692871094, -0.8195934891700745, 0.3283390402793884, -0.031211167573928833, -0.5598160028457642, 0.14031587541103363, -0.25103360414505005, 0.6943592429161072, 0.2623952031135559, -0.46314191818237305, -0.6066480875015259, -0.6491802334785461, 0.30984368920326233, -1.1104283332824707, -0.6316772699356079, 1.1500108242034912, 0.22142285108566284, 0.30924639105796814, -1.1601088047027588, -0.734382152557373, -0.6405675411224365, -0.9008810520172119, -1.5796935558319092, 0.7107016444206238, -0.17429354786872864, 0.33672553300857544, 0.3037351965904236, -0.19682279229164124, -0.45322656631469727, -0.5627155303955078, 1.4373085498809814, 0.07354065775871277, -0.6770927906036377, 0.16033530235290527, -1.2772287130355835, -0.11487293243408203, 1.219328761100769, 1.0763834714889526, -0.39774954319000244, 0.7283552885055542, 2.425358533859253, -0.044441111385822296, 0.521000862121582, -0.6550190448760986, -0.08349446207284927, 0.12881453335285187, 0.30622056126594543, -0.4221290946006775, -0.41708412766456604, -0.9051533937454224]"
sc-copilot/INTEREST PAYMENT SCHEDULE/interest_payment_pre_posting.py,"@requires(parameters=True, flags=True, balances=""latest live"")\ndef interest_payment_pre_posting_code(postings, effective_date):\n    # Function implementation omitted for brevity\n",2024-02-28T00:00:00Z,Unknown,1.0,"[0.7448933124542236, 0.33458060026168823, -3.258997917175293, -0.9085619449615479, 1.7734729051589966, -0.4570803940296173, 1.2416605949401855, 0.037277702242136, -0.001150473952293396, -0.4999023675918579, -0.8343600630760193, 0.3023354411125183, 1.0894207954406738, 0.7147591710090637, -0.25898128747940063, -0.04322035610675812, 0.16174599528312683, -0.7386007308959961, -0.13797660171985626, 0.9485282897949219, 0.25682443380355835, -0.15477056801319122, -0.6606991291046143, -1.127509593963623, 0.8514662384986877, 0.5685849189758301, 0.027347974479198456, -0.006582006812095642, -0.5698163509368896, 0.7677930593490601, 0.16555705666542053, 0.18971320986747742, 0.16621056199073792, -1.109278678894043, -0.08636440336704254, -0.617414653301239, 0.3733670115470886, 0.14009569585323334, -0.22830912470817566, -1.5034942626953125, 0.5209550857543945, 0.4993709921836853, 0.2883347272872925, 0.5406209230422974, 0.5533931851387024, -0.4964050054550171, 1.7077147960662842, -0.21932034194469452, 0.1594676971435547, -1.5605387687683105, -0.0518207810819149, -0.203403502702713, 0.17910297214984894, -0.0014428943395614624, 1.1864960193634033, 0.934739351272583, -0.16126403212547302, 1.2316195964813232, -0.480656236410141, -0.31459444761276245, 2.086606740951538, 0.8330742716789246, -0.21548262238502502, 1.164463996887207, 0.517403244972229, 0.2313372790813446, -0.9673060178756714, 0.25191938877105713, -0.6001116633415222, -0.34489473700523376, -0.2243039608001709, 0.7509773373603821, -0.21266934275627136, 0.022078514099121094, 0.3010115325450897, 0.6401036977767944, -0.8310815095901489, -1.701466679573059, -0.29151347279548645, 0.6214414238929749, -0.10174115747213364, 0.20890481770038605, 1.4362090826034546, -0.606942355632782, 0.7066329121589661, -0.2766306400299072, -0.10567957162857056, -0.29684484004974365, 0.08907391130924225, 0.9100661277770996, -0.10971985757350922, -0.70255446434021, 0.2783191204071045, 0.032723601907491684, -0.6850976943969727, -0.2078779935836792, -0.4902724325656891, 0.01188701018691063, -0.3135185241699219, -0.48652729392051697, -0.2347167432308197, 0.17623846232891083, 0.36436861753463745, 0.19885636866092682, -0.3050096929073334, 0.563207745552063, 1.0102012157440186, 0.2658207416534424, -0.30197107791900635, -1.5144102573394775, -0.2895206809043884, 1.0587289333343506, -0.03557750955224037, -0.08853677660226822, -0.3523212671279907, -0.46313145756721497, 1.6705987453460693, -0.37796279788017273, -0.6252042651176453, 0.8129041194915771, -0.948447048664093, -0.8571681380271912, 1.9652503728866577, 1.546590805053711, -0.8643813729286194, -0.11472737789154053, 0.05837631598114967, 0.5713270902633667, 0.40741369128227234, -0.6966490745544434, 0.533014178276062, -0.07718193531036377, -0.789526104927063, 0.5059933662414551, 0.08240363746881485, 0.32336968183517456, 0.051062554121017456, -0.6801390647888184, -0.1657201647758484, 0.6186933517456055, 0.8850709795951843, -0.38833141326904297, -0.3898763060569763, -1.0925582647323608, -0.3040412366390228, -0.866646409034729, 0.382085919380188, -0.45638683438301086, 1.0375158786773682, 0.005964748561382294, -0.1582760214805603, -0.12341314554214478, 0.560791015625, 1.030170202255249, 1.2905502319335938, -1.1768279075622559, 0.8011627793312073, -0.8353326320648193, 0.4344825744628906, -0.07936955243349075, 0.8240121603012085, -0.054872628301382065, 0.17944559454917908, 1.3714232444763184, -0.03351077437400818, -1.1300855875015259, -0.21233996748924255, 0.8156578540802002, 0.12095995247364044, 1.2512776851654053, -0.6185691952705383, -0.22957350313663483, -0.05241602286696434, -0.841077446937561, 1.0458226203918457, 0.13867290318012238, 0.7215160131454468, -0.8433040380477905, 0.3495067358016968, -1.1103194952011108, 0.2116090953350067, -0.41403064131736755, 0.5564059019088745, 0.47246772050857544, -1.1753239631652832, -0.09033600986003876, 1.0931832790374756, -0.45692992210388184, -0.4460119605064392, -0.44788384437561035, -0.7436516284942627, 0.8426293134689331, -1.2572206258773804, -0.15297691524028778, -0.9259867072105408, -0.23750652372837067, 0.9228851795196533, -0.4001477360725403, 0.2027660757303238, 0.03183101862668991, -0.14004972577095032, 0.015760961920022964, -0.1837519109249115, 0.3785993158817291, -0.8694019317626953, 0.8157192468643188, -0.11364486813545227, 0.6158196330070496, 0.3610018491744995, 0.0025411173701286316, 1.3188073635101318, -0.11854657530784607, -0.3839568495750427, 0.2339579164981842, -0.7587084770202637, -0.23735755681991577, -0.4249918460845947, -0.2270801067352295, -0.6539669036865234, -0.05659477412700653, -0.04029945284128189, -0.6943289041519165, 0.10466237366199493, 0.5569998025894165, -0.2313821017742157, -0.73005211353302, -0.7065197825431824, 0.23372945189476013, -0.3006019592285156, -0.24483878910541534, -0.3372156023979187, -0.4860215187072754, -0.3328077793121338, 0.34704840183258057, 0.07479548454284668, 0.9388502836227417, -0.2412421703338623, 0.16722556948661804, 0.9185585975646973, -0.24066096544265747, -0.05096031725406647, 0.8053022027015686, 0.9807993173599243, 0.6350644826889038, 0.2498033046722412, 0.489675372838974, 0.1619197130203247, -0.263902485370636, -0.22951672971248627, 1.0509518384933472, 0.3119044601917267, -0.4174114763736725, 0.35462987422943115, 0.642779529094696, -0.3466207981109619, -0.22205722332000732, -0.9808630347251892, -0.6793264746665955, 0.0813397467136383, 0.38174647092819214, 1.1406667232513428, 0.42380642890930176, 1.137946605682373, -0.30008935928344727, -0.750525712966919, -0.21895870566368103, -0.8628816604614258, 0.47190332412719727, 0.8317500948905945, 0.08113155514001846, 1.1423866748809814, 0.2884739637374878, 0.5829208493232727, 1.1590664386749268, 0.19643054902553558, -0.04652434587478638, 0.34231889247894287, -0.5863032341003418, -0.09559746086597443, 1.5038213729858398, -0.3223259449005127, -1.076949119567871, -0.08881914615631104, 0.8207966089248657, -1.0132863521575928, -0.18694818019866943, 0.31848371028900146, 0.5729153156280518, -0.3363111913204193, 0.14437340199947357, 1.0882495641708374, -0.12672114372253418, -0.7432751655578613, 0.5588608384132385, -0.8873652815818787, -0.18511097133159637, 0.46920013427734375, 0.14227768778800964, 0.01208854466676712, -0.8798938989639282, -0.013041196390986443, 0.6738644242286682, 0.5831506848335266, 0.8814138770103455, 0.27229630947113037, -0.752447247505188, 0.7892464399337769, -0.1387288123369217, 0.1999768167734146, -0.2400355488061905, 0.4406721293926239, -0.2761465907096863, -1.4282618761062622, 0.580846905708313, -1.2958245277404785, 1.2152857780456543, 0.3829202651977539, 0.6024215221405029, 0.07274367660284042, -0.6793209314346313, 0.6851150989532471, -1.2073404788970947, -0.6874898672103882, -0.5288636684417725, 0.2908448874950409, 1.0719599723815918, -0.2272806465625763, 0.37053197622299194, -0.19887319207191467, 0.10532241314649582, 0.696407675743103, 0.4702056050300598, 0.4072182774543762, -0.7316399812698364, -0.17282383143901825, 0.1252487450838089, 0.1397792100906372, 0.27300772070884705, -0.18049263954162598, 0.6731206178665161, 0.8305354118347168, -0.493377685546875, 0.2768527865409851, -0.578564465045929, -0.36017918586730957, -0.6199682950973511, -0.5176239609718323, -0.06938379257917404, 0.9153538942337036, 0.46114256978034973, -0.7875186800956726, 0.630612313747406, -0.17225207388401031, 0.039947569370269775, 0.29532158374786377, -0.1621490716934204, 1.3249890804290771, 0.7449460625648499, -0.15021279454231262, 0.3208954930305481, 0.9265298843383789, 0.0882878229022026, 0.07527874410152435, -0.28427785634994507, 0.7924622893333435, 0.6093753576278687, 0.29097744822502136, -0.18021461367607117, 0.3009606599807739, 0.5474264621734619, 0.27409297227859497, -0.15309414267539978, -0.15905529260635376, 0.6500526666641235, 0.39870357513427734, -0.18363957107067108, -0.8236992359161377, -0.2847330570220947, -0.2829445004463196, 0.5230851769447327, 0.7014980316162109, -0.300226092338562, 0.20575614273548126, 0.3620312213897705, 0.007451348006725311, -0.2798634469509125, 0.18122681975364685, 0.007347084581851959, -0.0543413870036602, -0.07772109657526016, 0.27146613597869873, -0.31947946548461914, -0.06032930314540863, 0.37191250920295715, 0.5991030335426331, -1.0180774927139282, 0.34289437532424927, 0.325710654258728, 0.6838884353637695, 0.3881395161151886, -0.8163730502128601, -1.2003240585327148, 0.6651248335838318, -0.0877431333065033, 0.554694652557373, 0.3220122456550598, -0.7036132216453552, -1.1890453100204468, 1.0374250411987305, -1.0623893737792969, 0.5718178749084473, 0.14425230026245117, -0.23754015564918518, -0.2544654607772827, 0.7312170267105103, 0.4917149543762207, 0.7999836802482605, 0.28010305762290955, -0.3296056091785431, -0.7891474962234497, 1.137312889099121, 0.6273237466812134, 0.7173978090286255, 0.020715277642011642, 0.2599818706512451, 0.5567697286605835, 0.3223487138748169, 0.160824254155159, 0.09966640174388885, -1.6192911863327026, -0.38864561915397644, 1.0616281032562256, 0.683027446269989, -0.20485562086105347, -0.5349567532539368, 0.20264749228954315, 0.08337468653917313, 0.37140345573425293, -0.2628012001514435, 0.5043805837631226, -0.1920280009508133, -0.3763827681541443, 0.1512261927127838, -0.39760878682136536, 0.20156964659690857, 0.9664755463600159, 0.11369338631629944, -0.06577669084072113, 0.007583145052194595, 0.5116480588912964, 0.3759365379810333, 0.3529004156589508, 0.5762792825698853, 0.3244440257549286, 0.7538381218910217, -1.4518353939056396, -0.7468745708465576, -0.22987844049930573, -0.2671441435813904, 0.41636666655540466, 0.5402388572692871, -0.07220795750617981, -0.7782170176506042, 0.6370834112167358, 0.028441166505217552, -0.005700025707483292, 0.7145135998725891, -1.5552877187728882, 0.640400767326355, 0.5739522576332092, -0.8931441903114319, -0.12474916875362396, 0.7761815190315247, -0.42778700590133667, 0.14726273715496063, 0.33104342222213745, 0.8302114009857178, -0.3302116394042969, 0.34922662377357483, 0.6616244316101074, -0.2703138589859009, -0.08257453143596649, -0.910869300365448, -0.24352043867111206, -0.6508677005767822, 0.7778818011283875, 0.6564992666244507, -0.3672363758087158, 0.20476031303405762, -0.09081409871578217, 0.7624576091766357, -0.2554053068161011, -0.014859486371278763, -0.1310546100139618, 0.0005996786057949066, -0.46627572178840637, -0.5556042790412903, 0.2517201602458954, 0.3257642686367035, 0.2241441309452057, -0.3010673224925995, 0.2099703997373581, -0.844141960144043, -0.3801664412021637, 0.5311161279678345, 0.30801457166671753, 0.3008076548576355, -1.620734691619873, -1.041324496269226, -0.19388926029205322, -0.27951210737228394, 0.357991099357605, 1.013962984085083, -0.218382328748703, 0.8507511019706726, -0.30722612142562866, 0.856022834777832, -0.2986797094345093, -1.270622968673706, 0.34150999784469604, 0.0014062076807022095, -0.28487080335617065, -0.13769161701202393, -0.7572336792945862, -1.1348850727081299, 0.23489445447921753, -0.11987726390361786, -1.0247148275375366, 0.8866280317306519, -0.5363853573799133, -0.23965469002723694, 0.32991018891334534, -0.39660531282424927, -0.2918740510940552, 0.3939093351364136, -0.39866605401039124, -0.41495436429977417, -0.07502374053001404, 0.06532683968544006, -0.6551991105079651, 0.47456109523773193, 0.1884995847940445, 0.15996818244457245, 0.390669047832489, 0.4064214825630188, -1.4152436256408691, 0.4974794089794159, -0.019230544567108154, 0.10453150421380997, -2.0849666595458984, 0.7679486274719238, -0.4436824917793274, -0.39929264783859253, -0.9636425971984863, -0.04713888838887215, 0.377271831035614, -0.6884864568710327, -0.8642223477363586, -0.6210023164749146, -0.37662363052368164, 0.5615242719650269, 0.2936786413192749, 0.2556734085083008, 0.0952431708574295, 0.2788704037666321, 0.33365577459335327, 0.5626291036605835, 0.5635368227958679, -0.012381352484226227, 0.3574283719062805, -0.19221040606498718, -1.1660419702529907, 0.03684733435511589, -0.5719596147537231, -0.13489095866680145, 0.37245702743530273, -0.6855969429016113, 0.14981123805046082, -1.3018717765808105, -0.12093867361545563, -0.09179579466581345, -0.004281669855117798, -0.26731717586517334, 1.2553582191467285, 0.4781569838523865, -0.7527784109115601, -0.1373659372329712, -0.7887353897094727, 0.21584638953208923, -0.8849579095840454, -0.37254196405410767, 0.4240569770336151, 0.054592281579971313, -0.2958470582962036, 0.2504163682460785, 1.2770076990127563, -0.35622403025627136, -1.0115764141082764, 0.044529374688863754, -0.5998585224151611, 0.34509342908859253, -0.6059665679931641, 1.3466370105743408, -1.1505305767059326, -0.23933115601539612, 1.1493115425109863, 0.42667198181152344, 0.05961981788277626, -0.2859751284122467, -0.4824451804161072, -0.47674715518951416, -0.05513530224561691, -0.25821828842163086, -0.45684170722961426, 0.726874053478241, -1.077654242515564, 0.7335959076881409, 0.6666660308837891, -0.6404607892036438, -0.5281133055686951, -0.04879824072122574, -0.7838588356971741, 1.2715908288955688, -0.0761394277215004, 0.31405341625213623, 0.3307662010192871, -0.6611809134483337, -0.3456653356552124, -0.4650942087173462, 0.5413743853569031, 0.2370631992816925, 1.0685158967971802, -1.6904511451721191, -1.1470085382461548, -0.9730700254440308, 0.33712828159332275, 0.13438034057617188, 0.9119997024536133, 0.12982682883739471, 0.8609043955802917, 0.5549938082695007, 0.40876269340515137, 0.34777671098709106, 0.40707939863204956, -0.03135216236114502, -0.7056050896644592, 0.6811074018478394, 0.49782517552375793, 0.8513264656066895, 0.12755466997623444, 2.1323819160461426, 0.6133871078491211, 1.1007795333862305, 0.5238969326019287, 0.4078820049762726, -0.9470981359481812, 0.5282022356987, -1.7951563596725464, -1.8312095403671265, -0.24198122322559357, -0.04674312099814415, -0.3604104220867157, -0.5237780809402466, -0.04625411331653595, 0.7453345060348511, -0.5032108426094055, -0.10983077436685562, -0.306803822517395, -0.6812978982925415, -0.25629881024360657, 0.34173285961151123, 0.3774254322052002, 1.0283931493759155, 0.26504674553871155, 0.6780153512954712, 0.06273937225341797, 0.4148402512073517, 0.8008478879928589, -0.006466783583164215, -0.17295697331428528, 0.896757960319519, 0.30902618169784546, 0.337643563747406, -0.9085144400596619, 0.13975492119789124, -0.5477318167686462, 0.08539295196533203, -0.5059736967086792, -0.3731098175048828, -0.7197338938713074, -0.2869974970817566, -0.4069468379020691, 0.29910528659820557, 0.28393790125846863, 0.08091419190168381, 0.04063551500439644, 0.027296708896756172, -1.673566460609436, -0.0463319793343544, 0.606518030166626, -0.7174185514450073, -0.026190683245658875, 1.0333237648010254, -0.3235431909561157, -0.07371525466442108, -0.34920036792755127, -0.16642113029956818, -0.29827046394348145, -1.2278779745101929, -1.167067289352417, -0.38010215759277344, -0.20413459837436676, -0.5868966579437256, 0.1334419548511505, 0.927638828754425, -0.010329455137252808, -0.3740738034248352, -1.1823476552963257, -0.05986014008522034, -0.6054500341415405, 0.8224564790725708, 0.01892770826816559, -1.370858907699585, -0.43233466148376465, -0.2327248752117157, 0.13779586553573608, 0.18320922553539276, -0.24101212620735168, -0.4159386157989502, -0.5481157302856445, -0.5297775268554688, -0.6526700258255005, -0.6758477687835693, 1.0443849563598633, -1.1922483444213867, -0.24137412011623383, -0.4464218318462372, 0.21059373021125793, -0.6842997074127197, -0.11292872577905655, -1.3076783418655396, -0.0722694993019104, -0.7214887738227844, 0.8974364995956421, -0.31476905941963196, -0.007311329245567322, -0.401309609413147, 0.18473182618618011, 0.31545281410217285, 0.1363602578639984, -0.7926998138427734, -0.26050201058387756, -1.0739612579345703, -0.2513876259326935, 0.348562091588974, -0.316483736038208, -0.07174013555049896, 0.375691682100296, 2.136003255844116, 0.4064481556415558, 0.4356450140476227, -0.32852405309677124, 0.7875959873199463, 0.3946634531021118, -0.3548245131969452, -1.1137094497680664, -0.5934277772903442, -0.4283584654331207]"
sc-copilot/INITIALISE SMART CONTRACT/subvention_mvp.py,"display_name = ""subvention_mvp""
api = ""3.12.0""  # This is a V3 Smart Contract
version = (
    ""0.2.146""  # Use semantic versioning, this is explained in the overview document
)
summary = ""subvention_mvp""
tside = Tside.LIABILITY


events_timezone = 'Europe/Paris'

supported_denominations = [""EUR""]

global_parameters = ['bdf_calendar']


MoneyShape = NumberShape(
    kind=NumberKind.MONEY,
    min_value=0,
    max_value=1000000000000,
    step=0.01,
)

DateShape = DateShape(
    min_date=datetime(1900, 1, 1),
    max_date=datetime(2500, 1, 1),
)

PercentageShape = NumberShape(
    kind=NumberKind.PERCENTAGE, min_value=0, max_value=100, step=0.01
)

BooleanShape = NumberShape(kind=NumberKind.PLAIN, min_value=0, max_value=1, step=1)

# Standard informations
fulfillment_precision = 2

parameters = [
    #template Params
    Parameter(
        name=""invoice_number_counter"",
        shape=NumberShape(kind=NumberKind.PLAIN, min_value=0, max_value=9999999999, step=1),
        level=Level.TEMPLATE,
        description=""invoice number counter used for invoice posting"",
        display_name=""invoice number counter"",
        default_value=Decimal(0)
    ),
    Parameter(
        name=""deposit_reference_counter"",
        shape=StringShape,
        level=Level.TEMPLATE,
        description=""deposit reference counter used for SNT (closed) direct debit"",
        display_name=""deposit reference counter"",
        default_value=""V000001""
    ),
    Parameter(
        name=""currency"",
        shape=DenominationShape,
        level=Level.TEMPLATE,
        description=""Default currency for the contract."",
        display_name=""Default currency"",
        default_value=""EUR"",
        update_permission=UpdatePermission.FIXED, #Fixed if only EUR
    ),
    Parameter(
        name=""subscription_fees"",
        shape=MoneyShape,
        level=Level.TEMPLATE,
        description=""Subscription fees (subs vertes)"",
        display_name=""Subscription fees"",
        update_permission=UpdatePermission.FIXED,
        default_value=Decimal(500),
    ),

    # Required Params
    Parameter(
        name=""company_manager_signature"",
        shape=BooleanShape,
        level=Level.INSTANCE,
        description=""Company manager signature"",
        display_name=""Company manager signature"",
        default_value=Decimal(0),
        update_permission=UpdatePermission.USER_EDITABLE,
    ),
    Parameter(
        name=""request_date"",
        shape=DateShape,
        level=Level.INSTANCE,
        description=""Request date"",
        display_name=""Request date"",
        default_value=datetime(1900, 1, 1),
        update_permission=UpdatePermission.USER_EDITABLE,
    ),
    Parameter(
        name=""closing_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Date de clôture"",
        display_name=""Date de clôture"",
        default_value=OptionalValue(datetime(2100, 1, 1)),
        update_permission=UpdatePermission.USER_EDITABLE,
    ),
    Parameter(
        name=""person_p_id"",
        shape=StringShape,
        level=Level.INSTANCE,
        description=""Customer ID"",
        display_name=""Customer ID"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value="" "",
    ),
    # Optional Params
    Parameter(
        name=""authorisedDisbursement"",
        shape=OptionalShape(BooleanShape),
        level=Level.INSTANCE,
        description=""authorised Disbursement "",
        display_name=""authorised Disbursement "",
        default_value=OptionalValue(1),
        update_permission=UpdatePermission.USER_EDITABLE
    ),
    Parameter(
        name=""direct_debit_approval"",
        shape=OptionalShape(BooleanShape),
        level=Level.INSTANCE,
        description=""direct debit approval"",
        display_name=""direct debit approval"",
        default_value=OptionalValue(1),
        update_permission=UpdatePermission.USER_EDITABLE
    ),
    Parameter(
        name=""underwriter_party_identifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Underwriter Party Identifier"",
        display_name=""Underwriter Party Identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" "")
    ),
    Parameter(
        name=""is_standard_rate"",
        shape=OptionalShape(BooleanShape),
        level=Level.INSTANCE,
        description=""standard rate TVA:20%"",
        display_name=""standard rate TVA:20%"",
        default_value=OptionalValue(1),
        update_permission=UpdatePermission.USER_EDITABLE,
    ),

    Parameter(
        name=""grant_amount"",
        shape=OptionalShape(MoneyShape),
        level=Level.INSTANCE,
        description=""Grant amount"",
        display_name=""Grant amount"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(Decimal(0)),
    ),
    Parameter(
        name=""funding_rate"",
        shape=OptionalShape(PercentageShape),
        level=Level.INSTANCE,
        description=""Funding rate"",
        display_name=""Funding rate"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(Decimal(0)),
    ),
    Parameter(
        name=""percentage_per_tranche"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""List of percentage of amount allocated by tranche"",
        display_name=""List of percentage of amount allocated by tranche"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""customer_proposal_number"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Customer proposal number"",
        display_name=""Customer proposal number"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""sub_customer_proposal_number"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Sub customer proposal number"",
        display_name=""Sub customer proposal number"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""offer"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Offer"",
        display_name=""Offer"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""funding_account_id"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Funding Account Id"",
        display_name=""Funding Account Id"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""charte_id"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Charte ID"",
        display_name=""Charte ID"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""organisation_p_id"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Organisation Party ID"",
        display_name=""Organisation Party ID"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""customer_agreement_waivers_list"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""List of Customer agreement waivers"",
        display_name=""List of Customer agreement waivers"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""customer_proposition_asset"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Customer proposition Asset"",
        display_name=""Customer proposition Asset"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""customer_proposition_description"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Customer proposition description"",
        display_name=""Customer proposition description"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""bel_id_request"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""BEL ID request"",
        display_name=""BEL ID request"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""customer_proposition_completion_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Customer proposition completion date"",
        display_name=""Customer proposition completion date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""decision_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Decision date"",
        display_name=""Decision date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""new_program_end_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""New program end date"",
        display_name=""New program end date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""previous_program_end_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Previous Program End Date"",
        display_name=""Previous Program End Date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""requested_program_end_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Requested Program End Date"",
        display_name=""requested Program End Date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""financial_annex"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Financial annex (List of declared expenses and list of retained expenses) "",
        display_name=""financial_annex"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""expenses_added_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Expenses added date"",
        display_name=""Expenses added date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""phase"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Phase ID"",
        display_name=""Phase ID"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(""UNKNOWN""),
    ),
    Parameter(
        name=""customer_agreement_status"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Customer agreement status"",
        display_name=""Customer agreement status"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(""UNKNOWN""),
    ),
    Parameter(
        name=""fo_comment"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""FO Comment"",
        display_name=""FO Comment"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""bo_comment"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""BO Comment"",
        display_name=""BO Comment"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),Parameter(
        name=""manager_comment"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""commentaire du manager (ROF)"",
        display_name=""ROF Comment"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""program_end_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Program end date"",
        display_name=""Program end date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""registration_number"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""user id action (Approval ID)"",
        display_name=""registration number"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""reason_code"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Reason Code"",
        display_name=""Reason Code"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""ep_declared_expenses"",
        shape=OptionalShape(MoneyShape),
        level=Level.INSTANCE,
        description=""End of Program declared expenses"",
        display_name=""EP declared expenses"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(Decimal(0)),
    ),
    Parameter(
        name=""ep_retained_expenses"",
        shape=OptionalShape(MoneyShape),
        level=Level.INSTANCE,
        description=""End of Program retained expenses"",
        display_name=""EP retained expenses"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(Decimal(0)),
    ),
    Parameter(
        name=""realized_control"",
        shape=OptionalShape(
            UnionShape(
                UnionItem(key=""with_ERDA"", display_name=""with_ERDA""),
                UnionItem(key=""without_ERDA"", display_name=""without_ERDA""),
            )
        ),
        level=Level.INSTANCE,
        description=""realized ERDA control"",
        display_name=""realized control"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(UnionItemValue(key=""without_ERDA"")),
    ),
    Parameter(
        name=""cp1_codes"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""List of registred CP1 codes"",
        display_name=""List of registred CP1 codes"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""first_level_control"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Links of registred  CP1/CS"",
        display_name=""Links of registred  CP1/CS"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""pending_request"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Demande en attente"",
        display_name=""Demande en attente"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""country_subdivision_delegation"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Country Subdivision Delegation"",
        display_name=""Country Subdivision Delegation"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""instructor"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""instructor (Front)"",
        display_name=""Instructor"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""business_case_manager"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Business Case Manager"",
        display_name=""Business Case Manager"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""mandate_identification"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Référence de rattachement (RUM)"",
        display_name=""Mandate Identification"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""grant_type"",
        shape=OptionalShape(
            UnionShape(
                UnionItem(key=""bft"", display_name=""bft""),
                UnionItem(
                    key=""bft-innovation-creative"",
                    display_name=""bft-innovation-creative"",
                ),
                UnionItem(key=""bft-innov-up"", display_name=""bft-innov-up""),
                UnionItem(
                    key=""bft-paris-incubateur"", display_name=""bft-paris-incubateur""
                ),
                UnionItem(key=""sub-inno"", display_name=""sub-inno""),
                UnionItem(
                    key=""sub-inno-innovation-creative"",
                    display_name=""sub-inno-innovation-creative"",
                ),
                UnionItem(
                    key=""sub-inno-paris-incubateur"",
                    display_name=""sub-inno-paris-incubateur"",
                ),
                # sub vertes
                UnionItem(key=""sub-verte-afr"", display_name=""sub-verte-afr""),
                UnionItem(
                    key=""sub-verte-deminimis"", display_name=""sub-verte-deminimis""
                ),
                UnionItem(key="""", display_name=""N/A""),
            )
        ),
        level=Level.INSTANCE,
        description=""Grant Type (Context of the operation)"",
        display_name=""Grant Type"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(UnionItemValue(key="""")),
    ),
    Parameter(
        name=""signature_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""Sginature date"",
        display_name=""Signature Date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(1900, 1, 1)),
    ),
    Parameter(
        name=""underwriterIdentifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Underwriter Identifier "",
        display_name=""Underwriter Identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    # Parameter(
    #     name=""subscription_fees"",
    #     shape=OptionalShape(MoneyShape),
    #     level=Level.INSTANCE,
    #     description=""Subscription fees (subs vertes)"",
    #     display_name=""Subscription fees"",
    #     update_permission=UpdatePermission.USER_EDITABLE,
    #     default_value=OptionalValue(Decimal(0)),
    # ),
    Parameter(
        name=""technical_product_identifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""technical product identifier (OPS)"",
        display_name=""technical product identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""customer_offer_identifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""customer offer identifier (OPS)"",
        display_name=""customer offer identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" ""),
    ),
    Parameter(
        name=""expected_withdrawal"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""expected withdrawal (List of) "",
        display_name=""expected withdrawal"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""undue_payment_type"",
        shape=OptionalShape(
            UnionShape(
                UnionItem(key=""full_collection"", display_name=""full_collection""),
                UnionItem(key=""rescheduling"", display_name=""rescheduling""),
                UnionItem(
                    key=""full_debt_cancellation"",display_name=""full_debt_cancellation""
                ),
                UnionItem(key=""full_wire_transfer"", display_name=""full_wire_transfer""),
                UnionItem(key="""", display_name=""N/A""))),
        level=Level.INSTANCE,
        description=""Undue payment type"",
        display_name=""Undue payment type"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(UnionItemValue(key="""")),
    ),
    Parameter(
        name=""run_manually_invoice_creation"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Run manually invoice creation"",
        display_name=""Run manually invoice creation"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" "")
    ),
    Parameter(
        name=""invoice_type_for_manually_invoice_creation"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Invoice type for manually Invoice creation"",
        display_name=""Invoice type for manually Invoice creation"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" "")
    ),
    Parameter(
        name=""performance_status"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Performance status (party scores)"",
        display_name=""performance_status"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""performance_sub_status"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Performance sub status (party scores)"",
        display_name=""performance_sub_status"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""business_developer_employee_identifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Matricule gestionnaire (COF)"",
        display_name=""business developer employee identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" "")
    ),
    Parameter(
        name=""manager_employee_identifier"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""Matricule chargé d'affaire (ROF)"",
        display_name=""manager employee identifier"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue("" "")
    ),
    Parameter(
        name=""employeeList"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""employee List"",
        display_name=""employee List"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""invoicesList"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""List invoice"",
        display_name=""List invoice"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    Parameter(
        name=""overdraftsList"",
        shape=OptionalShape(StringShape),
        level=Level.INSTANCE,
        description=""List overdrafts"",
        display_name=""List overdrafts"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(json_dumps([])),
    ),
    # Derived parameters
    Parameter(
        name=""reviewed_grant_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""reviewed grant amount"",
        display_name=""reviewed grant amount"",
    ),
    Parameter(
        name=""first_tranch_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""1st tranche amount"",
        display_name=""1st tranche amount"",
    ),
    Parameter(
        name=""sec_tranche_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""2nd tranche amount"",
        display_name=""2nd tranche amount"",
    ),
    Parameter(
        name=""diminution_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""diminution amount"",
        display_name=""diminution amount"",
    ),
    Parameter(
        name=""ep_decision"",
        shape=StringShape,
        level=Level.INSTANCE,
        derived=True,
        description=""End of Program decision"",
        display_name=""EP decision"",
    ),
    Parameter(
        name=""possible_grant"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""Possible grant"",
        display_name=""Possible grant"",
    ),
    Parameter(
        name=""undue_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""undue amount"",
        display_name=""undue amount"",
    ),
    Parameter(
        name=""undue_to_refund_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""undue to refund amount"",
        display_name=""undue to refund amount"",
    ),
    Parameter(
        name=""undue_abandoned_amount"",
        shape=NumberShape(kind=NumberKind.MONEY),
        level=Level.INSTANCE,
        derived=True,
        description=""undue abandoned amount"",
        display_name=""undue abandoned amount"",
    ),
    Parameter(
        name=""endprogram_date"",
        shape=OptionalShape(DateShape),
        level=Level.INSTANCE,
        description=""End Program Date"",
        display_name=""End Program Date"",
        update_permission=UpdatePermission.USER_EDITABLE,
        default_value=OptionalValue(datetime(2024, 3, 26)),
    )
]

notification_types = ['PSU|customerAgreement|subvention_mvp|Updated', 'MLT|customerAgreement|subvention_mvp|Updated',
                      'PSU|disbursement|subvention_mvp|Requested', 'PSU|disbursement|subvention_mvp|Closed','PSU|disbursement|subvention_mvp|Rejected',
                      'MLT|disbursement|subvention_mvp|Requested', 'MLT|disbursement|subvention_mvp|Closed','MLT|disbursement|subvention_mvp|Rejected',
                      ""PSU|managementOperation|subvention_mvp"",""PSU|overdue|subvention_mvp"",""PSU|receiptWire|subvention_mvp"",""PSU|receiptDirectDebit|subvention_mvp|Rejected"",
                      ""PSU|receiptDirectDebit|subvention_mvp|Requested"",""PSU|receiptDirectDebit|subvention_mvp|Sent"",""MLT|managementOperation|subvention_mvp"",
                      ""MLT|overdue|subvention_mvp"",""MLT|receiptWire|subvention_mvp"", ""MLT|receiptDirectDebit|subvention_mvp|Sent"", ""MLT|receiptDirectDebit|subvention_mvp|Requested"", ""MLT|receiptDirectDebit|subvention_mvp|Rejected""
                      ]

##############################################
## START : init data to generate entities   ##
##############################################
PSU_TRIGRAM = 'PSU'
MLT_TRIGRAM = 'MLT'
SUBVENTION_MVP = 'subvention_mvp'
NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT = 'customerAgreement'
NOTIFICATION_ENTITY_TYPE_DISBURSMENT = 'disbursement'
DOMAIN_FINANCIAL = 'FINANCIAL'
NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION = 'managementOperation'
NOTIFICATION_ENTITY_TYPE_OVERDUE = 'overdue'
NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE = 'receiptWire'
NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT = 'receiptDirectDebit'


ENABLED_NOTIFICATIONS={
    NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT: True,
    NOTIFICATION_ENTITY_TYPE_DISBURSMENT: True,
    NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION: True,
    NOTIFICATION_ENTITY_TYPE_OVERDUE: True,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE: True,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT: True
}

ENABLE_CHAIN_INVOICE = False

PSU_TRIGRAM_BY_OFFER = {
    ""202"": PSU_TRIGRAM,
    ""301"": MLT_TRIGRAM
}
FIELD_SEPARATOR = ""__""
## prefix sm = simple and mandatory, default value
## prefix jm = simple and mandatory
## prefix o = optional (so | jo)
DATA_STANDARD_PAYLOAD_FIELDS_CUSTOMER_AGREEMENT = {
    ""customerAgreementLocalIdentifier"":""account_id"",
    ""customerAgreementStep"":""customer_agreement_status"",
    ""underwriterIdentifier"":""underwriterIdentifier"",
    ""percentagePerTranche__jm"":""percentage_per_tranche"",
    ""financialAnnex__jm"":""financial_annex"",
    ""businessDeveloperIdentifier"":""business_case_manager"",
    ""partySignedCustomerAgreement"":""company_manager_signature"",
    ""expensesValidationDate"":""expenses_added_date"",
    ""personPartyIdentifier"":""person_p_id"",
    ""grantAmount"":""grant_amount"",
    ""legacyProductCode"":""offer"",
    ""decisionMakerComment"":""bo_comment"",
    ""businessCaseLocalIdentifier"":""bel_id_request"",
    ""businessDeveloperComment"":""fo_comment"",
    ""conditionalClause__jm"":""customer_agreement_waivers_list"",
    ""grantDescription"":""customer_proposition_asset"",
    ""programEndDate"":""program_end_date"",
    ""businessCaseSubmissionDate"":""request_date"",
    ""fundingMasterAgreementIdentifier"":""charte_id"",
    ""businessCasePhase"":""phase"",
    ""businessCaseValidationDate"":""customer_proposition_completion_date"",
    ""decisionDate"":""decision_date"",
    ""fundingCompartmentIdentifier"":""funding_account_id"",
    ""decisionMakerCountrySubDivisionDelegationCode"":""country_subdivision_delegation"",
    ""decisionReviewerEmployeeIdentifier"":""instructor"",
    ""subBusinessCaseIdentifier"":""sub_customer_proposal_number"",
    ""businessCaseIdentifier"":""customer_proposal_number"",
    ""grantType"":""grant_type"",
    ""initialFundingRate"":""funding_rate"",
    ""middleOfficeOfficerIdentifier"":""business_developer_employee_identifier"",
    ""middleOfficeTeamManagerIdentifier"":""manager_employee_identifier"",
    ""technicalProductIdentifier"":""technical_product_identifier"",
    ""customerOfferIdentifier"":""customer_offer_identifier"",
    ""customerAgreementSignatureDate"":""signature_date"",
    ""directDebitMandateIdentification"":""mandate_identification"",
    ""creditorIdentifier"":""organisation_p_id"",
    ""eventDate"": ""__calcul__now"",
    ""customerAgreementCurrencyCode"": ""currency"",
    ""performanceStatusInformations__jo"": '!!!!',
    ""middleOfficeTeamManagerComment"":""manager_comment""
}
DATA_STANDARD_PAYLOAD_FIELDS_DISBURSEMENT = {
    ""customerAgreementLocalIdentifier"":""account_id"",
    ""customerAgreementStep"":""customer_agreement_status"",
    ""disbursementDate"":""__calcul__now"",
    ""payeeIdentifier"":""underwriterIdentifier"",
    ""ibanToCreditIdentifier"":""__calcul__empty"", # optional field, we keep it with ?? for now
    ""legacyProductCode"":""offer"",
    ""technicalProductIdentifier"":""technical_product_identifier"",
    ""customerOfferIdentifier"":""customer_offer_identifier"",
    ""businessCaseIdentifier"":""customer_proposal_number"",
    ""subBusinessCaseIdentifier"":""sub_customer_proposal_number"",
    ""customerAgreementCurrencyCode"":""currency"",
    ""paymentScheduleNumber"":""__calcul__empty"",  # optional field, we keep it with ?? for now
    ""debtorIdentifier"":""organisation_p_id"",
    ""eventDate"":""__calcul__now"",
    ""fundingCompartmentIdentifier"":""funding_account_id"",
    ""performanceStatusInformations__jo"":""N"",

    ""wireLabel"":""__calcul__disbursment__transfer_transaction_label"",
    ""disbursementAmount"":""__calcul__disbursment__help_amount"",
    ""transactionLocalIdentifier"":""__calcul__disbursment__client_transaction_id"",
    ""processAllocation"":""__calcul__disbursment__analytic_imputation"",
    ""disbursementType"":""__calcul__const__SEPA"",
}
DATA_STANDARD_PAYLOAD_FIELDS_MANAGEMENT_OPERATION = {
    ""customerAgreementLocalIdentifier"":""account_id"",
    ""legacyProductCode"":""offer"",
    ""technicalProductIdentifier"":""technical_product_identifier"",
    ""customerOfferIdentifier"":""customer_offer_identifier"",
    ""businessCasePhase"":""phase"",
    ""businessCaseIdentifier"":""customer_proposal_number"",
    ""subBusinessCaseIdentifier"":""sub_customer_proposal_number"",
    ""underwriterIdentifier"":""underwriterIdentifier"",
    ""customerAgreementCurrencyCode"":""currency"",
    ""eventType"":""eventType"",
    ""eventDate"":""__calcul__now"",
    ""customerAgreementEmployeeInformation__jo"":""N"",
    ""managementOperationDetail__jm"":""N"",
    ""tmEventId"":""??""
}
DATA_STANDARD_PAYLOAD_FIELDS_RECEIPT_DIRECT_DEBIT = {
    ""customerAgreementLocalIdentifier"": ""account_id"",
    ""directDebitDate"": ""__calcul__now"",
    ""directDebitAmount"": ""__calcul__directDebit__directDebitAmount"",
    ""transactionLocalIdentifier"": ""__calcul__directDebit__transactionLocalIdentifier"",
    ""debtorIdentifier"" : ""underwriterIdentifier"",
    ""legacyProductCode""	: ""offer"",
    ""technicalProductIdentifier"" : ""technical_product_identifier"",
    ""customerOfferIdentifier"" : ""customer_offer_identifier"",
    ""businessCaseIdentifier"" : ""customer_proposal_number"",
    ""subBusinessCaseIdentifier"" : ""sub_customer_proposal_number"",
    ""directDebitLabel"" : ""__calcul__directDebit__directDebitLabel"",
    ""processAllocation"" : ""__calcul__directDebit__analytic_imputation"",
    ""feesType"" : ""__calcul__directDebit__direct_debit_type"",
    ""directDebitMandateIdentification"": ""mandate_identification"",
    ""customerAgreementCurrencyCode"": ""currency"",
    ""creditorIdentifier"": ""__calcul__const__Bpifrance"",
    ""invoiceInformation"" :""__calcul__directDebit__invoiceInformation"",
    ""eventDate"":""__calcul__now"",
    ""fundingCompartmentIdentifier"": ""funding_account_id"",
    ""paymentScheduleNumber"":""deposit_reference_counter"",
}

DATA_STANDARD_PAYLOAD_FIELDS_OVERDUE = {
    ""customerAgreementLocalIdentifier"":"""",
    ""moneyTransferTransactionAmount"":""posting_overdue_amount"",
    ""legacyProductCode"":""offer"",
    ""technicalProductIdentifier"":""technical_product_identifier"",
    ""customerOfferIdentifier"":""customer_offer_identifier"",
    ""underwriterIdentifier"":""underwriter_party_identifier"",
    ""overdueType"":""posting_overdue_type"",
    ""invoiceTypeLabel"":""invoiceTypeLabel"",
    ""invoiceNumber"":""posting_invoice_identifier"",
    ""overdueAmountInformation__jm"":""overdueAmountInformation"",
    ""overdueDate"":""posting_overdue_date"",
    ""overdueReason"":""overdueReason"",
    ""tmEventId"":""??"",
    ""eventDate"":""__calcul__now"",
    ""customerAgreementCurrencyCode"":""currency"",
}

DATA_STANDARD_PAYLOAD_FIELDS_RECEIPT_WIRE = {
    ""managementAccountIdentifier"":""account_id"",
    ""managementAccountType"":""ClearingAccount"",
    ""debtorIdentifier"":""organisation_p_id"",
    ""technicalProductIdentifier"":""technical_product_identifier"",
    ""customerOfferIdentifier"":""customer_offer_identifier"",
    ""receiptWireIdentifier"":""posting_incoming_payment_identifier"",
    ""transactionLocalIdentifier"":""client_transaction_id"",  # posting
    ""receiptWireType"":""SEPA"",
    ""receiptWireAmount"":""amount"", # posting
    ""customerAgreementCurrencyCode"":""currency"",
    ""tmEventId"":""??"",
    ""eventDate"":""__calcul__now"",
    ""businessDomain"":""PSU"",

}



PAYLOAD_DECIMAL_SC_FIELD = [
    ""company_manager_signature"",
    ""request_date"",
    ""person_p_id"",
    ""deposit_reference_counter""
]

PAYLOAD_UNION_SC_FIELD = [
    ""grant_type""
]

PAYLOAD_DATE_SC_FIELD = [
    ""expenses_added_date"",
    ""program_end_date"",
    ""request_date"",
    ""customer_proposition_completion_date"",
    ""decision_date"",
    ""signature_date""
]
## map corresponding entity links and entity fields
CUSTOMER_AGGREMENT_ENTITY_LINKS = {
    'personPartyIdentifier': {
        'idRef':'personParty',
        'type': 'legalRepresentative'
    },
    ""businessCaseLocalIdentifier"": {
        'idRef': ""subBusinessCase-brc"",
        'type': 'dependOn',
        'format': 'number'
    },
    ""decisionReviewerEmployeeIdentifier"": {
        'idRef': ""employee"",
        'type': 'instructedBy'
    },
    ""businessDeveloperIdentifier"": {
        'idRef': ""employee"",
        'type': 'managedBy'
    },
    ""creditorIdentifier"": {
        'idRef': ""organisationParty"",
        'type': 'creditor'
    },
    ""underwriterIdentifier"": {
        'idRef': ""organisationParty"",
        'type': 'underwriter'
    },
    ""fundingCompartmentIdentifier"": {
        'idRef': ""subFund"",
        'type': 'dependOn'
    },
    ""technicalProductIdentifier"": {
        'idRef': ""technicalProduct"",
        'type': 'dependOn'
    },
    ""customerOfferIdentifier"": {
        'idRef': ""customerOffer"",
        'type': 'dependOn'
    },
    ""fundingMasterAgreementIdentifier"": {
        'idRef': ""masterAgreement-osr"",
        'type': 'dependOn'
    },
    ""middleOfficeOfficerIdentifier"": {
        'idRef': ""employee"",
        'type': 'instructedBy'
    },
    ""middleOfficeTeamManagerIdentifier"": {
        'idRef': ""employee"",
        'type': 'managedBy'
    },
    ""legacyProductCode"": {
        'idRef': ""legacyProduct"",
        'type': 'dependOn'
    },
}

DISBURSMENT_ENTITY_LINKS = {
    ""customerAgreementLocalIdentifier"": {
        ""idRef"": ""customerAgreement"",
        ""type"": ""dependOn""
    },
    ""subBusinessCaseIdentifier"": {
        'idRef': ""subBusinessCase-brc"",
        'type': 'dependOn',
        'format': 'number'
    },
    ""debtorIdentifier"": {
        'idRef': ""organisationParty"",
        'type': 'debtor'
    },
    'payeeIdentifier': {
        'idRef':'organisationParty',
        'type': 'payee'
    },

    ""fundingCompartmentIdentifier"": {
        'idRef': ""subFund"",
        'type': 'dependOn'
    },
    ""legacyProductCode"": {
        'idRef': ""legacyProduct"",
        'type': 'dependOn'
    },
    ""technicalProductIdentifier"": {
        'idRef': ""technicalProduct"",
        'type': 'dependOn'
    },
    ""customerOfferIdentifier"": {
        'idRef': ""customerOffer"",
        'type': 'dependOn'
    },

}

MANAGEMENT_OPERATION_ENTITY_LINKS = {
    ""customerAgreementLocalIdentifier"": {
        ""idRef"": ""customerAgreement"",
        ""type"": ""dependOn""
    },
    ""subBusinessCaseIdentifier"": {
        'idRef': ""subBusinessCase-brc"",
        'type': 'dependOn',
        'format': 'number'
    },
    ""fundingCompartmentIdentifier"": {
        'idRef': ""subFund"",
        'type': 'dependOn'
    },
    ""legacyProductCode"": {
        'idRef': ""legacyProduct"",
        'type': 'dependOn'
    },
    ""technicalProductIdentifier"": {
        'idRef': ""technicalProduct"",
        'type': 'dependOn'
    },
    ""customerOfferIdentifier"": {
        'idRef': ""customerOffer"",
        'type': 'dependOn'
    },
    ""underwriterIdentifier"": {
        'idRef': ""organisationParty"",
        'type': 'underwriter'
    },
    ""customerAgreementEmployeeIdentifier"": {
        'idRef': ""employee"",
        'type': 'dependOn'
    },
    'personPartyIdentifier': {
        'idRef':'personParty',
        'type': 'legalRepresentative'
    }
}

RECEIPT_DIRECT_DEBIT_ENTITY_LINKS = {
    ""customerAgreementLocalIdentifier"": {
        ""idRef"": ""customerAgreement"",
        ""type"": ""dependOn""
    },
     ""debtorIdentifier"": {
       'idRef': ""organisationParty"",
        'type': 'debtor'
    },
     ""legacyProductCode"": {
        'idRef': ""legacyProduct"",
        'type': 'dependOn'
    },
    ""technicalProductIdentifier"": {
        'idRef': ""technicalProduct"",
        'type': 'dependOn'
    },
     ""customerOfferIdentifier"": {
        'idRef': ""customerOffer"",
        'type': 'dependOn'
    },
    ""subBusinessCaseIdentifier"": {
        'idRef': ""subBusinessCase-brc"",
        'type': 'dependOn',
        'format': 'number'
    },
     ""creditorIdentifier"": {
        'idRef': ""organisationParty"",
        'type': 'creditor'
    },
    ""fundingCompartmentIdentifier"": {
        'idRef': ""subFund"",
        'type': 'dependOn'
    }
}
     

OVERDUE_ENTITY_LINKS = {
    ""customerOfferIdentifier"": {
        'idRef': ""customerOffer"",
        'type': 'dependOn'
    },
    ""technicalProductIdentifier"": {
        'idRef': ""technicalProduct"",
        'type': 'dependOn'
    },
    ""legacyProductCode"": {
        'idRef': ""legacyProduct"",
        'type': 'dependOn'
    },
    ""underwriterIdentifier"": {
        'idRef': ""underwriterIdentifier"",
        'type': 'signedBy'
    },
    ""customerAgreementLocalIdentifier"": {
        ""idRef"": ""customerAgreement"",
        ""type"": ""dependOn""
    },
    ""invoiceNumber"": {
        ""idRef"": ""invoiceNumber"",
        ""type"": ""dependOn""
    }

}
RECEIPT_WIRE_ENTITY_LINKS = {
    ""underwriterIdentifier"": {
        'idRef': ""underwriterIdentifier"",
        'type': 'signedBy'
    }

}
ENTITY_LINKS_BY_NOTIFICATION_TYPE = {
    NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT: CUSTOMER_AGGREMENT_ENTITY_LINKS,
    NOTIFICATION_ENTITY_TYPE_DISBURSMENT: DISBURSMENT_ENTITY_LINKS,
    NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION: MANAGEMENT_OPERATION_ENTITY_LINKS,
    NOTIFICATION_ENTITY_TYPE_OVERDUE : OVERDUE_ENTITY_LINKS,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE: RECEIPT_WIRE_ENTITY_LINKS,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT: RECEIPT_DIRECT_DEBIT_ENTITY_LINKS


}
NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE = {
    NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT: DATA_STANDARD_PAYLOAD_FIELDS_CUSTOMER_AGREEMENT,
    NOTIFICATION_ENTITY_TYPE_DISBURSMENT: DATA_STANDARD_PAYLOAD_FIELDS_DISBURSEMENT,
    NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION: DATA_STANDARD_PAYLOAD_FIELDS_MANAGEMENT_OPERATION,
    NOTIFICATION_ENTITY_TYPE_OVERDUE: DATA_STANDARD_PAYLOAD_FIELDS_OVERDUE,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE : DATA_STANDARD_PAYLOAD_FIELDS_RECEIPT_WIRE,
    NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT: DATA_STANDARD_PAYLOAD_FIELDS_RECEIPT_DIRECT_DEBIT
    

}


NOTIFICATION_TYPES_BY_STATUS = {
    ""DFO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""VFO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""DFO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CP1""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""RCP1""   : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""VBO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""DBO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""RBO""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CSG""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""DCSG""   : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""RAWBO""  : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""DRAWBO"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,

    ""CXL""    : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CXLDFO"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CXLVBO"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CXLCP1"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CXLCSG"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    ""CXLVFO"" : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,


    # 'EPLCH' : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,
    # 'EPVBO' : NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT,


    ""EDBO""    : NOTIFICATION_ENTITY_TYPE_DISBURSMENT,
    ""EPEDBO""  : NOTIFICATION_ENTITY_TYPE_DISBURSMENT,
   ""INDUVBO"" : NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT,

}
NOTIFICATION_TYPES_BY_STATUS_MANAGEMENT_OPERATION = {
    ""EPVBO""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""INDU""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""DINDU""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""INDUVBO""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""DEPVBO""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""INDUDESC""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""EPCP1""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""EPLCH""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""RFPV""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""RFPD""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""RFPR""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""INDUDBO""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""CLO""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION,
    ""MAT_STATUS""  : NOTIFICATION_ENTITY_TYPE_MANAGEMENT_OPERATION
}
MAP_STATUS_OPERATIONCODE_MANAGEMENT_OPERATION = {
    ""EPVBOINDU"":""INI"",
    ""INDU"":""MOD"",
    ""DINDU"":""CCD"",
    ""INDUVBO"":""VLD"",
    ""DEPVBORJC"":""RJC"",
    ""INDUDESC"":""ABD"",
    ""RFPD"":""RQD"",
    ""RFPV"":""VLD"",
    ""RFPR"":""RFD"",
    ""EPCP1"":""EPCP1"",
    ""EPVBO"":""EPVBO"",
    ""DEPVBO"":""DEPVBO"",
    ""EPLCH"":""EPLCH"",
    ""INDUDBO"":""RJC"",
    ""CLO"":""CLO""
}
MAP_EPVBO_OPERATIONCODE_REASONCODE_MANAGEMENT_OPERATION = {
    ""INI"": ""N/A"",
    ""INIUNDUE"": ""UNDUE""
}
MAP_STATUS_REASONCODE_MANAGEMENT_OPERATION = {
    ""INDU"": ""N/A"",
    ""DINDU"": ""Cancelled following the addition of expenses"", 
    ""INDUVBO"": ""N/A"",
    ""INDUDBO"": ""Rejected by the Manager"",
    ""INDUDESC"": ""Debt write off"", 
    ""DINDUDESC"": ""Rejected by the DESC"",
    ""RFPD"":""N/A"",
    ""RFPV"":""N/A"",
    ""RFPR"":""N/A"",
    ""MAT_STATUS"":""N/A""
}

##############################################
## END : init data to generate entities     ##
##############################################

# Derived parameters
@requires(parameters=True)
def derived_parameters(effective_date):
    # get derivedparam for endprogram
    endprogram_cal = _end_program_calculations(vault)

    return {
        ""possible_grant"": endprogram_cal[""possible_grant""],
        ""first_tranch_amount"": endprogram_cal[""first_tranch_amount""],
        ""sec_tranche_amount"": endprogram_cal[""sec_tranche_amount""],
        ""ep_decision"": endprogram_cal[""ep_decision""],
        ""diminution_amount"": endprogram_cal[""diminution_amount""],
        ""reviewed_grant_amount"": endprogram_cal[""reviewed_grant_amount""],
        ""undue_amount"": endprogram_cal[""undue_amount""],
        ""undue_to_refund_amount"": endprogram_cal[""undue_to_refund_amount""],
        ""undue_abandoned_amount"": endprogram_cal[""undue_abandoned_amount""],
    }


############ ---------------------------- CONSTS/ADRESSES/ACCOUNTS----------------------- ##################
# CONSTS
FIRST_TRANCHE_REFERENCE = "" First Tranch""
SECOND_TRANCHE_REFERENCE = "" Second Tranch""
EMPTY_STRING = """"

# ADDRESSES
SUBS_FEES_ADRESS = ""SUBSCRIPTION_FEES""
INVOICING = ""INVOICING""
INVOICE_ADRESSE_PREFIX = ""INVOICE_""

DITC_ADDRESS = ""DUE_INTEREST_TO_COLLECT""
DIT_ADDRESS = ""DUE_INTEREST_TOTAL""
TRACK_BALANCE_REMAINING_FRONT = ""TRACK_BALANCE_REMAINING_FRONT""
FRONT_REMAINING_COMMITTED = ""FRONT_REMAINING_COMMITTED""
SIGNATURE_REMAINING_COMMITTED = ""SIGNATURE_REMAINING_COMMITTED""
GRANT_FUNDING = ""GRANT_FUNDING""
TRASH = ""TRASH""
AVAILABLE_AMOUNT = ""AVAILABLE_AMOUNT""
TRACK_BALANCE = ""TRACK_BALANCE""
PSU_DIRECT_DEBIT_ACCOUNT = ""psu_direct_debit_handler""
#fess
FRAIS = ""FRAIS""
INDU = ""INDU""
INVOICE_CREATED = ""INVOICE_CREATED""
UNDUECD = ""UNDUECD""
FRAISBZ = ""FRAISBZ""
VLD = ""VLD""
ECF = ""ECF""
UND_001 = ""UND_001""
FRA_001 = ""FRA_001""
PSU = ""PSU""
FRAIS_INSTRUCTION = ""Frais d'instruction""
INDU_LABEL = ""INDU""
RLD = ""RLD""
FRAI = ""FRAI""

NA = ""NA""

invoice_types = [""INDU"", ""FRAIS""]


############ ---------------------------- HOOKS ----------------------------------------- ##################
@requires(flags=True, parameters=True)
def pre_parameter_change_code(parameters, effective_date):
    _control_status_flow_ok(parameters=parameters, vault=vault)
    _control_expectedWithdrawal_lastest_date_with_programEndDate(parameters=parameters, vault=vault)

@requires(parameters=True, balances=""latest live"",)
def post_parameter_change_code(
        old_parameter_values, updated_parameter_values, effective_date
):
    transaction_id_full = vault.get_hook_execution_id()
    transaction_id = vault.get_hook_execution_id().split(""_"")
    timestamp = transaction_id[len(transaction_id) - 1]
    if ""customer_agreement_status"" in updated_parameter_values:
        data_disbursment = {}
        if (updated_parameter_values[""customer_agreement_status""].value == ""EDBO""):
            data_disbursment = _create_disbursment(
                vault=vault,
                updated_parameter_values=updated_parameter_values,
                effective_date=effective_date
            )
            offer = _get_parameter(
                name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
            )
            if offer == ""301"":
                #create invoice
                _create_invoice(vault=vault, invoicing_type=FRAIS, effective_date=effective_date + timedelta(microseconds=5))
            first_tranch_amount = _end_program_calculations(vault)[""first_tranch_amount""]
            _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""EDBO"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = first_tranch_amount,client_id_str=""_DISPONIBLE"")
        elif(updated_parameter_values[""customer_agreement_status""].value == ""EPEDBO""):
            data_disbursment = _create_disbursment(
                vault=vault,
                updated_parameter_values=updated_parameter_values,
                effective_date=effective_date
            )
            sec_tranche_amount = _end_program_calculations(vault)[""sec_tranche_amount""]
            _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""EPEDBO"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = sec_tranche_amount,client_id_str=EMPTY_STRING)
        
            reason_code = _get_parameter(
                name=""reason_code"", optional=True, vault=vault, default_value=OptionalValue("" "")
            )
            if(reason_code in [""DDA"",""DDS""]):
                _update_parameter_closing_date(vault,reset_closing_date=False)

        elif(updated_parameter_values[""customer_agreement_status""].value == ""EPVBO""):
            vault.start_workflow(
                workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value':  _get_string_from_date(datetime.utcnow(), ""-""),
                    'param_name': 'endprogram_date',
                    'is_list': 'false',
                }
            )
            reason_code = _get_parameter(
                name=""reason_code"", optional=True, vault=vault, default_value=OptionalValue("" "")
            )
            if(reason_code==""DDA""):
                diminution_amount = _end_program_calculations(vault)[""diminution_amount""]
                _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""EPVBO"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = diminution_amount,client_id_str=EMPTY_STRING)


        elif(updated_parameter_values[""customer_agreement_status""].value == ""CSG""):
            grant_amount = _get_parameter(
                name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00"")
            )
            _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""CRT"", to_account_id = vault.account_id, to_account_address = AVAILABLE_AMOUNT, from_account_id = GRANT_FUNDING, from_account_address = TRACK_BALANCE, amount = grant_amount,client_id_str=EMPTY_STRING)

        elif(updated_parameter_values[""customer_agreement_status""].value == ""CXLCSG""):
            grant_amount = _get_parameter(
                name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00"")
            )
            _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""CXLCSG"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = grant_amount,client_id_str=EMPTY_STRING)

        elif (
                updated_parameter_values[""customer_agreement_status""].value == ""INDUDESC""
        ):
            undue_abandoned_amount = _end_program_calculations(vault)[""undue_abandoned_amount""]
            undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
            if(undue_payment_type.key == ""full_debt_cancellation""):
                _create_invoice(vault=vault,invoicing_type=INDU, effective_date=effective_date)
                diminution_amount = _end_program_calculations(vault)[""diminution_amount""]
                _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""INDUDESC"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = diminution_amount,client_id_str=EMPTY_STRING)

            _create_posting_balance_perte(vault,undue_abandoned_amount)
            _update_parameter_closing_date(vault,reset_closing_date=False)


        elif (
                updated_parameter_values[""customer_agreement_status""].value == ""INDUVBO""
        ):
            undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
            if(undue_payment_type.key != """" and undue_payment_type.key != ""full_debt_cancellation"" ):
                _create_invoice(vault=vault,invoicing_type=INDU, effective_date=effective_date)
                diminution_amount = _end_program_calculations(vault)[""diminution_amount""]
                _create_posting_balance(vault=vault, effective_date=effective_date, operation_code = ""INDUVBO"", to_account_id = GRANT_FUNDING, to_account_address = TRASH, from_account_id = vault.account_id, from_account_address = AVAILABLE_AMOUNT, amount = diminution_amount,client_id_str=EMPTY_STRING)

            if undue_payment_type.key == ""full_collection"":
                _update_parameter_closing_date(vault,reset_closing_date=False)

            if undue_payment_type.key == ""rescheduling"":
                latest_date_str = _get_biggest_date_rqd(vault)
                latest_date = _get_date_from_string(latest_date_str) if latest_date_str != """" else datetime.utcnow()
                closing_date= latest_date + timedelta(months=13) + timedelta(days=6)
                vault.start_workflow(
                workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value':  _get_string_from_date(closing_date, ""-""),
                    'param_name': 'closing_date',
                    'is_list': 'false',
                }
            )
        _create_posting_engagement(vault=vault, updated_customer_agreement_status=updated_parameter_values[""customer_agreement_status""].value)

        '''
        Call method to create notification due to status change
        '''
        if(updated_parameter_values[""customer_agreement_status""].value not in [""EDBO"",""EPEDBO""]):
            _run_notification(vault, updated_parameter_values, data_disbursment, additional_data={})    
        _run_notification_management_operation(vault, updated_parameter_values,old_parameter_values, additional_data={})

        # Create manually an invoice using  invoice_type_for_manually_invoice_creation and run_manually_invoice_creation parameters
    if ""run_manually_invoice_creation"" in updated_parameter_values and ""invoice_type_for_manually_invoice_creation"" in updated_parameter_values:
        if (updated_parameter_values[""run_manually_invoice_creation""].value == ""1"") and (updated_parameter_values[""invoice_type_for_manually_invoice_creation""].value in invoice_types):
            _create_invoice(vault=vault,invoicing_type=updated_parameter_values[""invoice_type_for_manually_invoice_creation""].value, effective_date=effective_date)


    _expected_withdrawl_workflow(vault,updated_parameter_values)

    if ""performance_status"" in updated_parameter_values or ""performance_sub_status"" in updated_parameter_values:
        if _check_bel_first_update_status_perf(vault,old_parameter_values):
            _update_authorised_disbursement(vault,updated_parameter_values)

    if ""invoicesList"" in updated_parameter_values:
        oldInvoicesList = []
        if (
                old_parameter_values is not None
                and ""invoicesList"" in old_parameter_values
                and old_parameter_values.get(""invoicesList"").value is not None
        ):
            vault.add_account_note(
                body=f""old_parameter_values : {old_parameter_values.get('invoicesList').value}"",
                note_type=NoteType.RAW_TEXT,
                is_visible_to_customer=True,
                date=datetime.utcnow(),
            )
            oldInvoicesList = json_loads(old_parameter_values[""invoicesList""].value)

        newInvoicesList = json_loads(updated_parameter_values[""invoicesList""].value)
        invoice_list_post_param_change_code(
            vault,
            oldInvoicesList,
            newInvoicesList,
            timestamp,
        )
        if(
            old_parameter_values is not None
            and ""invoicesList"" in old_parameter_values
            and (old_parameter_values.get(""invoicesList"").value is None or  json_loads(old_parameter_values.get(""invoicesList"").value)== [])): 
            update_expected_widhdrawl_from_invoices_list(vault,newInvoicesList,old_parameter_values)
            create_posting_invoices_list(vault,newInvoicesList,""Total"")
            create_posting_invoices_list(vault,newInvoicesList,""Solde"")


    if ""expected_withdrawal"" in updated_parameter_values:
        _expected_withdrawaul_asset(vault,updated_parameter_values)


def _expected_withdrawaul_asset(vault,updated_parameter_values):
    balances = vault.get_balance_timeseries().latest() 
    expected_withdrawals =   expected_withdrawals = _get_parameter(
                name=""expected_withdrawal"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),)
    for expected_withdrawal in expected_withdrawals:
        ID_Echeance= expected_withdrawal[""ID_Echeance""] if ""ID_Echeance"" in expected_withdrawal else """"
        invoice_identifier= expected_withdrawal[""invoiceIdentifier""] if ""invoiceIdentifier"" in expected_withdrawal else """"
        paymentScheduleOrderAmountWithVat= expected_withdrawal[""paymentScheduleOrderAmountWithVat""] if ""paymentScheduleOrderAmountWithVat"" in expected_withdrawal else """"
        flagpayment= expected_withdrawal[""flagPayment""] if ""flagPayment"" in expected_withdrawal else """"
        flagActif= expected_withdrawal[""flagActif""] if ""flagActif"" in expected_withdrawal else """"
        invoicing_address = _get_invoicing_addresses_by_invoice_identifier(balances,invoice_identifier)
        denomination = vault.get_parameter_timeseries(name=""currency"").latest()
        solde_asset_ID_Echeance = balances[(invoicing_address, ID_Echeance, denomination, Phase.COMMITTED)].net
        transaction_id=vault.get_hook_execution_id().split(""_"")
        timestamp = transaction_id[len(transaction_id) -1]
        instruction_details = {
            ""event_type"": ""INVOICE_CREATED"",
            ""functional_domain"": ""PSU"",
            ""operation_code"": ""RLD"",
            ""is_fictive"": ""false"",
            ""originating_account_id"": vault.account_id,
            ""transfer_transaction_label"":vault.account_id + ""-"" +current_milli_time(transaction_id[3]),
            ""transfer_transaction_short_id"": 'V' + current_milli_time(transaction_id[3])
            }
       
        if(solde_asset_ID_Echeance!=0 and flagpayment==0):
            start_create_posting_workflow(
                vault,
                vault.account_id,
                invoicing_address,
                ""GRANT_FUNDING"",
                ""TRASH"",
                Decimal(solde_asset_ID_Echeance),
                ID_Echeance,
                instruction_details,
            )
            start_create_posting_workflow(
                vault,
                ""sub_invoicing_xxx"",
                ""INVOICING"",
                vault.account_id,
                invoicing_address,
                Decimal(solde_asset_ID_Echeance),
                'Solde',
                instruction_details,
            )

        if  (solde_asset_ID_Echeance ==0 and flagpayment==1) :
            start_create_posting_workflow(
                vault,
                ""sub_invoicing_xxx"",
                ""INVOICING"",
                vault.account_id,
                invoicing_address,
                paymentScheduleOrderAmountWithVat,
                ID_Echeance,
                instruction_details,
            )
            start_create_posting_workflow(
                vault,
                vault.account_id,
                invoicing_address,
                ""GRANT_FUNDING"",
                ""TRASH"",
                paymentScheduleOrderAmountWithVat,
                'Solde',
                instruction_details,
            )
           




def create_posting_invoices_list(vault,invoices_list,asset):
    is_standard_rate = _get_parameter(
        name=""is_standard_rate"", optional=True, vault=vault, default_value=1
    )
    person_p_id = _get_parameter(
        name=""person_p_id"", optional=False, vault=vault, default_value="" ""
    )
    tva = Decimal(20) if is_standard_rate else Decimal(8.5)

    transaction_id=vault.get_hook_execution_id().split(""_"")
    timestamp = transaction_id[len(transaction_id) -1]
    for invoice in invoices_list:
        invoicePostingSentFlag = invoice[""invoicePostingSentFlag""] if ""invoicePostingSentFlag"" in invoice else 1
        if (invoicePostingSentFlag==0):
            invoicing_label = retrive_invoicing_label(invoice.get(""invoiceType""))
            invoicingType=invoice.get(""invoiceType"")
            instruction_details = {
            ""analytic_imputation"" : str(_get_analytic_imputation(invoicing_type = invoicingType)),
            ""invoicing_number"" : str(invoice['invoiceIdentifier']),
            ""operation_code"": ""RLD"",
            ""event_type"": ""INVOICE_CREATED"",
            ""transfer_transaction_short_id"": ""V""
                                             + current_milli_time(transaction_id[3]),
            ""transfer_transaction_label"" : str(_get_transfer_transaction_label(invoicing_type = invoicingType, account_id = vault.account_id, invoice_number = invoice['invoiceIdentifier'])),
            ""is_fictive"": ""false"",
            ""functional_domain"": ""PSU"",
            ""invoicing_label"": str(_get_invoicing_label(invoicing_type = invoicingType)),
            ""invoicing_code"": str(_get_invoicing_code(invoicing_type = invoicingType)),
            ""invoicing_type"":str(invoicingType),
            ""TVA"" : str(_get_TVA(invoicing_type = invoicingType, tva = tva)),
            ""underwriter_party_identifier"" : str(person_p_id),
            ""TVA_exonerated_amount"" : str(_get_TVA_exonerated_amount(invoicing_type = invoicingType, amount = invoice['invoiceTotalAmountWithVat'])),
            ""amount_before_tax"": str(invoice.get(""invoiceTotalAmount"")),
            ""amount_with_TVA"": str(invoice.get(""invoiceTotalAmountWithVat"")),
                  }
            invoice_adress =  ""INVOICE_""+invoice['invoiceIdentifier']+""_""+invoice['invoiceIssueDate']+""_""+invoice['invoiceDueDate']


            start_create_posting_workflow(
                vault,
                ""sub_invoicing_xxx"",
                ""INVOICING"",
                vault.account_id,
                invoice_adress,
                Decimal(invoice['invoiceTotalAmountWithVat']),
                asset,
                instruction_details,
            )

def update_expected_widhdrawl_from_invoices_list(vault,invoices,old_parameter_values):
    french_dates = vault.get_parameter_timeseries(name=""bdf_calendar"").latest()

    expected_withdrawals = []

    for index,invoice in enumerate(invoices):
        invoicePostingSentFlag = invoice[""invoicePostingSentFlag""] if ""invoicePostingSentFlag"" in invoice else 1
        invoice_due_date_str= invoice[""invoiceDueDate""] if ""invoiceDueDate"" else """"
        invoiceDueDate = _get_date_from_string(invoice_due_date_str)
        date_snt = _get_date_by_adding_business_days(invoiceDueDate, 6, french_dates)

        if invoicePostingSentFlag == 0:
            expected_withdrawal = {
                ""invoiceIdentifier"": invoice[""invoiceIdentifier""] if ""invoiceIdentifier"" in invoice else """",
                ""paymentScheduleOrder"": 1,
                ""paymentScheduleOrderAmount"": invoice[""invoiceTotalAmount""] if ""invoiceTotalAmount"" in invoice else """",
                ""paymentScheduleOrderAmountWithVat"": invoice[""invoiceTotalAmountWithVat""] if ""invoiceTotalAmountWithVat"" in invoice  else """",
                ""paymentScheduleOrderInvoiceDate"": invoice[""invoiceDueDate""] if ""invoiceDueDate"" in invoice else """",
                ""date_RQD"": invoice[""invoiceDueDate""] if ""invoiceDueDate"" in invoice else """",
                ""date_SNT"": _get_string_from_date(date_snt,""-""),
                ""paymentScheduleOrderInvoiceBlockingFlag"": 0,
                ""ID_Echeance"": str(generate_uuid(index)),
                ""flagActif"": 0,
                ""flagPayment"": 0
            }
            expected_withdrawals.append(expected_withdrawal)
    vault.start_workflow(
                workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value': json_dumps(expected_withdrawals) ,
                    'param_name': 'expected_withdrawal',
                    'is_list': 'false',
                }
            )        
   
def generate_uuid(index):
    letters = list(""abcdefghijklmnopqrstuvwxyz"")
    numbers = list(""0123456789"")
    
    def unique_index(max_value, seed):
        return seed % max_value
    
    now = datetime.now()
    timestamp = int(now.timestamp() * 1000000)
    uuid_parts = []
    for i in range(16):  
        letter_index = unique_index(len(letters), timestamp + i*i+index)
        number_index = unique_index(len(numbers), timestamp + i*i+index)
        uuid_parts.append(letters[letter_index])
        uuid_parts.append(numbers[number_index])
    
    uuid = ''.join(uuid_parts)
    
    formatted_uuid = (
        f'{uuid[:8]}-'
        f'{uuid[8:12]}-'
        f'{uuid[12:16]}-'
        f'{uuid[16:20]}-'
        f'{uuid[20:]}'
    )
  
    return formatted_uuid


def invoice_list_post_param_change_code(
        vault, old_invoices, new_invoices, timestamp
):
    if ENABLE_CHAIN_INVOICE:
        new_vld_invoices = []
        old_invoices_dict = (
            {inv.get(""invoiceIdentifier""): inv for inv in old_invoices}
            if len(old_invoices) > 0
            else {}
        )
        new_invoices_dict = (
            {inv.get(""invoiceIdentifier""): inv for inv in new_invoices}
            if len(new_invoices) > 0
            else {}
        )
        for invoice_id, new_invoice in new_invoices_dict.items():
            if (
                    invoice_id not in old_invoices_dict
            ):
                new_vld_invoices.append(new_invoice)

        for invoice in new_vld_invoices:
            invoicingType = retrive_analytic_imputation(invoice.get(""invoiceType""))
            invoicing_label = retrive_invoicing_label(invoice.get(""invoiceType""))
            underwriter_identifier = _get_parameter(
                name=""underwriterIdentifier"", optional=True, vault=vault, default_value="" ""
            )
            instruction_details = {
                ""TVA"": str(((Decimal(invoice[""invoiceTotalAmountWithVat""])/Decimal(invoice.get(""invoiceTotalAmount""))) - 1) * 100),
                ""amount_before_tax"": invoice.get(""invoiceTotalAmount""),
                ""amount_with_TVA"": invoice.get(""invoiceTotalAmountWithVat""),
                ""analytic_imputation"": invoicingType,
                ""event_type"": ""INVOICE_CREATED"",
                ""functional_domain"": ""PSU"",
                ""invoicing_label"": invoicing_label,
                ""invoicing_number"": invoice.get(""invoiceIdentifier""),
                ""invoicing_type"": invoicingType,
                ""is_fictive"": ""false"",
                ""operation_code"": ""RLD"",
                ""transfer_transaction_label"": vault.account_id+ ""-""+ invoice['invoiceIdentifier'],
                ""underwriter_party_identifier"": underwriter_identifier,
                ""transfer_transaction_short_id"": ""V"" + current_milli_time(timestamp)
            }
            invoice_adress =  ""INVOICE_""+invoice['invoiceIdentifier']+""_""+invoice['invoiceDueDate']
            # Create a new posting
            start_create_posting_workflow(
                vault,
                ""sub_invoicing_xxx"",
                ""INVOICING"",
                vault.account_id,
                invoice_adress,
                Decimal(invoice['invoiceTotalAmountWithVat']),
                DEFAULT_ASSET,
                instruction_details,
            )

def _get_biggest_date_rqd(vault):
    max_date_rqd = """"
    expected_withdrawals = _get_parameter(
                name=""expected_withdrawal"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),)
    for item in expected_withdrawals:
        if ""date_RQD"" in item and item['date_RQD'] > max_date_rqd:
            max_date_rqd = item['date_RQD']
    return max_date_rqd 

def _update_parameter_closing_date(vault,reset_closing_date):
    current_date = datetime.utcnow()
    closing_date = current_date +timedelta(months=13) + timedelta(days=6)
    if (reset_closing_date):
        closing_date =  _get_date_from_string(""2100-01-01"")

    vault.start_workflow(
                workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value':  _get_string_from_date(closing_date, ""-""),
                    'param_name': 'closing_date',
                    'is_list': 'false',
                }
            )
                

def start_create_posting_workflow(
        vault,
        debtor_target_account_id,
        debtor_target_account_address,
        creditor_target_account_id,
        creditor_target_account_address,
        amount,
        asset,
        instruction_details,
):
    vault.add_account_note(
        body=f""LLLLLLLLLLLLLLLLLLLLLOOOOOOOOG :END CREATE POSTING WORKFLOW"",
        note_type=NoteType.RAW_TEXT,
        is_visible_to_customer=True,
        date=datetime.utcnow())
    return vault.start_workflow(
        workflow=""CREATE_POSTING"",
        context={
            ""product_id"": ""subvention_mvp"",
            ""debtor_target_account_id"": debtor_target_account_id,
            ""debtor_target_account_address"": debtor_target_account_address,
            ""creditor_target_account_id"": creditor_target_account_id,
            ""creditor_target_account_address"": creditor_target_account_address,
            ""amount"": str(amount),
            ""denomination"": ""EUR"",
            ""asset"": asset,
            ""phase"": ""POSTING_PHASE_COMMITTED"",
            ""instruction_details"": json_dumps(instruction_details),
        },
    )
def retrive_analytic_imputation(
        invoiceType
):
    if(invoiceType == ""INDU""):
        return ""UNDUECD""
    elif(invoiceType == ""FRAIS""):
        return ""FRAISBZ""
    else :
        return ""NA""

def retrive_invoicing_label(
        invoiceType
):
    if(invoiceType == ""INDU""):
        return ""Indu""
    elif(invoiceType == ""FRAIS""):
        return ""Frais d'instruction""
    else :
        return ""NA""

# PRE POSTING
@requires(parameters=True, balances=""latest"")
def pre_posting_code(postings, effective_date):
    _control_posting_instructions(postings,vault)


# POST POSTING
@requires(parameters=True, balances=""latest live"", flags=True)
def post_posting_code(postings, effective_date):
    posting = postings[0]
    event_type = posting.instruction_details[""event_type""] if ""event_type"" in posting.instruction_details else ''
    invoice_identifier = posting.instruction_details[""invoice_identifier""] if ""invoice_identifier"" in posting.instruction_details else ''

    if posting.instruction_details[""operation_code""] == ""RJC"" and event_type == ""DIRECT_DEBIT"":
        balances = vault.get_balance_timeseries().latest()
        invoicing_address = _get_invoicing_addresses_by_invoice_identifier(balances,invoice_identifier)
        if invoicing_address :
            _create_posting_solde_impaye(vault, posting, invoicing_address,invoice_identifier)
            _create_second_posting_solde_impaye(vault, posting, invoicing_address,invoice_identifier)
        
        #notif for RJC
        additional_data = _create_receipt_direct_debit(vault, effective_date, posting.instruction_details, ""RJC"",posting.amount,posting.client_transaction_id)
        _run_notification(vault, updated_parameter_values={} ,data_disbursment={},  additional_data=additional_data, after_scheduler=True)   

        update_expected_withdrawals =  False
        expected_withdrawals = _get_parameter(name=""expected_withdrawal"", optional=True,is_json=True,vault=vault, default_value=json_dumps([]))
        today_date = _clean_date_format(datetime.utcnow())
        
        for exp_withdrawal in expected_withdrawals:
            if (exp_withdrawal.get(""invoiceIdentifier"") == invoice_identifier):
                if ""date_SNT"" in exp_withdrawal and _get_date_from_string(exp_withdrawal['date_SNT']) > _get_date_from_string(today_date):
                    _update_expected_withdrawal_params(exp_withdrawal, ""RJC"")
                    update_expected_withdrawals = True
                    _update_invoice_list_params(vault,invoice_identifier)
                else:
                    exp_withdrawal[""date_SNT""] = """"
                    update_expected_withdrawals = True

        if (update_expected_withdrawals):
            vault.start_workflow(
            workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value': json_dumps(expected_withdrawals),
                    'param_name': 'expected_withdrawal',
                    'is_list': 'false',
                }
            )  

    undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
    invoicing_type = posting.instruction_details.get(""invoicing_type"", """")
    if(undue_payment_type.key == ""full_debt_cancellation"" and event_type == ""INVOICE_CREATED"" and invoicing_type == UNDUECD and posting.credit and ENABLE_CHAIN_INVOICE):
        instruction_details_post_posting = {
            ""event_type"": ""INVOICE_FULL_DEBT_CANCELLATION"",
            ""functional_domain"": ""PSU"",
            ""is_fictive"": ""false"",
            ""operation_code"": ""RLD"",
            ""transfer_transaction_label"":  posting.instruction_details.get(""transfer_transaction_label"",""""),
            ""transfer_transaction_short_id"": posting.instruction_details.get(""transfer_transaction_short_id"","""")
        }
        _create_posting(vault,
                        posting.amount,
                        ""EUR"",
                        vault.account_id,
                        posting.account_address,
                        ""GRANT_FUNDING"",
                        ""TRASH"",
                        ""COMMERCIAL_BANK_MONEY"",
                        posting.client_transaction_id,
                        instruction_details_post_posting)

    if (posting.instruction_details[""operation_code""] == ""ASG"" and event_type == ""INCOMING_PAYMENT""):
        _run_receipt_wire_notification(vault,posting)

    if (posting.instruction_details[""operation_code""] == ""ERJ"" and event_type == ""DISBURSMENT"") or ( posting.instruction_details[""operation_code""] == ""RJC"" and event_type == ""DIRECT_DEBIT""):
        _update_parameter_closing_date(vault,reset_closing_date=True)

    if (posting.instruction_details[""operation_code""] == ""MAT"" and event_type == ""LETTERING_RECEIVED_PAYMENTS""):
       additional_data = _create_lettering_management_operation(vault, posting)
       _run_notification_management_operation(vault, updated_parameter_values={},old_parameter_values={},additional_data=additional_data, lettering_payments=True)
    
    if (posting.instruction_details[""operation_code""] == ""ECF""):

        instruction_details = {
            ""event_type"": """",
            ""functional_domain"": ""PSU"",
            ""operation_code"": ""ECF"",
            ""originating_account_id"": vault.account_id,
            ""transfer_transaction_label"":  posting.instruction_details.get(""transfer_transaction_label"",""""),
            ""transfer_transaction_short_id"": posting.instruction_details.get(""transfer_transaction_short_id"","""")
            }

        start_create_posting_workflow(
        vault,
        vault.account_id,
        AVAILABLE_AMOUNT,
        GRANT_FUNDING,
        TRASH,
        posting.amount,
        ""COMMERCIAL_BANK_MONEY"",
        instruction_details,
    )
    


    if (posting.instruction_details[""operation_code""] == ""EDBO"" and event_type == ""DISBURSMENT""):
        status = _get_parameter(
            name=""customer_agreement_status"",
            optional=True,
            vault=vault,
            default_value=""UNKNOWN"",
        )
        data_disbursment = _prepare_disbursement_data(vault,status)
        _run_notification_post_posting(vault, data_disbursment=data_disbursment, additional_data={}, status=status)

def _prepare_disbursement_data(vault,status):
    data_disbursment={}
    analytic_imputation = ""DEBLOAL""
    transaction_id = vault.get_hook_execution_id().split(""_"")
    tranche_reference = FIRST_TRANCHE_REFERENCE
    help_amount = _calculate_disbursement_help_amount(vault,status)
    data_disbursment={
        ""transfer_transaction_label"": vault.account_id + tranche_reference + ""-""  + current_milli_time(transaction_id[3]),
        ""help_amount"": help_amount,
        ""client_transaction_id"": transaction_id[0] + ""_"" + transaction_id[3],
        ""analytic_imputation"": analytic_imputation,
        }
        
    return data_disbursment

def _calculate_disbursement_help_amount(vault,status):
    help_amount = Decimal(""0.00"")
    grant_amount = _get_parameter(
        name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00"")
    )
    percentage = get_percentage_of_first_tranche(
        _get_parameter(
            name=""percentage_per_tranche"",
            optional=True,
            is_json=True,
            vault=vault,
            default_value=json_dumps([]),
        )
    )
    first_tranche = Decimal(percentage) * grant_amount / 100
    rounded_first_tranche = _round_to_precision(fulfillment_precision, first_tranche)
    rounded_grant_amount = _round_to_precision(fulfillment_precision, grant_amount)
    help_amount = rounded_first_tranche

    if status == ""EPEDBO"":
        possible_grant = Decimal(""0.00"")
        rounded_possible_grant = Decimal(""0.00"")
        tranche_reference = SECOND_TRANCHE_REFERENCE
        if rounded_possible_grant > rounded_grant_amount:
            help_amount = rounded_grant_amount - rounded_first_tranche
        else:
            help_amount = rounded_possible_grant - rounded_first_tranche
    return help_amount


       
                
def _update_expected_withdrawal_params(exp_withdrawal,operation_code):
    if (operation_code == ""RJC""):
        exp_withdrawal['flagPayment'] = 0
    elif (operation_code == ""SNT""):
        exp_withdrawal['flagPayment'] = 1

def _update_invoice_list_params(vault,invoice_identifier):
    invoices_list = _get_parameter(name=""invoicesList"", optional=True, is_json=True, vault=vault,default_value=json_dumps([]))
    balances = vault.get_balance_timeseries().latest()
    for invoice in invoices_list:
        if invoice[""invoiceIdentifier""] == invoice_identifier:
            invoicing_address = _get_invoicing_addresses_by_invoice_identifier(balances, invoice_identifier)
            denomination = vault.get_parameter_timeseries(name=""currency"").latest()
            total_asset = balances[(invoicing_address, ""Total"", denomination, Phase.COMMITTED)].net
            solde_asset = balances[(invoicing_address, ""Solde"", denomination, Phase.COMMITTED)].net
            invoice[""FlagPayment""] = ""P"" if solde_asset == 0 else ""NP"" if total_asset == solde_asset else ""PP""

    vault.start_workflow(
        workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
            context={
                'account_id': vault.account_id,
                'new_value': json_dumps(invoices_list),
                'param_name': 'invoicesList',
                'is_list': 'false',
            }
        )

@requires(parameters=True)
def execution_schedules():
   
    return [
        (
            'CHECK_DAILY_DIRECT_DEBIT', {
                'hour': '10',
                'minute': '00',
                'second': '00'
            }
        ),
        (
            'VALIDATE_DIRECT_DEBIT', {
                'hour': '11',
                'minute': '00',
                'second': '00'
            }
        ),
          (
            'TERMINATE_ACCOUNT',  {
                ""hour"": ""14"",
                ""minute"": ""00"",
                'second': '00'
            },
        )

    ]

# SCHEDULED CODE
@requires(event_type=""TERMINATE_ACCOUNT"", parameters=True)
@requires(event_type=""CHECK_DAILY_DIRECT_DEBIT"", parameters=True, balances=""latest"")
@requires(event_type=""VALIDATE_DIRECT_DEBIT"", parameters=True, balances=""latest"", postings='15 days')
def scheduled_code(event_type, effective_date):
    if event_type == ""CHECK_DAILY_DIRECT_DEBIT"":
        _get_unpaid_invoices(vault, effective_date, event_type)
    elif event_type == ""VALIDATE_DIRECT_DEBIT"":
        _check_direct_debit_schedule(vault, effective_date)
    elif event_type == ""TERMINATE_ACCOUNT"":
        _terminate_account(vault, effective_date)




def _create_posting_solde_impaye(vault, posting, invoicing_address,invoice_identifier):
    transaction_id = vault.get_hook_execution_id().split(""_"")
    overdue_balance_amount = _get_net_balance_by_address(vault, invoicing_address)
    is_standard_rate = _get_parameter(name=""is_standard_rate"", optional=True, vault=vault, default_value=1)
    vat_rate = 20 if is_standard_rate else 8.5
    amount_ht = (posting.amount / (100 + vat_rate)) * 100

    overdue_date = _get_string_from_date(datetime.utcnow(), ""-"")
    transaction_id = vault.get_hook_execution_id().split(""_"")


    invoice_due_date= invoicing_address.split(""_"")[-1]

    invoice_account_address = ""INVOICE_"" + invoice_identifier + ""_"" + invoice_due_date
    solde= _get_net_balance_by_address(vault,invoice_account_address)

    operation_code= ""CRT""
    if (solde is not None and solde != 0):
        operation_code=""UPD""

    needed_params_for_notification_overdue = {}
    overdue_instruction_details = {}
    overdue_instruction_details = {
        ""event_type"": ""OVERDUE"",
        ""functional_domain"": ""PSU"",
        ""operation_code"": operation_code,
        ""is_fictive"": ""false"",
        ""originating_account_id"": vault.account_id,
        ""transfer_transaction_label"":vault.account_id + ""-"" +  current_milli_time(transaction_id[3]),
        ""transfer_transaction_short_id"": 'V' + current_milli_time(transaction_id[3])
    }
    needed_params_for_notification_overdue = {
        ""overdue_amount"": str(posting.amount),
        ""overdue_date"": str(overdue_date),
        ""overdue_type"": posting.instruction_details['direct_debit_type'],
        ""invoice_identifier"": posting.instruction_details['invoice_identifier'],
        ""overdue_vat_excluded_amount"": str(amount_ht),
        ""overdue_vat_included_amount"": str(posting.amount),
        ""operation_code"": operation_code,
        ""overdue_vat_amount"": str(posting.amount - amount_ht),
        ""overdue_vat_rate"": str(vat_rate),
        ""overdue_balance_amount"": str(overdue_balance_amount),
    }



    vault.start_workflow(
        workflow=""CREATE_POSTING"",
        context={
            'product_id': SUBVENTION_MVP,
            ""debtor_target_account_id"": GRANT_FUNDING ,
            ""debtor_target_account_address"": ""TRACK_INVOICE_OVERDUE"",
            ""creditor_target_account_id"": vault.account_id,
            ""creditor_target_account_address"": invoice_account_address,
            ""amount"": str(posting.amount),
            ""denomination"": ""EUR"",
            ""asset"":""OVERDUE"",
            ""phase"": ""POSTING_PHASE_COMMITTED"",
            ""instruction_details"": json_dumps(overdue_instruction_details),
        }
    )
    _run_notification_overdue(vault, needed_params_for_notification_overdue,posting)



def _create_second_posting_solde_impaye(vault, posting,invoicing_address,invoice_identifier):
    overdue_address = """"
    transaction_id = vault.get_hook_execution_id().split(""_"")

    if posting.instruction_details['direct_debit_type'] == ""INDU"":
        overdue_address = ""OVERDUE_UNDUE""
    elif posting.instruction_details['direct_debit_type'] == ""FRAIS"":
        overdue_address = ""OVERDUE_FEES""


    invoice_due_date= invoicing_address.split(""_"")[-1]

    invoice_account_address = ""INVOICE_"" + invoice_identifier + ""_"" + invoice_due_date
    solde= _get_net_balance_by_address(vault,invoice_account_address)

    operation_code= ""CRT""
    if (solde is not None and solde != 0):
        operation_code=""UPD""

    overdue_instruction_details = {}

    overdue_instruction_details = {
        ""event_type"": ""OVERDUE"",
        ""functional_domain"": ""PSU"",
        ""operation_code"": operation_code,
        ""is_fictive"": ""false"",
        ""originating_account_id"": vault.account_id,
        ""transfer_transaction_label"":vault.account_id + ""-"" +current_milli_time(transaction_id[3]),
        ""transfer_transaction_short_id"": 'V' + current_milli_time(transaction_id[3])
    }

    vault.start_workflow(
        workflow=""CREATE_POSTING"",
        context={
            'product_id': SUBVENTION_MVP,
            ""debtor_target_account_id"": GRANT_FUNDING,
            ""debtor_target_account_address"": ""TRACK_ACCOUNT_OVERDUE"",
            ""creditor_target_account_id"":  vault.account_id,
            ""creditor_target_account_address"": overdue_address,
            ""amount"": str(posting.amount),
            ""denomination"": ""EUR"",
            ""asset"":""COMMERCIAL_BANK_MONEY"",
            ""phase"": ""POSTING_PHASE_COMMITTED"",
            ""instruction_details"": json_dumps(overdue_instruction_details),
        }
    )





def _create_posting_totalfees_for_balance(vault, amount,transfer_transaction_short_id):
    transaction_id = vault.get_hook_execution_id().split(""_"")
    posting_instruction = []
    posting_instruction.extend(
        vault.make_internal_transfer_instructions(
            amount=amount,
            denomination=""EUR"",
            to_account_id=vault.account_id,
            to_account_address= ""TOTAL_FRAIS"",
            from_account_id=GRANT_FUNDING,
            from_account_address= TRACK_BALANCE,
            asset=""COMMERCIAL_BANK_MONEY"",
            client_transaction_id = vault.get_hook_execution_id() + ""_FRAIS"",

            instruction_details={
                ""event_type"": """",
                ""functional_domain"": PSU,
                ""operation_code"": RLD,
                ""transfer_transaction_label"": vault.account_id+ ""-""+ current_milli_time(transaction_id[3]),
                ""transfer_transaction_short_id"":transfer_transaction_short_id,

            }
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instruction, effective_date=datetime.utcnow()
    )

def _create_posting(vault, amount, denomination, from_account_id, from_account_address, to_account_id, to_account_address, asset, client_transaction_id, instruction_details):
    posting_instruction = []
    posting_instruction.extend(
        vault.make_internal_transfer_instructions(
            amount=amount,
            denomination=denomination,
            from_account_id=from_account_id,
            from_account_address=from_account_address,
            to_account_id=to_account_id,
            to_account_address=to_account_address,
            asset=asset,
            client_transaction_id=client_transaction_id,
            instruction_details=instruction_details,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instruction, effective_date=datetime.now()
    )

def _create_posting_balance_perte(vault,undue_abandoned_amount):
    transaction_id=vault.get_hook_execution_id().split(""_"")
    timestamp = transaction_id[len(transaction_id) -1]

    instruction_details = {
        ""event_type"": ""Perte"",
        ""functional_domain"": ""PSU"",
        ""is_fictive"": ""false"",
        ""operation_code"": ""ABD"",
        ""originating_account_id"": vault.account_id,
        ""transfer_transaction_label"":  vault.account_id + ""_"" + current_milli_time(timestamp),
        ""transfer_transaction_short_id"": ""V"" + current_milli_time(timestamp)
    }

    start_create_posting_workflow(
        vault,
        ""GRANT_FUNDING"",
        ""TRACK_BALANCE_TOTAL_LOSSES"",
        vault.account_id,
        ""TOTAL_LOSSES"",
        str(undue_abandoned_amount),
        ""COMMERCIAL_BANK_MONEY"",
        instruction_details,
    )


def _terminate_account(vault, effective_date):
    closing_date = _get_parameter(
                name=""closing_date"", optional=True, vault=vault, default_value= _get_date_from_string(""2100-01-01"")
            )
    customer_agreement_status = _get_parameter(
            name=""customer_agreement_status"",
            optional=True,
            vault=vault,
            default_value=""UNKNOWN"",
        )
    
    today_date = datetime.utcnow()
    str_current_date = str(today_date.year) + '-' + f'{today_date.month:02d}' + '-' + f'{today_date.day:02d}'
    str_closing_date= _get_string_from_date(closing_date,""-"")
    if customer_agreement_status  in (""EPEDBO"",""INDUDESC"", ""INDUVBO"") and str_current_date==str_closing_date :
        update_status_clo= {
            ""customer_agreement_status"":""CLO"",
            ""phase"":""ARCHIVING""
        }
        vault.start_workflow(
                workflow='UPDATE_MULTIPLE_INSTANCE_PARAM_VALS',
                context={
                    'account_id': vault.account_id,
                    'parameters':  json_dumps(update_status_clo),
                }
            )



def _check_direct_debit_schedule(vault, effective_date):
    balances = vault.get_balance_timeseries().latest()
    invoicing_adresses = _get_all_invoicing_addresses(balances)
    for invoicing_address in invoicing_adresses:
        address_array = invoicing_address.split(""_"")
        today_date = datetime.utcnow()
        str_current_date = str(today_date.year) + '-' + f'{today_date.month:02d}' + '-' + f'{today_date.day:02d}'

        if invoicing_address.startswith(""INVOICE_PSU_FCFRAI"") and len(address_array) > 4 and str_current_date == address_array[4]:
            _check_validate_direct_debit_frai(vault, invoicing_address, effective_date)
        elif invoicing_address.startswith(""INVOICE_PSU_FCINDU""):
            expected_withdrawals = _get_parameter(
                name=""expected_withdrawal"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),
            )
            invoices_list = _get_parameter(
                name=""invoicesList"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),
            )
        
            undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
            invoice_dict = {
                invoice[""invoiceIdentifier""]: invoice[""invoiceBlockingFlag""]
                 for invoice in invoices_list
                 if ""invoiceIdentifier"" in invoice and ""invoiceBlockingFlag"" in invoice
            }
            for exp_withdrawal in expected_withdrawals:
                invoice_identifier = exp_withdrawal.get(""invoiceIdentifier"")
                invoiceBlockingFlag = invoice_dict.get(invoice_identifier, 0)
                flag_blocage_expected_withdrawal = exp_withdrawal.get(""paymentScheduleOrderInvoiceBlockingFlag"", 0)
                flag_actif_expected_withdrawal = exp_withdrawal.get(""flagActif"", 1)
                date_RQD = exp_withdrawal.get(""date_RQD"")
                invoiceIndex = exp_withdrawal.get('paymentScheduleOrder')
                if((exp_withdrawal is not None and str_current_date == exp_withdrawal.get('date_SNT')) and flag_blocage_expected_withdrawal==0 and
                 flag_actif_expected_withdrawal == 1  and invoiceBlockingFlag == 0 and (undue_payment_type.key in [""full_collection"", ""rescheduling""])) :
                    _check_validate_direct_debit_indu(vault, invoicing_address, date_RQD, invoiceIndex, effective_date)

def _check_validate_direct_debit_frai(vault, invoicing_address, effective_date):
    recent_postings = vault.get_postings()
    for posting in recent_postings:
        invoice_identifier = ""NONE""
        direct_debit_type = ""NONE""
        operation_code = ""NONE""
        if(""invoice_identifier"" in posting.instruction_details and ""direct_debit_type"" in posting.instruction_details):
            invoice_identifier = posting.instruction_details[""invoice_identifier""]
            direct_debit_type = posting.instruction_details[""direct_debit_type""]
            operation_code = posting.instruction_details[""operation_code""]
            reference = invoicing_address.replace(""INVOICE_"", """")
            if (invoice_identifier == reference and direct_debit_type in [FRAIS] \
                    and operation_code == ""RQD"" and ""PENDING_DIRECT_DEBIT"" == posting.account_address):
                _validate_direct_debit(vault, posting, invoicing_address, effective_date, invoice_identifier)


def _check_validate_direct_debit_indu(vault, invoicing_address, date_rqd, invoiceIndex, effective_date):
    recent_postings = vault.get_postings()
    for posting in recent_postings:
        invoice_identifier = ""NONE""
        direct_debit_type = ""NONE""
        operation_code = ""NONE""
        rqd_execution_date = ""NONE""
        if ""invoice_identifier"" in posting.instruction_details and ""rqd_execution_date"" in posting.instruction_details \
                and ""direct_debit_type"" in posting.instruction_details:
            invoice_identifier = posting.instruction_details[""invoice_identifier""]
            direct_debit_type = posting.instruction_details[""direct_debit_type""]
            operation_code = posting.instruction_details[""operation_code""]
            rqd_execution_date = posting.instruction_details[""rqd_execution_date""]
            reference = invoicing_address.replace(""INVOICE_"", """")
            client_transaction_id_parts = posting.client_transaction_id.split(""_"")
            posting_index = client_transaction_id_parts[len(client_transaction_id_parts) -1]


            if invoice_identifier == reference and direct_debit_type in [INDU_LABEL] \
                    and operation_code == ""RQD"" and ""PENDING_DIRECT_DEBIT"" == posting.account_address \
                    and date_rqd == rqd_execution_date and str(invoiceIndex) == posting_index:
                _validate_direct_debit(vault, posting, invoicing_address, effective_date, invoice_identifier)


def _validate_direct_debit(vault, posting,invoicing_adresse,effective_date, invoice_identifier):
    _create_posting_validation(vault, posting, effective_date, ""DEFAULT"", ""TOTAL_DEBITED_AMOUNT"", invoice_identifier)
    _create_posting_validation(vault, posting, effective_date, ""PENDING_DIRECT_DEBIT"", ""CLEARING"", invoice_identifier)
    _create_posting_facturation(vault, posting, invoicing_adresse)

def _create_posting_validation(vault, posting, effective_date, from_account_address, to_account_address, invoice_identifier):
    transaction_id=vault.get_hook_execution_id().split(""_"")
    timestamp = transaction_id[len(transaction_id) -1]
    client_transaction_id = posting.client_transaction_id
    if to_account_address == ""CLEARING"":
        client_transaction_id += '_'+to_account_address
        operation_code = ""CLEARING_SNT""
    else:
        operation_code = ""SNT""
    posting_instruction = []
    instruction_details = _get_instruction_details_by_type(vault, posting, timestamp, operation_code);
    posting_instruction.extend(
        vault.make_internal_transfer_instructions(
            amount=posting.amount,
            denomination=""EUR"",
            from_account_id=vault.account_id,
            from_account_address= from_account_address,
            to_account_id=PSU_DIRECT_DEBIT_ACCOUNT,
            to_account_address= to_account_address,
            asset=DEFAULT_ASSET,
            client_transaction_id=client_transaction_id,
            instruction_details=instruction_details,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instruction, effective_date=datetime.utcnow()
    )
    if(to_account_address == ""TOTAL_DEBITED_AMOUNT""):
        additional_data = _create_receipt_direct_debit(vault, effective_date, instruction_details, ""SNT"", 0,client_transaction_id)
        _run_notification(vault, updated_parameter_values={} ,data_disbursment={},  additional_data=additional_data, after_scheduler=True)  
        update_expected_withdrawals =  False
        expected_withdrawals = _get_parameter(name=""expected_withdrawal"", optional=True,is_json=True,vault=vault, default_value=json_dumps([]))
        for exp_withdrawal in expected_withdrawals:
            if (exp_withdrawal.get(""invoiceIdentifier"") == invoice_identifier):
                _update_expected_withdrawal_params(exp_withdrawal, ""SNT"")
                update_expected_withdrawals = True
                _update_invoice_list_params(vault,invoice_identifier)
        if (update_expected_withdrawals):
            vault.start_workflow(
            workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value': json_dumps(expected_withdrawals),
                    'param_name': 'expected_withdrawal',
                    'is_list': 'false',
                }
            ) 



    


def _create_posting_engagement(vault, updated_customer_agreement_status):
    transaction_id = vault.get_hook_execution_id().split(""_"")
    timestamp = transaction_id[len(transaction_id) - 1]
    grant_amount = _get_parameter(name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00""))
    instruction_details = {
        ""is_fictive"": ""false"",
        ""event_type"": ""TECHNICAL_FOR_ACCOUNTING"",
        ""functional_domain"": PSU_TRIGRAM,
        ""operation_code"": ""CRT"",
        ""originating_account_id"": vault.account_id,
        ""transfer_transaction_label"": vault.account_id + ""_"" + current_milli_time(timestamp),
        ""transfer_transaction_short_id"": ""V"" + current_milli_time(timestamp)
    }
    if updated_customer_agreement_status in (""VBO""): #Credit - Engagement Front
        vault.start_workflow(
            workflow=""CREATE_POSTING"",
            context={
                'product_id': SUBVENTION_MVP,
                ""debtor_target_account_id"": GRANT_FUNDING,
                ""debtor_target_account_address"": TRACK_BALANCE_REMAINING_FRONT,
                ""creditor_target_account_id"": vault.account_id,
                ""creditor_target_account_address"": FRONT_REMAINING_COMMITTED,
                ""amount"": str(grant_amount),
                ""denomination"": ""EUR"",
                ""asset"":""COMMERCIAL_BANK_MONEY"",
                ""phase"": ""POSTING_PHASE_COMMITTED"",
                ""instruction_details"": json_dumps(instruction_details),
            }
        )
    elif updated_customer_agreement_status in (""DCSG"",""CXLVBO"", ""CSG""): #Debit - Engagement Front
        vault.start_workflow(
            workflow=""CREATE_POSTING"",
            context={
                'product_id': SUBVENTION_MVP,
                ""debtor_target_account_id"": vault.account_id,
                ""debtor_target_account_address"": FRONT_REMAINING_COMMITTED,
                ""creditor_target_account_id"": GRANT_FUNDING,
                ""creditor_target_account_address"": TRASH,
                ""amount"": str(grant_amount),
                ""denomination"": ""EUR"",
                ""asset"":""COMMERCIAL_BANK_MONEY"",
                ""phase"": ""POSTING_PHASE_COMMITTED"",
                ""instruction_details"": json_dumps(instruction_details)
            }
        )
    if updated_customer_agreement_status in (""CSG""): #Credit - Engagement Restant
        vault.start_workflow(
            workflow=""CREATE_POSTING"",
            context={
                'product_id': SUBVENTION_MVP,
                ""debtor_target_account_id"": GRANT_FUNDING,
                ""debtor_target_account_address"": TRACK_BALANCE_REMAINING_FRONT,
                ""creditor_target_account_id"": vault.account_id,
                ""creditor_target_account_address"": SIGNATURE_REMAINING_COMMITTED,
                ""amount"": str(grant_amount),
                ""denomination"": ""EUR"",
                ""asset"":""COMMERCIAL_BANK_MONEY"",
                ""phase"": ""POSTING_PHASE_COMMITTED"",
                ""instruction_details"": json_dumps(instruction_details)
            }
        )
    elif updated_customer_agreement_status in (""DRAWBO"", ""CXLCSG"", ""EDBO""): #Debit - Engagement Restant
        vault.start_workflow(
            workflow=""CREATE_POSTING"",
            context={
                'product_id': SUBVENTION_MVP,
                ""debtor_target_account_id"": vault.account_id,
                ""debtor_target_account_address"": SIGNATURE_REMAINING_COMMITTED,
                ""creditor_target_account_id"": GRANT_FUNDING,
                ""creditor_target_account_address"": TRASH,
                ""amount"": str(grant_amount),
                ""denomination"": ""EUR"",
                ""asset"":""COMMERCIAL_BANK_MONEY"",
                ""phase"": ""POSTING_PHASE_COMMITTED"",
                ""instruction_details"": json_dumps(instruction_details)
            }
        )


def _get_instruction_details_by_type(vault, posting, timestamp, operation_code):
    today_date = datetime.utcnow()
    date_transfer_transaction_label = f'{today_date.day:02d}' + '_' + f'{today_date.month:02d}' + '_' + str(today_date.year)
    direct_debit_type = posting.instruction_details[""direct_debit_type""]
    if( direct_debit_type == ""INDU""):
        return {
            ""is_compensating_transaction"" : ""false"",
            ""is_fictive"" : ""false"",
            ""event_type"" : ""DIRECT_DEBIT"",
            ""reason_code"" : """",
            ""invoice_identifier"" : posting.instruction_details[""invoice_identifier""],
            ""analytic_imputation"": posting.instruction_details[""analytic_imputation""],
            ""amount"": str(posting.amount),
            ""functional_domain"" : ""PSU"",
            ""transfer_transaction_id"": posting.instruction_details[""transfer_transaction_id""],
            ""transfer_transaction_short_id"":posting.instruction_details[""transfer_transaction_short_id""],
            ""direct_debit_type"" : direct_debit_type,
            ""transfer_transaction_label"" :  date_transfer_transaction_label + ""_"" + vault.account_id+ ""_"" + direct_debit_type,
            ""operation_code"": operation_code,
            ""direct_debit_local_identifier"":posting.instruction_details[""direct_debit_local_identifier""]
        }

    return {
        ""is_compensating_transaction"" : ""false"",
        ""is_fictive"" : ""false"",
        ""event_type"" : ""DIRECT_DEBIT"",
        ""reason_code"" : """",
        ""invoice_identifier"" : posting.instruction_details[""invoice_identifier""],
        ""analytic_imputation"": posting.instruction_details[""analytic_imputation""],
        ""functional_domain"" : ""PSU"",
        ""transfer_transaction_id"":posting.instruction_details[""transfer_transaction_id""],
        ""transfer_transaction_short_id"":posting.instruction_details[""transfer_transaction_short_id""],
        ""direct_debit_type"" : direct_debit_type,
        ""transfer_transaction_label"" :  date_transfer_transaction_label + ""_"" + vault.account_id+ ""_"" + direct_debit_type,
        ""operation_code"": operation_code,
        ""direct_debit_local_identifier"":posting.instruction_details[""direct_debit_local_identifier""],
        ""TVA"": posting.instruction_details[""TVA""],
        ""amount_before_tax"": posting.instruction_details[""amount_before_tax""],
        ""amount_with_TVA"": posting.instruction_details[""amount_with_TVA""]
    }


def _create_posting_facturation(vault,posting,invoice_account_adress):
    transaction_id = vault.get_hook_execution_id().split(""_"")
    client_transaction_id = posting.client_transaction_id+'_INVOICE_CLEARING'
    direct_debit_type = posting.instruction_details[""direct_debit_type""] if posting.instruction_details[""direct_debit_type""] is not None else """"
    today_date = datetime.utcnow()
    date_transfer_transaction_label = f'{today_date.day:02d}' + '_' + f'{today_date.month:02d}' + '_' + str(today_date.year)
    instruction_details = {
        ""event_type"": ""INVOICE_CLEARING"",
        ""functional_domain"": ""PSU"",
        ""operation_code"": ""INVOICE_CLEARING_SNT"",
        ""transfer_transaction_label"": date_transfer_transaction_label + ""_"" + vault.account_id+ ""_"" +  direct_debit_type,
        ""transfer_transaction_short_id"": 'V' + current_milli_time(transaction_id[-1])
    }

    _create_posting(vault,
                    posting.amount,
                    ""EUR"",
                    vault.account_id,
                    invoice_account_adress,
                    ""GRANT_FUNDING"",
                    TRASH,
                    ""COMMERCIAL_BANK_MONEY"",
                    client_transaction_id,
                    instruction_details
                    )


def _get_unpaid_invoices(vault, effective_date, event_type):
    """"""// Vérfier bien que la balance est positive ( facture pas encore payée ) """"""
    balances = vault.get_balance_timeseries().latest()
    invoicing_adresses = _get_all_invoicing_addresses(balances)
    for invoicing_adresse in invoicing_adresses:
        address_array = invoicing_adresse.split(""_"")
        prelevement_date = datetime.utcnow() - timedelta(days=1)
        str_prelevement_date = str(prelevement_date.year) + '-' + f'{prelevement_date.month:02d}' + '-' + f'{prelevement_date.day:02d}'
        if invoicing_adresse.startswith(""INVOICE_PSU_FCFRAI"") and len(address_array) > 3 and str_prelevement_date == address_array[3]:
            denomination = vault.get_parameter_timeseries(name=""currency"").latest()
            committed_balance = balances[(invoicing_adresse, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net
            if committed_balance > 0:
                mandate_parameter = _get_parameter(name=""mandate_identification"", optional=True, vault=vault,)
                if is_blank(mandate_parameter):
                    vault.add_account_note(
                        body=f""Posting failed : No RUM_ID has been found"",
                        note_type=NoteType.RAW_TEXT,
                        is_visible_to_customer=True,
                        date=datetime.utcnow())
                else:
                    reference = invoicing_adresse.replace(""INVOICE_"", """")
                    undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
                    _run_direct_debit(vault, committed_balance, reference, ""1"", undue_payment_type, str_prelevement_date)

        elif invoicing_adresse.startswith(""INVOICE_PSU_FCINDU""):
            expected_withdrawals = _get_parameter(
                name=""expected_withdrawal"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),)
            invoices_list = _get_parameter(
                name=""invoicesList"",
                optional=True,
                is_json=True,
                vault=vault,
                default_value=json_dumps([]),
            )
        
            undue_payment_type = _get_parameter(name=""undue_payment_type"",optional=True,vault=vault,default_value=UnionItemValue(key=""""))
            invoice_dict = {
                invoice[""invoiceIdentifier""]: invoice[""invoiceBlockingFlag""]
                 for invoice in invoices_list
                 if ""invoiceIdentifier"" in invoice and ""invoiceBlockingFlag"" in invoice
            }
            for exp_withdrawal in expected_withdrawals:
                invoice_identifier = exp_withdrawal.get(""invoiceIdentifier"")
                invoiceBlockingFlag = invoice_dict.get(invoice_identifier, 0)
                flag_blocage_expected_withdrawal = exp_withdrawal.get(""paymentScheduleOrderInvoiceBlockingFlag"", 0)
                flag_actif_expected_withdrawal = exp_withdrawal.get(""flagActif"", 1)
                date_RQD = exp_withdrawal.get(""date_RQD"")
                if ((exp_withdrawal is not None and str_prelevement_date == date_RQD) and (undue_payment_type.key in [""full_collection"", ""rescheduling""])
                and flag_blocage_expected_withdrawal==0 and flag_actif_expected_withdrawal == 1  
                and invoiceBlockingFlag == 0):
                    denomination = vault.get_parameter_timeseries(name=""currency"").latest()
                    committed_balance = balances[(invoicing_adresse, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net
                    if committed_balance > 0:
                        mandate_parameter = _get_parameter(name=""mandate_identification"", optional=True, vault=vault,)
                        if is_blank(mandate_parameter):
                            vault.add_account_note(
                                body=f""Posting failed : No RUM_ID has been found"",
                                note_type=NoteType.RAW_TEXT,
                                is_visible_to_customer=True,
                                date=datetime.utcnow())
                        else:
                            reference = invoicing_adresse.replace(""INVOICE_"", """")
                            invoiceAmount = Decimal(exp_withdrawal.get('paymentScheduleOrderAmountWithVat'))
                            
                            invoiceIndex = exp_withdrawal.get('paymentScheduleOrder')
                            _run_direct_debit(vault, invoiceAmount, reference, invoiceIndex, undue_payment_type, str_prelevement_date)


def _run_direct_debit(vault, due_interest_amount, reference, invoiceIndex, undue_payment_type, str_prelevement_date):
    transaction_id=vault.get_hook_execution_id().split(""_"")
    transaction_id_full = vault.get_hook_execution_id()
    timestamp = transaction_id[len(transaction_id) -1]
    today_date = datetime.utcnow()
    date_transfer_transaction_label = f'{today_date.day:02d}' + '_' + f'{today_date.month:02d}' + '_' + str(today_date.year)
    invoice_number_counter = _get_invoice_number_counter_from_invoiceIdentifier(reference)
    invoicing_type = FRAI if FRAI in reference else (INDU if INDU in reference else """")
    client_transaction_id=vault.account_id+'_'+timestamp+'_'+invoice_number_counter+'_'+invoicing_type
    posting_instruction = []
    instruction_details=_get_direct_debit_instruction_details(vault, reference, due_interest_amount, transaction_id_full, invoiceIndex,
                                                                      undue_payment_type, str_prelevement_date)
    posting_instruction.extend(
        vault.make_internal_transfer_instructions(
            amount=due_interest_amount,
            denomination=""EUR"",
            to_account_id=vault.account_id,
            to_account_address=""PENDING_DIRECT_DEBIT"",
            from_account_id=PSU_DIRECT_DEBIT_ACCOUNT,
            from_account_address=DIT_ADDRESS,
            asset=DEFAULT_ASSET,
            client_transaction_id=client_transaction_id + ""_"" + str(invoiceIndex), #Trailing invoice index to differentiate two or more D.Debits happening on the same day
            instruction_details=instruction_details
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instruction, effective_date=datetime.utcnow()
    )
    needed_client_transaction_id= client_transaction_id + ""_"" + str(invoiceIndex)
    #notif for RQD
    additional_data = _create_receipt_direct_debit(vault, datetime.utcnow(), instruction_details, ""RQD"",0,needed_client_transaction_id)
    _run_notification(vault, updated_parameter_values={} ,data_disbursment={},  additional_data=additional_data, after_scheduler=True)    

############ ---------------------------- PROCEDURE ---------------------------- ##################
def _create_invoice(vault, invoicing_type, effective_date):
    person_p_id = _get_parameter(
        name=""person_p_id"", optional=False, vault=vault, default_value="" ""
    )
    invoice_number_counter = _get_parameter(
        name=""invoice_number_counter"", vault=vault
    )
    is_standard_rate = _get_parameter(
        name=""is_standard_rate"", optional=True, vault=vault, default_value=1
    )
    subscription_fees= _get_parameter(
        name=""subscription_fees"", optional=False, vault=vault, default_value=Decimal(500)
    )
    transaction_id = vault.get_hook_execution_id().split(""_"")
    tva = Decimal(20) if is_standard_rate else Decimal(8.5)
    amount_with_TVA = subscription_fees + (tva * subscription_fees / 100)

    #increment et format invoice number
    invoice_number_counter_str = str(invoice_number_counter)
    invoice_number = _get_invoice_number(invoicing_type = invoicing_type, invoice_number_counter = invoice_number_counter,vault=vault)
    transfer_transaction_label =  _get_transfer_transaction_label(invoicing_type = invoicing_type, account_id = vault.account_id, invoice_number = invoice_number)
    amount = _get_amount(subscription_fees = subscription_fees, amount_with_TVA = amount_with_TVA, invoicing_type = invoicing_type, vault=vault)
    to_account_address = _get_invoice_adresse(vault, invoicing_type, invoice_number)
    instructions= _get_instruction_details(invoicing_type = invoicing_type, amount = amount, amount_with_TVA = amount_with_TVA, tva = tva, invoice_number = invoice_number, transaction_id =transaction_id, transfer_transaction_label = transfer_transaction_label, person_p_id =person_p_id,subscription_fees=subscription_fees)

    posting_instructions = []
    posting_instructions.extend(
        vault.make_internal_transfer_instructions(
            amount = amount,
            denomination = ""EUR"",
            client_transaction_id = ""SUB_INVOICING_""+invoice_number_counter_str,
            to_account_id = vault.account_id,
            to_account_address = to_account_address,
            from_account_id = ""sub_invoicing_xxx"",
            from_account_address = INVOICING,
            pics=[],
            instruction_details= instructions,
            asset=DEFAULT_ASSET,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instructions, effective_date=effective_date
    )

    if (invoicing_type == FRAIS):
        transfer_transaction_short_id=instructions[""transfer_transaction_short_id""]
        _create_posting_totalfees_for_balance(vault,Decimal(amount_with_TVA),transfer_transaction_short_id)

def _create_disbursment(vault, updated_parameter_values, effective_date):
    disbursement_data = {}

    percentage = get_percentage_of_first_tranche(
        _get_parameter(
            name=""percentage_per_tranche"",
            optional=True,
            is_json=True,
            vault=vault,
            default_value=json_dumps([]),
        )
    )
    disbursement_data [""percentage""] = percentage

    grant_amount = _get_parameter(
        name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00"")
    )
    rounded_grant_amount = _round_to_precision(fulfillment_precision, grant_amount)
    ep_retained_expenses = _get_parameter(
        name=""ep_retained_expenses"",
        optional=True,
        vault=vault,
        default_value=Decimal(""0.00""),
    )
    realized_control = _get_parameter(
        name=""realized_control"",
        optional=True,
        vault=vault,
        default_value=UnionItemValue(key=""without_ERDA""),
    )
    funding_rate = _get_parameter(
        name=""funding_rate"", optional=True, vault=vault, default_value=Decimal(""0.00"")
    )
    reason_code = """"
    first_tranche = Decimal(percentage) * grant_amount / 100
    rounded_first_tranche = _round_to_precision(fulfillment_precision, first_tranche)
    tranche_reference = FIRST_TRANCHE_REFERENCE
    analytic_imputation = ""DEBLOAL""
    help_amount = rounded_first_tranche
    if updated_parameter_values[""customer_agreement_status""].value == ""EPEDBO"":
        possible_grant = Decimal(""0.00"")
        rounded_possible_grant = Decimal(""0.00"")
        if (
                realized_control.key == ""with_ERDA""
                or realized_control.key == ""without_ERDA""
        ):
            possible_grant = ep_retained_expenses * funding_rate / 100
            rounded_possible_grant = _round_to_precision(
                fulfillment_precision, possible_grant
            )
        tranche_reference = SECOND_TRANCHE_REFERENCE
        if rounded_possible_grant > rounded_grant_amount:
            help_amount = rounded_grant_amount - rounded_first_tranche
        else:
            help_amount = rounded_possible_grant - rounded_first_tranche
        if rounded_possible_grant >= rounded_grant_amount:
            reason_code = ""DDS""
        elif (
                rounded_first_tranche <= rounded_possible_grant
                and rounded_possible_grant < rounded_grant_amount
        ):
            reason_code = ""DDA""

    # case subventions vertes -> take fees from first tranche
    grant_type = _get_parameter(
        name=""grant_type"",
        optional=True,
        vault=vault,
        default_value=UnionItemValue(key=""""),
    )
    # if (
    #     grant_type.key == ""sub-verte-afr"" or grant_type.key == ""sub-verte-deminimis""
    # ) and updated_parameter_values[""customer_agreement_status""].value == ""EDBO"":
    #     # new help amount
    #     subscription_fees = _get_parameter(
    #         name=""subscription_fees"",
    #         optional=True,
    #         vault=vault,
    #         default_value=Decimal(300),
    #     )
    #     help_amount = help_amount - subscription_fees
    #     _create_pay_fees(vault=vault,subscription_fees=subscription_fees, effective_date=effective_date)
    transaction_id = vault.get_hook_execution_id().split(""_"")
    instruction_details={
        ""transfer_transaction_label"": vault.account_id + tranche_reference + ""-""  + current_milli_time(transaction_id[3]),
        ""analytic_imputation"": analytic_imputation,
        ""functional_domain"": PSU,
        ""reason_code"": reason_code,
        ""operation_code"": ""EDBO"",
        ""event_type"": ""DISBURSMENT"",
        ""transfer_transaction_short_id"": ""V"" + current_milli_time(transaction_id[3]),
    }


    vault.start_workflow(
            workflow=""COMMON_CREATE_DISBURSEMENT"",
            context={
                'product_id': SUBVENTION_MVP,
                ""from_account_id"": GRANT_FUNDING,
                ""from_account_adresse"": DEFAULT_ADDRESS,
                ""to_account_id"": vault.account_id,
                ""amount"": str(grant_amount),
                ""instruction_details"":json_dumps(instruction_details)
            }
        )


    disbursement_data = {
        ""help_amount"": help_amount,
        ""percentage"": percentage,
        ""grant_amount"": grant_amount,
        ""rounded_grant_amount"": rounded_grant_amount,
        ""ep_retained_expenses"": ep_retained_expenses,
        ""client_transaction_id"": transaction_id[0] + ""_"" + transaction_id[3],
    }
    # merge disbursement_data object with instruction_details into disbursement_data object
    disbursement_data.update(instruction_details)

    return disbursement_data
def _create_pay_fees(vault, subscription_fees, effective_date):

    transaction_id = vault.get_hook_execution_id().split(""_"")
    transaction_id_plus_1 = str(int(transaction_id[3])+1000000)
    posting_instructions = []
    posting_instructions.extend(
        vault.make_internal_transfer_instructions(
            amount=subscription_fees,
            denomination=""EUR"",
            client_transaction_id=transaction_id[0] + ""_"" + transaction_id_plus_1,
            from_account_id=GRANT_FUNDING,
            from_account_address=DEFAULT_ADDRESS,
            to_account_id=vault.account_id,
            to_account_address=SUBS_FEES_ADRESS,
            pics=[],
            instruction_details={
                ""operation_code"": ""EDBO"",
                ""event_type"": ""PAY_SUBSCRIPTION_FEES"",
                ""transfer_transaction_short_id"": ""V""
                                                 + current_milli_time(transaction_id_plus_1),
                ""functional_domain"": PSU,
                ""transfer_transaction_label"" : transaction_id[0] + "" PAY_SUBSCRIPTION_FEES""
            },
            asset=DEFAULT_ASSET,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instructions, effective_date=effective_date
    )

def _end_program_calculations(vault):
    # in
    realized_control = _get_parameter(
        name=""realized_control"",
        optional=True,
        vault=vault,
        default_value=UnionItemValue(key=""""),
    )
    ep_retained_expenses = _get_parameter(
        name=""ep_retained_expenses"",
        optional=True,
        vault=vault,
        default_value=Decimal(""0.00""),
    )
    undue_payment_type = _get_parameter(
        name=""undue_payment_type"",
        optional=True,
        vault=vault,
        default_value=UnionItemValue(key=""""),
    )
    # out
    rounded_possible_grant = Decimal(""0.00"")
    sec_tranche_amount = Decimal(""0.00"")
    diminution_amount = Decimal(""0.00"")
    ep_decision = "" ""
    reviewed_grant_amount = Decimal(""0.00"")
    undue_amount = Decimal(""0.00"")
    undue_abandoned_amount = Decimal(""0.00"")
    undue_to_refund_amount = Decimal(""0.00"")

    # needed for calculation
    rounded_first_tranche_amount = Decimal(""0.00"")
    possible_grant = Decimal(""0.00"")
    funding_rate = _get_parameter(
        name=""funding_rate"", optional=True, vault=vault, default_value=Decimal(""0.00"")
    )
    grant_amount = _get_parameter(
        name=""grant_amount"", optional=True, vault=vault, default_value=Decimal(""0.00"")
    )
    rounded_grant_amount = _round_to_precision(fulfillment_precision, grant_amount)
    percentage_of_first_tranche = get_percentage_of_first_tranche(
        _get_parameter(
            name=""percentage_per_tranche"",
            optional=True,
            is_json=True,
            vault=vault,
            default_value=json_dumps([]),
        )
    )
    first_tranche_amount = Decimal(percentage_of_first_tranche) * grant_amount / 100
    rounded_first_tranche_amount = _round_to_precision(
        fulfillment_precision, first_tranche_amount
    )

    # flag
    calculationDone = False

    if (
            realized_control.key == ""with_ERDA"" or realized_control.key == ""without_ERDA""
    ) :
        possible_grant = ep_retained_expenses * funding_rate / 100
        rounded_possible_grant = _round_to_precision(
            fulfillment_precision, possible_grant
        )
        calculationDone = True

    if calculationDone and rounded_possible_grant >= rounded_grant_amount:
        sec_tranche_amount = rounded_grant_amount - rounded_first_tranche_amount
        reviewed_grant_amount = rounded_grant_amount
        ep_decision = ""disbursment""
    elif (
            calculationDone
            and rounded_first_tranche_amount <= rounded_possible_grant
            and rounded_possible_grant < rounded_grant_amount
    ):
        ep_decision = ""help_decr""
        diminution_amount = rounded_grant_amount - rounded_possible_grant
        reviewed_grant_amount = rounded_possible_grant
        sec_tranche_amount = rounded_possible_grant - rounded_first_tranche_amount
    elif (
            calculationDone
            and rounded_possible_grant < rounded_first_tranche_amount
    ):
        ep_decision = ""undue""
        diminution_amount = rounded_grant_amount - rounded_first_tranche_amount
        reviewed_grant_amount = rounded_possible_grant
        undue_amount = rounded_first_tranche_amount - rounded_possible_grant

    if (undue_payment_type.key in [""full_collection"", ""full_wire_transfer"", ""rescheduling""]) :
        undue_to_refund_amount = undue_amount
    elif (undue_payment_type.key == ""full_debt_cancellation"") :
        undue_abandoned_amount = undue_amount

    return {
        ""possible_grant"": rounded_possible_grant,
        ""first_tranch_amount"": rounded_first_tranche_amount,
        ""sec_tranche_amount"": sec_tranche_amount,
        ""ep_decision"": ep_decision,
        ""diminution_amount"": diminution_amount,
        ""reviewed_grant_amount"": reviewed_grant_amount,
        ""undue_amount"": undue_amount,
        ""undue_to_refund_amount"" : undue_to_refund_amount,
        ""undue_abandoned_amount"" :undue_abandoned_amount,
    }


def get_percentage_of_first_tranche(data):
    return data[0][""percentage""] if len(data) > 0 else Decimal(""0.00"")



############ ---------------------------- Control Data methods -------------------------- ##################
def _control_status_flow_ok(parameters, vault):
    # Control contract status flow
    if ""customer_agreement_status"" in parameters:
        athorisedStatusUpdate = {
            ""UNKNOWN"": [""VFO"", ""DFO"", ""CXL""],
            ""VFO"": [""DFO"", ""RFO"", ""CXL"",""CXLVFO""],
            ""DFO"": [""CP1"", ""RCP1"", ""CXLDFO""],
            ""CP1"": [""VBO"", ""RBO"", ""DBO"", ""CXLCP1""],
            ""VBO"": [""CSG"", ""DCSG"", ""CXLVBO""],
            ""CSG"": [""EDBO"", ""RAWBO"", ""DRAWBO"", ""CXLCSG""],
            ""RAWBO"": [""EDBO""],
            ""EDBO"": [""ERJ"", ""EPLCH"", ""RFPD""],
            ""EPLCH"": [""EPCP1"", ""RFPD""],
            ""EPCP1"": [""EPVBO"", ""DEPVBO"", ""RFPD""],
            ""EPVBO"": [""EPEDBO"", ""DINDU"", ""INDU""],
            ""INDU"" : [""INDUVBO"", ""INDUDBO""],
            ""INDUDBO"" : [""EPVBO""],
            ""DINDU"": [""EPCP1""],
            ""INDUVBO"": [""INDUDESC"",""DINDUDESC"",""CLO"",""EPVBO""],
            ""DINDUDESC"" : [""EPVBO""],
            ""INDUDESC"" : [""CLO""],
            ""EPEDBO"": [""ERJ"",""CLO""],
            ""RCP1"": [""VFO""],
            ""RBO"": [""VFO""],
            ""DBO"": [""DFO""],
            ""DCSG"": [""DFO""],
            ""DEPVBO"": [""EPLCH""],
            ""ERJ"": [""VFO"", ""RAWBO"", ""RFPD"",""EDBO"", ""EPEDBO""],
            ""CXLDFO"": [""CXL""],
            ""CXLVBO"": [""CXL""],
            ""CXLCP1"": [""CXL""],
            ""CXLCSG"": [""CXL""],
            ""CXLVFO"": [],
            ""RFPD"": [""RFPV"", ""RFPR""],
            ""RFPV"": [""EPLCH"", ""RFPD""],
            ""RFPR"": [""EPLCH"", ""RFPD""],
            ""CLO"": [],
        }
        targetStatus = parameters[""customer_agreement_status""].value.value
        oldStatus = _get_parameter(
            name=""customer_agreement_status"",
            optional=True,
            vault=vault,
            default_value=""UNKNOWN"",
        )
        athorisedStatus = athorisedStatusUpdate[oldStatus]
        if targetStatus not in athorisedStatus:
            raise Rejected(
                f""Cannot update status {oldStatus} to {targetStatus}, new status update must be in {athorisedStatus}"",
                reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
            )
        nextPhase = {
            ""VFO"": ""STUDY"",
            ""DFO"": ""CONTRACTUALIZATION"",
            ""EPLCH"": ""CONTRACT_LIFECYCLE"",
            ""CXL"": ""CANCELLED"",
            ""CLO"": ""ARCHIVING"",
        }
        if targetStatus in nextPhase:
            authorisedPhase = nextPhase[targetStatus]
            oldPhase = _get_parameter(
                name=""phase"", optional=True, vault=vault, default_value=""UNKNOWN""
            )
            if (oldPhase != authorisedPhase and (
                    ""phase"" not in parameters
                    or parameters[""phase""].value.value != authorisedPhase)
                    or (oldPhase == authorisedPhase and ""phase"" in parameters
                        and parameters[""phase""].value.value != authorisedPhase)
            ):
                raise Rejected(
                    f""phase missing or not authorised for status {targetStatus}, phase must be {authorisedPhase}"",
                    reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
                )

def _control_posting_instructions(postings,vault):
    mandatory_fields = [
        ""event_type"",
        ""functional_domain"",
        ""transfer_transaction_label"",
        ""transfer_transaction_short_id"",
        ""operation_code"",
    ]
    for posting in postings:
        for field in mandatory_fields:
            if field not in posting.instruction_details:
                raise Rejected(
                    f""Cannot make transaction; Missing mandatory field in instruction_details : {field}"",
                    reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
                )



def _expected_withdrawl_workflow(vault,updated_parameter_values):
    if ""expected_withdrawal"" in updated_parameter_values:
        french_dates = vault.get_parameter_timeseries(name=""bdf_calendar"").latest()
        lanch_workflow=  False
        expected_withdrawals = _get_parameter(
            name=""expected_withdrawal"",
            optional=True,
            is_json=True,
            vault=vault,
            default_value=json_dumps([]),
        )

        for expected_withdrawal in expected_withdrawals:
            if ('paymentScheduleOrderInvoiceDate' in expected_withdrawal and ('date_RQD' not in expected_withdrawal or 'date_SNT' not in  expected_withdrawal)):
                date_rqd_str = expected_withdrawal[""paymentScheduleOrderInvoiceDate""]
                date_rqd = _get_date_from_string(date_rqd_str)
                date_snt = _get_date_by_adding_business_days(date_rqd, 6, french_dates)
                expected_withdrawal['date_RQD'] = _get_string_from_date(date_rqd,""-"")
                expected_withdrawal['date_SNT'] = _get_string_from_date(date_snt,""-"")
                lanch_workflow = True

        if (lanch_workflow):
            vault.start_workflow(
                workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
                context={
                    'account_id': vault.account_id,
                    'new_value': json_dumps(expected_withdrawals) ,
                    'param_name': 'expected_withdrawal',
                    'is_list': 'false',
                }
            )
def _control_expectedWithdrawal_lastest_date_with_programEndDate(parameters, vault):

    if ""expected_withdrawal"" in parameters:
        latest_date = _get_lastest_date_from_expectedWithdrawal(parameters)
        if latest_date != """":
            endProgram_date = _get_parameter(
                name=""endprogram_date"", optional=True, vault=vault, default_value= _get_date_from_string(""1900-01-01"")
            )

            if endProgram_date.year != 1900:
                epd_plus_six_months = endProgram_date + timedelta(months=6)
                if latest_date > epd_plus_six_months:
                    epd_str = _get_string_from_date(endProgram_date, ""-"")
                    raise Rejected(
                        f""One or more date of payment in parameter expected_withdrawal exceeds the deadline of 6 months after the end program validation date {epd_str}"",
                        reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
                    )
            else:
                raise Rejected(
                    f""Parameter endProgram_date is invalid (Probably not set yet)"",
                    reason_code=RejectedReason.CLIENT_CUSTOM_REASON,
                )

def _get_lastest_date_from_expectedWithdrawal(parameters):
    expected_withdrawal = json_loads(parameters[""expected_withdrawal""].value.value)
    # Use a list comprehension to get all dates, or None if the date attribute doesn't exist
    dates = []
    for element in expected_withdrawal:
        if element.get('paymentScheduleOrderInvoiceDate') is not None:
            dates.append(_get_date_from_string(element.get('paymentScheduleOrderInvoiceDate')))

    # If there are no dates, return a default value
    if not dates:
        return ''

    # Return the largest date
    return max(dates)


def _check_bel_first_update_status_perf(vault,old_parameter_values):
    # this method checks the first update of connector in BEL of performance params ; the connector in update must not change the value of authorized disbursment from 1 to 0
    performance_status=None
    performance_sub_status=None
    if ""performance_status"" in old_parameter_values :
        performance_status = old_parameter_values[""performance_status""].value

    if ""performance_sub_status"" in old_parameter_values:
        performance_sub_status = old_parameter_values[""performance_sub_status""].value

    if  (performance_status is None or str(performance_status)== """") or (performance_sub_status is  None or str(performance_sub_status) == """"):
        return False

    return True


def _update_authorised_disbursement(vault,updated_parameter_values):
    performance_status=None
    performance_sub_status=None
    if ""performance_status"" in updated_parameter_values :
        performance_status = updated_parameter_values[""performance_status""].value

    if ""performance_sub_status"" in updated_parameter_values:
        performance_sub_status = updated_parameter_values[""performance_sub_status""].value


    if  (performance_status != None and str(performance_status)== ""1"") or (performance_sub_status != None and str(performance_sub_status) == ""2""):
        vault.start_workflow(
            workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
            context={
                'account_id': vault.account_id,
                'new_value':  ""0"",
                'param_name': 'authorisedDisbursement',
                'is_list': 'false',
            }
        )

    if  (performance_status != None and str(performance_status)== ""0"") and (performance_sub_status != None and str(performance_sub_status)== ""1""):
        vault.start_workflow(
            workflow='UPDATE_INSTANCE_PARAMETERS_VALS',
            context={
                'account_id': vault.account_id,
                'new_value':  ""1"",
                'param_name': 'authorisedDisbursement',
                'is_list': 'false',
            }
        )

    ############ ---------------------------- Helper methods -------------------------------- ##################

def current_milli_time(data):
    return str(round(int(data) / 1000000))

def _round_to_precision(precision, amount):
    """"""
    Round a decimal value to required precision

    :param precision: Decimal, number of decimal places to round to
    :param amount: Decimal, amount to round
    :return: Decimal, Rounded amount
    """"""
    decimal_string = str(1.0 / pow(10, precision))
    return amount.quantize(Decimal(decimal_string).normalize(), rounding=ROUND_HALF_UP)

def _get_parameter(
        vault, name, at=None, is_json=False, optional=False, default_value=None
):
    """"""
    Get the parameter value for a given parameter
    :param vault:
    :param name: string, name of the parameter to retrieve
    :param at: Optional datetime, time at which to retrieve the parameter value. If not
    specified the latest value is retrieved
    :param is_json: Optional boolean, if true json_loads is called on the retrieved parameter value
    :param optional: Optional boolean, if true we treat the parameter as optional
    :param default_value: Optional, if the optional function parameter is True, and the optional
    parameter is not set, this value is returned
    :return:
    """"""
    if at:
        parameter = vault.get_parameter_timeseries(name=name).at(timestamp=at)
    else:
        parameter = vault.get_parameter_timeseries(name=name).latest()
    if optional:
        parameter = parameter.value if parameter.is_set() else default_value
    if is_json:
        parameter = json_loads(parameter)

    return parameter

def _get_string_from_date(date, separator):
    """"""
    Converts datetime object to string (YYYY{separator}MM{separator}DD)

    :param date: datetime, representation of date to convert
    :return: date_string, representation of date
    """"""
    date_string = str(date.year) + separator + f'{date.month:02d}' + separator + f'{date.day:02d}'
    return date_string

# Addresses

def _get_all_invoicing_addresses(balances):
    """"""
    Get list of invoicing adresses.

    :param balances: dict, balance dimensions to balance values
    :return: str, invoicing_adresse if exists else empty adresse
    """"""
    principal_addresses = _get_all_addresses(balances)
    invoicing_adresses = [s for s in principal_addresses if s.startswith(""INVOICE_PSU_FC"")]
    return invoicing_adresses


def _get_invoicing_addresses_by_invoice_identifier(balances,invoice_identifier):
    """"""
    Get list of invoicing adresses.

    :param balances: dict, balance dimensions to balance values
    :return: str, invoicing_adresse if exists else empty adresse
    """"""
    principal_addresses = _get_all_addresses(balances)
    invoicing_adresses = [s for s in principal_addresses if invoice_identifier in s ]
    return invoicing_adresses[0] if len(invoicing_adresses) > 0 else None 


def _get_all_addresses(balances):
    """"""
    Gets all claim addresses.

    :param balances: dict, balance dimensions to balance values
    :return: List[str], list of balance addresses that match address_type and batch_id
    """"""
    return [
        balance_dimensions[0]
        for balance_dimensions, balance_amount in balances.items()
    ]

def _get_net_balance_by_address(vault, address_value):
    for (address, asset, denom, phase), balance in vault.get_balance_timeseries().latest().items():
        if address == address_value:
            return balance.net
            
def _get_amount(subscription_fees, amount_with_TVA, invoicing_type,vault):
    if (invoicing_type == INDU) :
        return _end_program_calculations(vault)[""undue_amount""]
    elif (invoicing_type == FRAIS) :
        return amount_with_TVA

def _get_analytic_imputation(invoicing_type):
    if (invoicing_type == INDU):
        return UNDUECD
    elif (invoicing_type == FRAIS) :
        return FRAISBZ

def _get_invoicing_label(invoicing_type):
    if (invoicing_type == INDU):
        return INDU_LABEL
    elif (invoicing_type == FRAIS) :
        return FRAIS_INSTRUCTION

def _get_TVA(invoicing_type, tva):
    if (invoicing_type == INDU):
        return ""0.00""
    elif (invoicing_type == FRAIS) :
        return str(tva)

def _get_TVA_exonerated_amount(invoicing_type,amount):
    if (invoicing_type == INDU):
        return str(amount)
    elif (invoicing_type == FRAIS) :
        return str(0)

def _get_amount_with_TVA(invoicing_type, amount, amount_with_TVA):
    if (invoicing_type == INDU):
        return str(amount)
    elif (invoicing_type == FRAIS) :
        return str(amount_with_TVA)

def _get_amount_before_tax(invoicing_type, amount, subscription_fees):
    if (invoicing_type == INDU):
        return str(amount)
    elif (invoicing_type == FRAIS) :
        return str(subscription_fees)

def _get_transfer_transaction_label(invoicing_type, account_id, invoice_number):
    if(invoicing_type == INDU):
        return account_id + ""undue"" + invoice_number
    elif (invoicing_type == FRAIS) :
        return account_id + invoicing_type + invoice_number

def _get_invoicing_code(invoicing_type):
    if (invoicing_type == INDU):
        return UND_001
    elif (invoicing_type == FRAIS) :
        return FRA_001

def _get_invoice_number(invoicing_type, invoice_number_counter,vault):
    current_number=invoice_number_counter
    return ""PSU_FC""+ invoicing_type[:4] + str(current_number).zfill(10)

def _get_instruction_details(invoicing_type, amount, amount_with_TVA, tva, invoice_number, transaction_id, transfer_transaction_label, person_p_id,subscription_fees):
    if(invoicing_type == INDU or invoicing_type == FRAIS):
        return {
            ""analytic_imputation"" : _get_analytic_imputation(invoicing_type = invoicing_type),
            ""invoicing_number"" : invoice_number,
            ""operation_code"": RLD,
            ""event_type"": INVOICE_CREATED,
            ""transfer_transaction_short_id"": ""V""
                                             + current_milli_time(transaction_id[3]),
            ""transfer_transaction_label"" : transfer_transaction_label,
            ""is_fictive"": ""false"",
            ""functional_domain"": PSU,
            ""invoicing_label"": _get_invoicing_label(invoicing_type = invoicing_type),
            ""invoicing_code"": _get_invoicing_code(invoicing_type = invoicing_type),
            ""invoicing_type"": invoicing_type,
            ""TVA"" : _get_TVA(invoicing_type = invoicing_type, tva = tva),
            ""underwriter_party_identifier"" : person_p_id,
            ""TVA_exonerated_amount"" : _get_TVA_exonerated_amount(invoicing_type = invoicing_type, amount = amount),
            ""amount_with_TVA"" : _get_amount_with_TVA(invoicing_type = invoicing_type, amount = amount, amount_with_TVA = amount_with_TVA),
            ""amount_before_tax"" : _get_amount_before_tax(invoicing_type = invoicing_type, amount = amount,subscription_fees=subscription_fees),
        }


def _get_client_transaction_id(transaction_id, invoicing_type):
    if(invoicing_type == FRAIS):
        return transaction_id[0] + ""_"" + transaction_id[3] + ""_fees""
    else:
        return transaction_id[0] + ""_"" + transaction_id[3]


def _get_direct_debit_instruction_details(vault, reference, due_interest_amount, transaction_id_full, invoiceIndex, undue_payment_type, str_prelevement_date):
    deposit_reference_counter = _get_parameter(
        name=""deposit_reference_counter"", vault=vault
    )
    # get invoice_number_counter from reference value
    invoice_number_counter = _get_invoice_number_counter_from_invoiceIdentifier(reference)
    transfer_transaction_short_id = ""V"" + invoice_number_counter.ljust(13, '0')
    if ""INDU"" in reference:
        return {
            ""is_compensating_transaction"": ""false"",
            ""is_fictive"": ""false"",
            ""event_type"": ""DIRECT_DEBIT"",
            ""reason_code"": """",
            ""invoice_identifier"": reference,
            ""analytic_imputation"": _get_direct_debit_analytic_imputation(reference),
            ""amount"": str(due_interest_amount),
            ""functional_domain"": ""PSU"",
            ""transfer_transaction_id"": transaction_id_full,
            ""transfer_transaction_short_id"": transfer_transaction_short_id,
            ""direct_debit_type"": _get_direct_debit_type(reference),
            ""rqd_execution_date"": str_prelevement_date,
            ""transfer_transaction_label"": _get_direct_debit_transfer_transaction_label(reference, vault.account_id, invoiceIndex, undue_payment_type),
            ""operation_code"": ""RQD"",
            ""direct_debit_local_identifier"": deposit_reference_counter
        }
    elif (""FRAI"" in reference) :
        is_standard_rate = _get_parameter(
            name=""is_standard_rate"", optional=True, vault=vault, default_value=1
        )
        subscription_fees= _get_parameter(
            name=""subscription_fees"", optional=False, vault=vault, default_value=Decimal(500)
        )
        tva = Decimal(20) if is_standard_rate else Decimal(8.5)

        vault.add_account_note(
            body=f""tva : "" + str(tva),
            note_type=NoteType.RAW_TEXT,
            is_visible_to_customer=True,
            date=datetime.utcnow()
        )

        vault.add_account_note(
            body=f""is_standard_rate : "" + str(is_standard_rate),
            note_type=NoteType.RAW_TEXT,
            is_visible_to_customer=True,
            date=datetime.utcnow()
        )
        amount_with_TVA = subscription_fees + (tva * subscription_fees / 100)
        return {
            ""is_compensating_transaction"": ""false"",
            ""is_fictive"": ""false"",
            ""event_type"": ""DIRECT_DEBIT"",
            ""reason_code"": """",
            ""invoice_identifier"":  reference,
            ""analytic_imputation"": _get_direct_debit_analytic_imputation(reference),
            ""TVA"": str(tva),
            ""amount_before_tax"": str(subscription_fees),
            ""amount_with_TVA"": str(amount_with_TVA),
            ""functional_domain"": ""PSU"",
            ""transfer_transaction_id"": transaction_id_full,
            ""transfer_transaction_short_id"": transfer_transaction_short_id,
            ""direct_debit_type"": _get_direct_debit_type(reference),
            ""transfer_transaction_label"": _get_direct_debit_transfer_transaction_label(reference, vault.account_id, invoiceIndex, undue_payment_type),
            ""operation_code"": ""RQD"",
            ""direct_debit_local_identifier"": deposit_reference_counter
        }

def _get_direct_debit_type(reference):
    if (INDU in reference):
        return INDU_LABEL
    elif (FRAI in reference) :
        return FRAIS

def _get_direct_debit_analytic_imputation(reference):
    if (INDU in reference):
        return UNDUECD
    elif (FRAI in reference) :
        return FRAISBZ


def _get_direct_debit_transfer_transaction_label(reference,credited_account,invoiceIndex,undue_payment_type):
    split_ref = ""_"".join(reference.split(""_"", 2)[:2])  # PSU_FCFRAI0000003018_2023-11-29_2023-11-30 ==> PSU_FCFRAI0000003018
    if(undue_payment_type.key == ""rescheduling""):
        label = credited_account + split_ref+str(invoiceIndex)  # PSU_FCFRAI0000003018 => VLT0028265PSU_FCFRAI00000030181
    else:
        label = credited_account + ""_"" + split_ref
    return label





def _get_invoice_adresse(vault, invoicing_type, invoice_number):
    # Dictionary containing French date descriptions
    french_dates = vault.get_parameter_timeseries(name=""bdf_calendar"").latest()
    if (invoicing_type == INDU):
        expected_withdrawal = _get_parameter(
            name=""expected_withdrawal"",
            optional=True,
            is_json=True,
            vault=vault,
            default_value=json_dumps([]),
        )
        if (expected_withdrawal and expected_withdrawal[0].get('paymentScheduleOrderInvoiceDate') is not None):
            prelevement_date_str = expected_withdrawal[0].get('paymentScheduleOrderInvoiceDate')
            prelevement_date = _get_date_from_string(prelevement_date_str)
        else:
            return INVOICE_ADRESSE_PREFIX + invoice_number + ""_"" + NA + ""_"" + NA
    elif (invoicing_type == FRAIS) :
        prelevement_date = _get_date_by_adding_business_days(datetime.utcnow(), 5, french_dates)

    exigibility_date = _get_date_by_adding_business_days(prelevement_date, 1, french_dates)
    return INVOICE_ADRESSE_PREFIX + invoice_number  + ""_"" + _get_string_from_date(prelevement_date, ""-"") + ""_"" + _get_string_from_date(exigibility_date, ""-"")


def _get_date_by_adding_business_days(from_date, days_to_add, french_dates):
    holidays = _get_french_holidays(french_dates)
    current_date = from_date
    business_days_added = 0
    while business_days_added < days_to_add:
        current_date += timedelta(days=1)
        # Skip weekends (Saturday = 5, Sunday = 6) and Holidays
        if current_date.weekday() >= 5 or current_date.date() in holidays:
            continue
        business_days_added += 1
    return current_date

# Function to parse French date descriptions into datetime objects
def _get_french_holidays(french_dates):
    # Convert French date descriptions to actual dates
    return [convert_date(key) for key in json_loads(french_dates)]

def convert_date(french_date):
    # Mapping of French month names to their corresponding numeric values
    month_mapping = {
        'janvier': 1, 'février': 2, 'mars': 3, 'avril': 4, 'mai': 5, 'juin': 6,
        'juillet': 7, 'août': 8, 'septembre': 9, 'octobre': 10, 'novembre': 11, 'décembre': 12
    }
    # Extract day and month from the French date description
    day_str = ''.join(filter(str.isdigit, french_date))
    day = int(day_str)

    # Handling '1er' (1st) in French dates
    if '1er' in french_date:
        day_str = '1'

    # Extract the month name
    month_name = french_date.replace('1er', ' ').replace(day_str, ' ').split(' ')[-1]

    # Convert month name to lowercase for consistency
    month_name_lower = month_name.lower()

    # Get the corresponding numeric value of the month
    month = month_mapping.get(month_name_lower)

    # Assuming the year is the current year for this example
    current_year = datetime.now().year

    # Create a datetime object for the specified date
    return datetime(current_year, month, day).date()

def _get_date_from_string(date_string):
    """"""
    Converts date from string (YYYY-MM-DD) to datetime object
    :param date_string: str, string of date to convert
    :return: datetime, representation of date
    """"""
    split_date = date_string.split(""-"")
    date = datetime(
        year=int(split_date[0]),
        month=int(split_date[1]),
        day=int(split_date[2]),
    )
    return date

# invoice_identifier
def _get_invoice_number_counter_from_invoiceIdentifier(invoiceIdentifier):
    """"""
    Get invoice_number_counter from invoiceIdentifier PSU_FCINDU00000000059_datePrelevement_dateExigibilite --> 59
    :param invoiceIdentifier: str, string of invoice identifier
    :return: str, invoice_number_counter valeur
    """"""
    referenceArray = invoiceIdentifier.split(""_"")
    invoice_number_counter = ''.join(x for x in referenceArray[1] if x.isdigit())
    # get integer value as string
    return str(int(invoice_number_counter))

# invoice_identifier
def _get_invoice_number_from_invoiceAddress(invoice_address):
    """"""
    Get invoice_number from invoiceAddress INVOICE_PSU_FCINDU0000000293_2025-04-08_2025-04-09 --> PSU_FCINDU00000000059
    :param invoiceAddress: str, string of invoice address
    :return: str, invoice_number valeur
    """"""
    invoiceArray = invoice_address.split(""_"")
    return invoiceArray[1]+""_""+invoiceArray[2] if len(invoiceArray) > 2 else  ''
    

def get_process_allocation_from_invoice_address(invoice_address):
    if ""FCINDU"" in invoice_address:
        return ""UNDUECD""
    elif ""FCFRAI"" in invoice_address:
        return ""FRAISBZ""
    return """"


def _create_posting_balance(vault, effective_date, operation_code, to_account_id, to_account_address, from_account_id, from_account_address, amount,client_id_str):
    transaction_id = vault.get_hook_execution_id().split(""_"")
    posting_instructions = []
    posting_instructions.extend(
        vault.make_internal_transfer_instructions(
            amount = amount,
            denomination = ""EUR"",
            client_transaction_id = vault.get_hook_execution_id() + client_id_str,
            to_account_id = to_account_id,
            to_account_address = to_account_address,
            from_account_id = from_account_id,
            from_account_address = from_account_address,
            pics=[],
            instruction_details= {
                ""transfer_transaction_label"": vault.account_id
                                              + ""-""
                                              + current_milli_time(transaction_id[3]),
                ""functional_domain"": ""PSU"",
                ""operation_code"": operation_code,
                ""event_type"": """",
                ""transfer_transaction_short_id"": ""V""
                                                 + current_milli_time(transaction_id[3])
            },
            asset=DEFAULT_ASSET,
        )
    )
    vault.instruct_posting_batch(
        posting_instructions=posting_instructions, effective_date=effective_date
    )

def is_blank(s):
    return not (s is not None and s.strip() !='')

#############################################
#
# generate entities content and notify
#
#############################################

def _run_notification(vault, updated_parameter_values, data_disbursment, additional_data, after_scheduler=False):
    status = updated_parameter_values[""customer_agreement_status""].value if after_scheduler == False else ""INDUVBO""
    notification_entity_type = NOTIFICATION_TYPES_BY_STATUS[status] if status in NOTIFICATION_TYPES_BY_STATUS else ''


    # if status is not activate to generate entity
    # do not treat
    if(  notification_entity_type == ''):
       return 0

    # case shculer SNT & RQD
    if(  status == 'INDUVBO' and after_scheduler == False):
       return -1
    # if notification is not activated
    if( ENABLED_NOTIFICATIONS[notification_entity_type] == False):
        return -2

    offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    operation_code = _get_operation_code_by_status(status)
    notification_type = _get_notification_type(status, offer, operation_code,additional_data)

    organized_fields_by_kinds = _organize_fields_by_kind(NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type])
    accountIdName = 'customerAgreementLocalIdentifier'

    _notify(vault,
            notification_type,
            organized_fields_by_kinds,
            notification_entity_type,
            generate_idRef(data_disbursment, notification_entity_type, vault),
            accountIdName,
            operation_code, 
            data_disbursment,
            additional_data
            )
    return 1


def generate_idRef(data_disbursment, notification_entity_type, vault):
    return notification_entity_type + ""-"" + (data_disbursment[
                                                 'client_transaction_id'] if notification_entity_type == NOTIFICATION_ENTITY_TYPE_DISBURSMENT else vault.account_id)


def _run_notification_management_operation(vault, updated_parameter_values, old_parameter_values, additional_data, lettering_payments=False):
    status = updated_parameter_values[""customer_agreement_status""].value if lettering_payments == False else ""MAT_STATUS""
    notification_entity_type = NOTIFICATION_TYPES_BY_STATUS_MANAGEMENT_OPERATION[status] if status in NOTIFICATION_TYPES_BY_STATUS_MANAGEMENT_OPERATION else ''


    # if status is not activate to generate entity
    # do not treat
    if(  notification_entity_type == '' ):
        return 0

    # if notification is not activated
    if( ENABLED_NOTIFICATIONS[notification_entity_type] == False):
        return 0

    offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    notification_type = _get_notification_type_management_operation(status, offer)

    organized_fields_by_kinds = _organize_fields_by_kind(NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type])
    accountIdName = 'customerAgreementLocalIdentifier'

    _notify_management_operation(vault,
                                 notification_type,
                                 organized_fields_by_kinds,
                                 notification_entity_type,
                                 notification_entity_type + ""-""+vault.account_id,
                                 accountIdName,
                                 status,
                                 old_parameter_values,
                                 additional_data
                                 )
    return 1





def _run_notification_overdue(vault, overdue_instruction_details,posting):
    notification_entity_type = NOTIFICATION_ENTITY_TYPE_OVERDUE

    # if notification is not activated
    if( ENABLED_NOTIFICATIONS[notification_entity_type] == False):
        return 0

    offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    notification_type=PSU_TRIGRAM_BY_OFFER[offer] + '|' + NOTIFICATION_ENTITY_TYPE_OVERDUE + '|' + SUBVENTION_MVP
    organized_fields_by_kinds = _organize_fields_by_kind(NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[NOTIFICATION_ENTITY_TYPE_OVERDUE])
    accountIdName = 'customerAgreementLocalIdentifier'

    _notify_overdue(vault,
                    notification_type,
                    organized_fields_by_kinds,
                    notification_entity_type,
                    notification_entity_type + ""-""+vault.account_id,
                    accountIdName,
                    overdue_instruction_details,
                    posting
                    )


def _run_receipt_wire_notification(vault,posting):
    notification_entity_type = NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE

    # if notification is not activated
    if( ENABLED_NOTIFICATIONS[notification_entity_type] == False):
        return 0;

    offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    notification_type=PSU_TRIGRAM_BY_OFFER[offer] + '|' + NOTIFICATION_ENTITY_TYPE_RECEIPT_WIRE + '|' + SUBVENTION_MVP
    organized_fields_by_kinds = _organize_fields_by_kind(NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type])
    accountIdName = 'managementAccountIdentifier'

    _notify_receipt_wire(vault,
                         notification_type,
                         organized_fields_by_kinds,
                         notification_entity_type,
                         notification_entity_type + ""-""+vault.account_id,
                         accountIdName,
                         posting
                         )

def _run_notification_post_posting(vault, data_disbursment, additional_data, status):
    notification_entity_type = NOTIFICATION_TYPES_BY_STATUS[status] if status in NOTIFICATION_TYPES_BY_STATUS else ''


    # if status is not activate to generate entity
    # do not treat
    if(  notification_entity_type == ''):
       return 0

    # if notification is not activated
    if( ENABLED_NOTIFICATIONS[notification_entity_type] == False):
        return -2

    offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    operation_code = _get_operation_code_by_status(status)
    notification_type = _get_notification_type(status, offer, operation_code,additional_data)

    organized_fields_by_kinds = _organize_fields_by_kind(NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type])
    accountIdName = 'customerAgreementLocalIdentifier'

    _notify(vault,
            notification_type,
            organized_fields_by_kinds,
            notification_entity_type,
            generate_idRef(data_disbursment, notification_entity_type, vault),
            accountIdName,
            operation_code, 
            data_disbursment,
            additional_data
            )



def _organize_fields_by_kind(fields_list):
    map_fields = {'all':[]}
    for prefixed_field in fields_list:
        field_prefix_splited = prefixed_field.split(FIELD_SEPARATOR);
        field_name = field_prefix_splited[0]
        prefix = 'sm'
        if( len(field_prefix_splited) > 1 ):
            prefix = field_prefix_splited[1]

        if(prefix  not in map_fields) :
            map_fields[prefix] = []

        map_fields[prefix].append(field_name)
        map_fields['all'].append(field_name)

    return map_fields


def _notify(vault,notification_type, notification_details_keys, type, idRef,  accountIdName, operation_code, data_disbursment, additional_data):

    mandatory_fields = notification_details_keys['sm'] if 'sm'  in notification_details_keys else []
    mandatory_fields_json = notification_details_keys['jm'] if 'jm'  in notification_details_keys else []
    optional_fields_json = notification_details_keys['jo'] if 'jo'  in notification_details_keys else []

    map_entity_sc_keys = NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[type]
    if (additional_data and additional_data[""operationCode""] ):
        operation_code = additional_data[""operationCode""]

    data = {}
    notification_details = {}
    entity = {}
    # transform type to UpperCamelCase
    entity['type'] =  type[0].upper() + type[1:]
    entity['idRef'] = idRef
    entity['domain'] = DOMAIN_FINANCIAL
    entity['eventCode'] = {
        'operationCode': operation_code,
        'reasonCode' : _get_parameter(vault, name=""reason_code"", optional=True, default_value="""")
    }
    data[accountIdName] = vault.account_id


    for key in notification_details_keys['all']:
        if mandatory_fields and key in mandatory_fields:
            vaultName = map_entity_sc_keys[key]
            if key == accountIdName or vaultName == '??' :
                continue
            elif vaultName == 'currency' :
                data[key] = vault.get_parameter_timeseries(name=""currency"").latest()
            elif vaultName.startswith('__calcul__now') :
                data[key] = _format_datetime_utcnow()
            elif vaultName.startswith('__calcul__empty') :
                data[key] = """"
            elif vaultName.startswith('__calcul__const') :
                data[key] = vaultName.replace('__calcul__const__', '')
            # elif vaultName starts with __calcul__disbursment__ then data[key] is gotten from data_disbursment
            elif vaultName.startswith('__calcul__disbursment__') :
                data[key] = ""SEPA"" if key == 'disbursementType' else str(data_disbursment[vaultName.replace('__calcul__disbursment__', '')])
            elif key == 'technicalProductIdentifier' :
                data[key] = setTechnicalProductIdentifier(vault)
            elif key == 'customerOfferIdentifier' :
                data[key] = setCustomerOfferIdentifier(vault)

            elif vaultName.startswith('__calcul__directDebit__') :
                param = vaultName.replace('__calcul__directDebit__', '')
                data[key] = str(additional_data[param]) if param!= ""invoiceInformation"" else additional_data[param]

            else:    
                data[key] = str(_get_parameter_entity(vault, name=vaultName, default_value=""""))

        ### MANdatory json fields
        elif mandatory_fields_json and key in mandatory_fields_json:
            if key == 'percentagePerTranche' :
                data[key] = preparePercentagePerTranche(vault, map_entity_sc_keys, key)
            elif key == 'financialAnnex' :
                data[key] = prepareFinnancialAnnex(vault, map_entity_sc_keys, key)
            else :
                data[key] = _get_parameter_entity(vault, name=map_entity_sc_keys[key+""__jm""], is_json=True,  default_value=json_dumps([]))

                ### OPTIONAL json fields
        elif optional_fields_json and key in optional_fields_json:
            if key == 'performanceStatusInformations' :
                data[key] = preparePerformanceStatusInformations(vault, data, key)
            else:
                data[key] = _get_parameter_entity(vault, name=map_entity_sc_keys[key+""__jo""], is_json=True, default_value=json_dumps([]))

        ### SIMPLE OPTIONAL fields
        else:
            value = _get_parameter_entity(vault, map_entity_sc_keys[key+""__so""], default_value="""")
            data[key] = str(value) if value is not None else """"
        if (operation_code==""RJC""):
            data[""rejectedTransactionLocalIdentifier""]= """" 
        

    

    entity['data'] = data
    entity['links'] = _init_notify_links(vault,data, type)
    notification_details['entity'] = entity
    # vault.add_account_note(
    #     body=f""notification_details: {str(notification_details)}"",
    #     note_type=NoteType.RAW_TEXT,
    #     is_visible_to_customer=True,
    #     date=datetime.utcnow()
    # )
    vault.instruct_notification(
        notification_type=notification_type,
        notification_details={ ""entity"" : json_dumps(notification_details) }
    )
   

def _notify_overdue(vault, notification_type, notification_details_keys, notification_entity_type, idRef, accountIdName,overdue_instruction_details,posting ):
    mandatory_fields = notification_details_keys['sm'] if 'sm'  in notification_details_keys else []
    mandatory_fields_json = notification_details_keys['jm'] if 'jm'  in notification_details_keys else []
    optional_fields_json = notification_details_keys['jo'] if 'jo'  in notification_details_keys else []

    map_entity_sc_keys = NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type]

    reason_code = _get_parameter(vault, name=""reason_code"", optional=True, default_value="""")
    data = {}
    notification_details = {}
    entity = {}
    # transform type to UpperCamelCase
    entity['type'] = notification_entity_type[0].upper() + notification_entity_type[1:]
    entity['idRef'] = idRef
    entity['domain'] = DOMAIN_FINANCIAL
    entity['eventCode'] = {
        'operationCode': overdue_instruction_details[""operation_code""],
        'reasonCode': reason_code
    }
    data[accountIdName] = vault.account_id


    for key in notification_details_keys['all']:
        if mandatory_fields and key in mandatory_fields:
            vaultName = map_entity_sc_keys[key]
            if key == accountIdName or vaultName == '??' :
                continue
            elif vaultName == 'currency' :
                data[key] = vault.get_parameter_timeseries(name=""currency"").latest()
            elif vaultName.startswith('__calcul__now') :
                data[key] = _format_datetime_utcnow()
            elif vaultName== ""overdueReason"":
                data[key] = posting.instruction_details[""reason_code""] if ""reason_code"" in posting.instruction_details else ''
            elif vaultName== ""invoiceTypeLabel"":
                data[key] = _get_invoice_label(vault, posting)
            elif vaultName.startswith('posting_') :
                posting_param= vaultName.replace('posting_', '')
                data[key] = overdue_instruction_details[posting_param] if posting_param in overdue_instruction_details else ''
            else:
                data[key] = str(_get_parameter(name=vaultName, optional=True, vault=vault, default_value=""""))

        elif mandatory_fields_json and key in mandatory_fields_json:
            if key == 'overdueAmountInformation':
                data[key] = prepareOverdueAmountInformation(vault, overdue_instruction_details, posting)
        else:
            value = _get_parameter(name=vaultName, optional=True, vault=vault, default_value="""")
            data[key] = str(value) if value is not None else """"

    entity['data'] = data
    entity['links'] = _init_notify_links(vault,data, notification_entity_type)
    notification_details['entity'] = entity
    # vault.add_account_note(
    #     body=f""notification_details: {str(notification_details)}"",
    #     note_type=NoteType.RAW_TEXT,
    #     is_visible_to_customer=True,
    #     date=datetime.utcnow()
    # )
    vault.instruct_notification(
        notification_type=notification_type,
        notification_details={ ""entity"" : json_dumps(notification_details) }
    )


def _notify_receipt_wire(vault, notification_type, notification_details_keys, notification_entity_type, idRef, accountIdName,posting ):
    mandatory_fields = notification_details_keys['sm'] if 'sm'  in notification_details_keys else []
    mandatory_fields_json = notification_details_keys['jm'] if 'jm'  in notification_details_keys else []
    optional_fields_json = notification_details_keys['jo'] if 'jo'  in notification_details_keys else []

    map_entity_sc_keys = NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[notification_entity_type]

    reason_code = _get_parameter(vault, name=""reason_code"", optional=True, default_value="""")
    data = {}
    notification_details = {}
    entity = {}
    # transform type to UpperCamelCase
    entity['type'] = notification_entity_type[0].upper() + notification_entity_type[1:]
    entity['idRef'] = idRef
    entity['domain'] = DOMAIN_FINANCIAL
    entity['eventCode'] = {
        'operationCode': ""RCV"",
        'reasonCode': reason_code
    }
    data[accountIdName] = vault.account_id

    for key in notification_details_keys['all']:
        if mandatory_fields and key in mandatory_fields:
            vaultName = map_entity_sc_keys[key]
            if vaultName == '??' :
                continue
            elif key in [""managementAccountType"",""receiptWireType"",""businessDomain""]:
                data[key]= vaultName
            elif vaultName == 'currency' :
                data[key] = vault.get_parameter_timeseries(name=""currency"").latest()
            elif key == accountIdName :
                data[key] = _get_managementAccountIdentifier(vault,posting)
            elif vaultName.startswith('__calcul__now') :
                data[key] = _format_datetime_utcnow()
            elif vaultName == 'client_transaction_id' :
                data[key] = posting.client_transaction_id
            elif vaultName == 'amount' :
                data[key] = str(posting.amount)
            elif vaultName.startswith('posting_') :
                posting_param= vaultName.replace('posting_', '')
                data[key] = posting.instruction_details[posting_param] if posting_param in posting.instruction_details else ''
            else:
                data[key] = str(_get_parameter(name=vaultName, optional=True, vault=vault, default_value=""""))

    entity['data'] = data
    entity['links'] = _init_notify_links(vault,data, notification_entity_type)
    notification_details['entity'] = entity
    # vault.add_account_note(
    #     body=f""notification_details: {str(notification_details)}"",
    #     note_type=NoteType.RAW_TEXT,
    #     is_visible_to_customer=True,
    #     date=datetime.utcnow()
    # )
    vault.instruct_notification(
        notification_type=notification_type,
        notification_details={ ""entity"" : json_dumps(notification_details) }
    )

def _notify_management_operation(vault,notification_type, notification_details_keys, type, idRef,  accountIdName, status, old_parameter_values, additional_data):
    mandatory_fields = notification_details_keys['sm'] if 'sm'  in notification_details_keys else []
    mandatory_fields_json = notification_details_keys['jm'] if 'jm'  in notification_details_keys else []
    optional_fields_json = notification_details_keys['jo'] if 'jo'  in notification_details_keys else []

    map_entity_sc_keys = NOTIFICATION_PAYLOAD_FIELDS_BY_NOTIFICATION_TYPE[type]

    reason_code = setReasonCode(vault,status,old_parameter_values)
    data = {}
    notification_details = {}
    entity = {}
    # transform type to UpperCamelCase
    entity['type'] = type[0].upper() + type[1:]
    entity['idRef'] = idRef
    entity['domain'] = DOMAIN_FINANCIAL
    entity['eventCode'] = {
        'operationCode': setOperationCode(status,reason_code,additional_data),
        'reasonCode': reason_code
    }
    data[accountIdName] = vault.account_id


    for key in notification_details_keys['all']:
        if mandatory_fields and key in mandatory_fields:
            vaultName = map_entity_sc_keys[key]
            if key == accountIdName or vaultName == '??' :
                continue
            elif vaultName == 'currency' :
                data[key] = vault.get_parameter_timeseries(name=""currency"").latest()
            elif vaultName == 'eventType' :
                data[key] = setEventType(status,reason_code,additional_data)
            elif vaultName.startswith('__calcul__now') :
                data[key] = _format_datetime_utcnow()
            elif key == 'technicalProductIdentifier' :
                data[key] = setTechnicalProductIdentifier(vault)
            elif key == 'customerOfferIdentifier' :
                data[key] = setCustomerOfferIdentifier(vault)
            else:
                data[key] = str(_get_parameter_entity(vault, name=vaultName, default_value=""""))

        ### MANdatory json fields
        elif mandatory_fields_json and key in mandatory_fields_json:
            if key == 'managementOperationDetail':
                mappedManagementOperation = mapManagementOperationDetail(vault,status,reason_code)
                data[key] = prepareManagementOperationDetail(vault, mappedManagementOperation, additional_data)
        ### OPTIONAL json fields
        elif optional_fields_json and key in optional_fields_json:
            if key == 'customerAgreementEmployeeInformation':
                customerAgreementEmployeeInfo = prepareCustomerAgreementEmployeeInformation(vault, data, key,status)
                if customerAgreementEmployeeInfo and customerAgreementEmployeeInfo[0] :    
                    data[key] = customerAgreementEmployeeInfo
        ### SIMPLE OPTIONAL fields
        else:
            value = _get_parameter_entity(vault, map_entity_sc_keys[key+""__so""], default_value="""")
            data[key] = str(value) if value is not None else """"

    entity['data'] = data
    entity['links'] = _init_notify_links(vault,data, type)
    notification_details['entity'] = entity
    # vault.add_account_note(
    #     body=f""notification_details: {str(notification_details)}"",
    #     note_type=NoteType.RAW_TEXT,
    #     is_visible_to_customer=True,
    #     date=datetime.utcnow()
    # )
    vault.instruct_notification(
        notification_type=notification_type,
        notification_details={ ""entity"" : json_dumps(notification_details) }
    )

def _get_invoice_label(vault, posting):
    direct_debit_type =  posting.instruction_details[""direct_debit_type""] if ""direct_debit_type"" in posting.instruction_details else ''
    if direct_debit_type == ""INDU"":
        return ""INDU""
    elif  direct_debit_type == ""FRAIS"":
        return ""frais d'instruction""


def _get_link_overdue_invoide_identifier(data,links):
    direct_debit_type =  data[""overdueType""] if ""overdueType"" in data else ''
    value = data[""invoiceNumber""] if ""invoiceNumber"" in data else ''
    if direct_debit_type == ""INDU"":
        links.append({
            'idRef':""paymentDueNotice-"" + str(value),
            'type': ""billedBy""
        })
    elif  direct_debit_type == ""FRAIS"":
        links.append({
            'idRef': 'invoice-' + str(value),
            'type': ""billedBy""
        })


def _get_managementAccountIdentifier(vault,posting) :
    account_id = posting.account_id
    if account_id.startswith('WAIT_PSU') :
        return  posting.account_id
    else :
        return vault.account_id
def mapManagementOperationDetail(vault,status,reason_code):
    managementOperationDetail = {
        'declaredExpenseAmount': 'ep_declared_expenses',
        'secondTrancheToDisburseAmount': 'sec_tranche_amount',
        'programEndDate': 'program_end_date',
        'controlType': 'realized_control',
        'retainedExpenseAmount': 'ep_retained_expenses',
        'reviewedGrantAmount': 'reviewed_grant_amount',
        'possibleGrantAmount': 'possible_grant',
        'decisionEndProgram': 'ep_decision',
    }
    induManagementOpDetail = {
        'customerAgreementStep': 'customer_agreement_status',
        'declaredExpenseAmount': 'ep_declared_expenses',
        'retainedExpenseAmount': 'ep_retained_expenses',
        'reviewedGrantAmount': 'reviewed_grant_amount',
        'unduePaymentType': 'undue_payment_type',
        'undueAbandonedAmount': 'undue_abandoned_amount',
        'diminutionAmount': 'diminution_amount',
        'fundingCompartmentIdentifier': 'funding_account_id',
        'processAllocation': 'UNDUECD'
    }
    matManagementOpDetail = {
        'transactionLocalIdentifier': 'transactionLocalIdentifier',
        'receiptWireIdentifier': 'receiptWireIdentifier',
        'processAllocation': 'processAllocation',
        'invoiceMatchingIdentifier': 'invoiceMatchingIdentifier',
        'invoiceNumber': 'invoiceNumber',
        'matchingAmount': 'matchingAmount',
        'fundingCompartmentIdentifier': 'funding_account_id'
    }
    if status == 'DEPVBO':
        if reason_code in ['Rejected by the Manager','Rejected by the DESC']:
            induManagementOpDetail['undueToRefundAmount'] = 'undue_to_refund_amount'
            return induManagementOpDetail
        else:
            return managementOperationDetail
    elif status == 'EPCP1':
        managementOperationDetail['personPartyIdentifier'] = 'person_p_id'
        return managementOperationDetail
    elif status == 'EPLCH':
        return {
            'customerAgreementStep': 'customer_agreement_status',
            'programEndDate': 'program_end_date'
        }
    elif status == 'EPVBO':
        if reason_code == 'UNDUE':
            induManagementOpDetail['undueToRefundAmount'] = 'undue_amount'
            return induManagementOpDetail
        else:
            managementOperationDetail['personPartyIdentifier'] = 'person_p_id'
            managementOperationDetail['firstTrancheDisbursedAmount'] = 'first_tranch_amount'
            managementOperationDetail['fundingCompartmentIdentifier'] = 'funding_account_id'
            managementOperationDetail['diminutionAmount'] = 'diminution_amount'
            return managementOperationDetail
    elif status in ['INDU','DINDU','INDUVBO','INDUDESC','INDUDBO']:
        induManagementOpDetail['undueToRefundAmount'] = 'undue_to_refund_amount'
        return induManagementOpDetail
    elif status in ['RFPV','RFPD','RFPR']:
        return {
            'requestedProgramEndDate': 'requested_program_end_date',
            'firstTrancheDisbursedAmount': 'first_tranch_amount'
        }
    elif status == 'CLO':
        return {
            'contractClosingDate': 'closing_date'
        }
    elif status == 'MAT_STATUS':
        return matManagementOpDetail

def prepareCustomerAgreementEmployeeInformation(vault, data, key,status):
    customerAgreementEmployee={}
    customerAgreementEmployeeList = []
    if status in ['EPLCH','EPCP1','INDU','DINDU','RFPD']:
        customerAgreementEmployee = {
            'customerAgreementEmployeeIdentifier': _get_parameter(vault, name=""business_developer_employee_identifier"", optional=True,default_value=""""),
            'customerAgreementEmployeeRole': ""COF"",
            'customerAgreementEmployeeComment':_get_parameter(vault, name=""bo_comment"", optional=True,default_value="""")
        }
    elif status in ['EPVBO','DEPVBO','INDUVBO','INDUDBO','RFPV','RFPR','INDUDESC']:
        customerAgreementEmployee = {
            'customerAgreementEmployeeIdentifier': _get_parameter(vault, name=""manager_employee_identifier"", optional=True,default_value=""""),
            'customerAgreementEmployeeRole': ""ROF"",
            'customerAgreementEmployeeComment':_get_parameter(vault, name=""manager_comment"", optional=True,default_value="""")
        }
    customerAgreementEmployeeList.append(customerAgreementEmployee)
    return customerAgreementEmployeeList



def prepareOverdueAmountInformation(vault,overdue_instruction_details,posting ):
    overdueAmountInformation={}
    direct_debit_type =  posting.instruction_details[""direct_debit_type""] if ""direct_debit_type"" in posting.instruction_details else ''
    if direct_debit_type == ""INDU"":
        overdueAmountInformation = {
        'overdueAmountWithVat':  overdue_instruction_details[""overdue_vat_included_amount""] if ""overdue_vat_included_amount"" in overdue_instruction_details else '',
        'overdueAmountWithoutVat':  overdue_instruction_details[""overdue_vat_included_amount""] if ""overdue_vat_included_amount"" in overdue_instruction_details else '',
        'vatOverdueAmount':  0,
        'vatTypeCode':  ""Z"",
        'vatTypeRatePercent': ""0""
        }
    elif  direct_debit_type == ""FRAIS"":
        overdueAmountInformation = {
            'overdueAmountWithVat':  overdue_instruction_details[""overdue_vat_included_amount""] if ""overdue_vat_included_amount"" in overdue_instruction_details else '',
            'overdueAmountWithoutVat':  overdue_instruction_details[""overdue_vat_excluded_amount""] if ""overdue_vat_excluded_amount"" in overdue_instruction_details else '',
            'vatOverdueAmount':  overdue_instruction_details[""overdue_vat_amount""] if ""overdue_vat_amount"" in overdue_instruction_details else '',
            'vatTypeCode':  ""S"",
            'vatTypeRatePercent': overdue_instruction_details[""overdue_vat_rate""] if ""overdue_vat_rate"" in overdue_instruction_details else ''
        }
    return overdueAmountInformation

def setEventType(status,reason_code,additional_data):
    if (additional_data and additional_data[""eventType""]):
        return additional_data[""eventType""]
    if (status==""EPVBO"" and (reason_code == ""UNDUE"" or reason_code == ""N/A"")):
        return status + "" "" + MAP_STATUS_OPERATIONCODE_MANAGEMENT_OPERATION[status+""INDU""]
    if (status==""DEPVBO"" and reason_code in ['Rejected by the Manager','Rejected by the DESC']):
        return status + "" "" + MAP_STATUS_OPERATIONCODE_MANAGEMENT_OPERATION[status+""RJC""]
    return status + "" "" + MAP_STATUS_OPERATIONCODE_MANAGEMENT_OPERATION[status]

def setOperationCode(status,reason_code,additional_data):
    if (additional_data and additional_data[""operationCode""] ):
        return additional_data[""operationCode""]
    return setEventType(status,reason_code,additional_data).split("" "")[1]

def setReasonCode(vault, status, old_parameter_values):
    reasonCode = _get_parameter(vault, name=""reason_code"", optional=True, default_value="""")
    if (status == 'EPVBO'):
        return _get_EPVBO_reason_code(status,reasonCode,old_parameter_values)
    elif (""INDU"" in status or ""RFP"" in status):
        return MAP_STATUS_REASONCODE_MANAGEMENT_OPERATION[status]
    elif (status =='MAT_STATUS'):
        return MAP_STATUS_REASONCODE_MANAGEMENT_OPERATION[status]
    return reasonCode

def _get_EPVBO_reason_code(status,reasonCode,old_parameter_values):
    if reasonCode in [""DDS"",""DDA"",""""]:
        return reasonCode
    else:
        previous_status = old_parameter_values[""customer_agreement_status""].value if ""customer_agreement_status"" in old_parameter_values else """"
        return MAP_EPVBO_OPERATIONCODE_REASONCODE_MANAGEMENT_OPERATION[""INI""] if ""INDU"" in previous_status else MAP_EPVBO_OPERATIONCODE_REASONCODE_MANAGEMENT_OPERATION[""INIUNDUE""]

def preparePerformanceStatusInformations(vault, data, key):
    performanceStatusCodeValue =  _get_parameter_entity(vault, name='performance_status', default_value="""")
    performanceSubStatusCodeValue =  _get_parameter_entity(vault, name='performance_sub_status', default_value="""")
    performance = {
        'performanceStatusCodeValue' : performanceStatusCodeValue,
        'performanceSubStatusCodeValue': performanceSubStatusCodeValue
    }
    return performance

def preparePercentagePerTranche(vault, map_entity_sc_keys, key):
    listVaultPercenPreTrance = _get_parameter(
        name=""percentage_per_tranche"",
        optional=True,
        is_json=True,
        vault=vault,
        default_value=json_dumps([]),
    )
    percentagePerTrancheArray = []
    for  elem in listVaultPercenPreTrance :
        percenPerTrance = {
            'percentageGrantInstalment': elem[""percentage""] if ""percentage"" in elem else "" "",
            'numberGrantInstalment': elem[""tranche_number""] if ""tranche_number"" in elem else "" ""
        }
        percentagePerTrancheArray.append(percenPerTrance)
    return percentagePerTrancheArray

def prepareManagementOperationDetail(vault,details,additional_data):
    for key,value in details.items():
        if value == ""UNDUECD"":
            continue
        elif value in [""undue_payment_type"",""realized_control""]:
            vault_param = _get_parameter(vault, name=value, optional=True,default_value=UnionItemValue(key=""""))
            details[key] = str(vault_param.key) if vault_param is not None else """"
        elif value == ""ep_retained_expenses"":
            vault_param = _get_parameter(vault, name=value, optional=True,default_value=Decimal(""0.00""))
            details[key] = str(vault_param) if vault_param is not None else """"
        elif key in [""decisionEndProgram"",""possibleGrantAmount"",""reviewedGrantAmount"",""secondTrancheToDisburseAmount"",""diminutionAmount"",""undueToRefundAmount"",""undueAbandonedAmount"",""firstTrancheDisbursedAmount""]:
            details[key] = str(_end_program_calculations(vault)[value])
        elif value in [""customer_agreement_status"",""ep_declared_expenses"",""funding_account_id""]:
            vault_param = _get_parameter(vault, name=value, optional=True,default_value="""")
            details[key] = str(vault_param) if vault_param is not None else """"
        elif value in [""program_end_date"",""requested_program_end_date"",""closing_date""]:
            vault_param = _get_parameter(vault, name=value, optional=True,default_value="""")
            clean_date = _clean_date_format(vault_param) if vault_param is not None else """"
            details[key] = str(clean_date) if clean_date is not None else """"
        elif value in ['transactionLocalIdentifier','receiptWireIdentifier','processAllocation','invoiceMatchingIdentifier','invoiceNumber','matchingAmount']:
            details[key] = additional_data[value]
        else :
            details[key] = _get_parameter(vault, name=value, default_value="""")

    return details

def prepareFinnancialAnnex(vault, map_entity_sc_keys, key):
    listVaultFinanceAnnex = _get_parameter(
        name=""financial_annex"",
        optional=True,
        is_json=True,
        vault=vault,
        default_value=json_dumps([]),
    )
    financialAnnexArray = []
    # expenses:
    # amount	retainedExpenseAmount	O	number
    # details	expenseStatusLabel
    # type	expenseStatus
    for elem in listVaultFinanceAnnex :
        for exp in elem[""expenses""] :
            newExpense  = {
                'retainedExpenseAmount': str(exp[""amount""]) if ""amount"" in exp else "" "",
                'expenseStatusLabel': exp[""details""] if ""details"" in exp else "" "",
                ""expenseStatus"": str(exp[""type""]) if ""type"" in exp else "" ""
            }

            financialAnnexArray.append(newExpense)
    return financialAnnexArray


def _init_notify_links(vault,data, typeEnity):
    links = []

    if typeEnity in ENTITY_LINKS_BY_NOTIFICATION_TYPE:

        for keyLink in ENTITY_LINKS_BY_NOTIFICATION_TYPE[typeEnity]:
            link = ENTITY_LINKS_BY_NOTIFICATION_TYPE[typeEnity][keyLink]


            if(keyLink in data and data[keyLink]):
                value = data[keyLink]
                if( 'format' in link and link['format'] == 'number' and str(value).strip().isdigit() ):
                    value = int(value)


                if keyLink == ""invoiceNumber"":
                    _get_link_overdue_invoide_identifier(data,links)

                else :
                    links.append({
                        'idRef': link['idRef'] + '-' + str(value),
                        'type': link['type']
                    })


            elif (keyLink == ""underwriterIdentifier"" and keyLink not in data ):
                value = _get_parameter(name=""underwriterIdentifier"", optional=True, vault=vault, default_value="" "")
                links.append({
                    'idRef': link['idRef'] + '-' + str(value),
                    'type': link['type']
                })
            elif(keyLink == 'customerAgreementEmployeeIdentifier' and keyLink not in data):
                _get_link_customer_agreement_identifier_management_op(data, links, link)
            elif(keyLink == 'personPartyIdentifier' and keyLink not in data):
                _get_link_person_party_identifier_management_op(data, links, keyLink, link)


    return links

def _get_link_person_party_identifier_management_op(data, links, keyLink, link):
    value = data['managementOperationDetail'][keyLink] if 'managementOperationDetail' in data and keyLink in data['managementOperationDetail'] else ''
    if value:
        links.append({
            'idRef': link['idRef'] + '-' + str(value),
            'type': link['type']
        })

def _get_link_customer_agreement_identifier_management_op(data, links, link):
    if 'customerAgreementEmployeeInformation' in data:
        for employeeInfo in data['customerAgreementEmployeeInformation']:
            value = employeeInfo['customerAgreementEmployeeIdentifier'] if 'customerAgreementEmployeeIdentifier' in employeeInfo else ''
            if value:
                links.append({
                    'idRef': link['idRef'] + '-' + str(value),
                    'type': link['type']
                })

def _get_notification_type(status, offer, operation_code,additional_data):
    notif_type = PSU_TRIGRAM_BY_OFFER[offer] + '|' + NOTIFICATION_TYPES_BY_STATUS[status] + '|' + SUBVENTION_MVP
    if (additional_data and additional_data[""operationCode""] ):
        operation_code = additional_data[""operationCode""]

    
    MAP_ACTION = {
        'EDBO' : 'Requested',
        'EPEDBO' : 'Requested',
        'ERJ' : 'Rejected',
        'ECF' : 'Closed',
        ""RJC"": 'Rejected',
        ""SNT"": 'Sent',
        ""RQD"": 'Requested',
    }
    if( NOTIFICATION_TYPES_BY_STATUS[status] == NOTIFICATION_ENTITY_TYPE_CUSTOMER_AGREEMENT) :
        notif_type = notif_type + ""|Updated""
    elif( NOTIFICATION_TYPES_BY_STATUS[status] == NOTIFICATION_ENTITY_TYPE_DISBURSMENT or NOTIFICATION_TYPES_BY_STATUS[status] == NOTIFICATION_ENTITY_TYPE_RECEIPT_DIRECT_DEBIT) :
        notif_type = notif_type + ""|"" + MAP_ACTION[operation_code]

    return notif_type

def _get_notification_type_management_operation(status, offer):
    return PSU_TRIGRAM_BY_OFFER[offer] + '|' + NOTIFICATION_TYPES_BY_STATUS_MANAGEMENT_OPERATION[status] + '|' + SUBVENTION_MVP

def _get_operation_code_by_status(status):
    return status

def _get_parameter_entity(
        vault, name, is_json=False, default_value=None
):
    parameter = vault.get_parameter_timeseries(name=name).latest()
    if(name in PAYLOAD_DECIMAL_SC_FIELD) :
        value = parameter if parameter else default_value
    else:
        value = parameter.value if parameter.is_set() else default_value

    if(name in PAYLOAD_UNION_SC_FIELD):
        return value.key
    elif name in PAYLOAD_DATE_SC_FIELD:
        return _clean_date_format(value)

    if is_json :
        return json_loads(value)
    return value

# clean date format to be in the format YYYY-MM-DD by delete hours, minutes and seconds initial date format is YYYY-MM-DD HH:MM:SS
def _clean_date_format(date):
    if date is not None:
        str_date = str(date)
        return str_date[:10]
    return """"

# create_receipt_direct_debit 
def _create_receipt_direct_debit(vault, effective_date, instruction_details, operation_code,amount,client_transaction_id):
    additional_data = {}
    additional_data[""directDebitAmount""] = _get_direct_debit_amount(vault,instruction_details,amount)
    additional_data[""directDebitLabel""] = instruction_details[""transfer_transaction_label""] if ""transfer_transaction_label"" in instruction_details else """"
    additional_data[""transactionLocalIdentifier""] = client_transaction_id
    additional_data[""operationCode""] = operation_code
    additional_data[""processAllocation""] = instruction_details[""analytic_imputation""] if ""analytic_imputation"" in instruction_details else """"
    additional_data[""feesType""] = instruction_details[""direct_debit_type""] if ""direct_debit_type""in instruction_details else """"
    if operation_code in (""RQD"",""SNT""):
        additional_data[""invoiceInformation""] = _get_invoiceInformation(vault,instruction_details)
    else:     
        additional_data[""invoiceInformation""] = _get_invoiceInformation_RJC(vault,instruction_details,amount)
    additional_data.update(instruction_details)
    return additional_data
    

def _get_direct_debit_amount(vault,instruction_details,amount):
    direct_debit_type= instruction_details[""direct_debit_type""] if ""direct_debit_type"" in instruction_details else """"
    directDebitAmount= str(amount)
    if direct_debit_type == ""INDU"":
        directDebitAmount = instruction_details[""amount""] if ""amount"" in instruction_details else str(amount)
    else: 
        directDebitAmount = instruction_details[""amount_with_TVA""] if ""amount_with_TVA"" in instruction_details else str(amount)
   
    return directDebitAmount

def _get_invoiceInformation_RJC(vault,instruction_details,amount):
    is_standard_rate = _get_parameter(name=""is_standard_rate"", optional=True, vault=vault, default_value=1)
    vat_rate = 20 if is_standard_rate else 8.5
    amount_ht = (amount / (100 + vat_rate)) * 100
    direct_debit_type= instruction_details[""direct_debit_type""] if ""direct_debit_type"" in instruction_details else """"
    if direct_debit_type == ""INDU"":
        return {
                ""invoiceNumber"": instruction_details[""invoice_identifier""] if ""invoice_identifier"" in instruction_details else """",
                ""vatTypeCode"": ""Z"",
                ""invoiceTotalAmountWithVat"": str(amount),
                ""invoiceTotalAmountWithoutVat"":str(amount),
                ""invoiceVatTotalAmount"": ""0"" ,
                ""vatTypeRatePercent"": ""0"",
        }
    else :
        invoiceTotalAmountWithVat = amount
        invoiceTotalAmountWithoutVat = amount_ht
        invoiceVatTotalAmount = Decimal(invoiceTotalAmountWithVat) - Decimal(invoiceTotalAmountWithoutVat)
        return {      
                ""invoiceNumber"": instruction_details[""invoice_identifier""] if ""invoice_identifier"" in instruction_details else """",
                ""vatTypeCode"": ""S"" ,
                ""vatTypeRatePercent"": str(vat_rate),
                ""invoiceTotalAmountWithVat"": str(invoiceTotalAmountWithVat),
                ""invoiceTotalAmountWithoutVat"": str(invoiceTotalAmountWithoutVat),
                ""invoiceVatTotalAmount"": str(invoiceVatTotalAmount)                     
        }



def _get_invoiceInformation(vault,instruction_details):
    direct_debit_type= instruction_details[""direct_debit_type""] if ""direct_debit_type"" in instruction_details else """"
    if direct_debit_type == ""INDU"":
        return {
                ""invoiceNumber"": instruction_details[""invoice_identifier""] if ""invoice_identifier"" in instruction_details else """",
                ""vatTypeCode"": ""Z"",
                ""invoiceTotalAmountWithVat"": instruction_details[""amount""] if ""amount"" in instruction_details else """",
                ""invoiceTotalAmountWithoutVat"": instruction_details[""amount""] if ""amount"" in instruction_details else """",
                ""invoiceVatTotalAmount"": ""0"",
                ""vatTypeRatePercent"": ""0"",
        }
    else :
        invoiceTotalAmountWithVat = instruction_details[""amount_with_TVA""] if ""amount_with_TVA"" in instruction_details else ""0.00""
        invoiceTotalAmountWithoutVat = instruction_details[""amount_before_tax""] if ""amount_before_tax"" in instruction_details else ""0.00""
        invoiceVatTotalAmount = Decimal(invoiceTotalAmountWithVat) - Decimal(invoiceTotalAmountWithoutVat)
        return {      
                ""invoiceNumber"": instruction_details[""invoice_identifier""],
                ""vatTypeCode"": ""S"" ,
                ""vatTypeRatePercent"": instruction_details[""TVA""] if ""TVA"" in instruction_details else """",
                ""invoiceTotalAmountWithVat"": invoiceTotalAmountWithVat,
                ""invoiceTotalAmountWithoutVat"": invoiceTotalAmountWithoutVat,
                ""invoiceVatTotalAmount"": str(invoiceVatTotalAmount)                     
        }

def _create_lettering_management_operation(vault,posting):
    additional_data = {}
    additional_data[""operationCode""] =  posting.instruction_details[""operation_code""] if ""operation_code"" in posting.instruction_details else """"
    additional_data[""eventType""] = posting.instruction_details[""event_type""] if ""event_type"" in posting.instruction_details else """"
    additional_data[""transactionLocalIdentifier""] = posting.instruction_details[""transfer_transaction_short_id""] if ""transfer_transaction_short_id"" in posting.instruction_details else """"
    additional_data[""receiptWireIdentifier""] = posting.instruction_details[""receipt_local_identifier""] if ""receipt_local_identifier"" in posting.instruction_details else """"
    additional_data[""processAllocation""] = get_process_allocation_from_invoice_address(posting.instruction_details[""invoice_address""])
    additional_data[""invoiceMatchingIdentifier""] = posting.instruction_details[""invoice_matching_identifier""] if ""invoice_matching_identifier"" in posting.instruction_details else """"
    additional_data[""invoiceNumber""] = _get_invoice_number_from_invoiceAddress(posting.instruction_details[""invoice_address""])
    additional_data[""matchingAmount""] = str(posting.amount)
    additional_data.update(posting.instruction_details)
    return additional_data


def _format_datetime_utcnow():
    return datetime.utcnow().isoformat()[:23] + 'Z'

@requires(parameters=True)
def post_activate_code():
    vault.start_workflow(
        workflow=""SET_INSTANCE_PARAMETER_UNDERWRITERIDENTIFIER"",
        context={
            ""product_id"": ""subvention_mvp"",
            ""account_id"": vault.account_id,
        },
    )


def setTechnicalProductIdentifier(vault):
    offer = offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    return ""1088217062"" if offer == ""202"" else ""9024934994""


def setCustomerOfferIdentifier(vault):
    offer = offer = _get_parameter(
        name=""offer"", optional=True, vault=vault, default_value=UnionItemValue(key="""")
    )
    return ""2213787150"" if offer == ""202"" else ""2386223667""
",2025-05-27T19:18:32.170883,,1.0,"[0.4838147461414337, -0.13549083471298218, -2.3863253593444824, -0.8805028796195984, 0.6682215332984924, 0.0318557508289814, 0.49676600098609924, -0.1742745041847229, 0.7907606959342957, -0.5355017185211182, -1.3729214668273926, 0.15973640978336334, 0.9284378886222839, 0.026613444089889526, 0.3735170066356659, -0.42283183336257935, 0.4577547311782837, -0.9038272500038147, 0.287124365568161, 0.012774862349033356, 0.01249442994594574, -0.6436035633087158, -0.3233276605606079, 0.09860120713710785, 0.5325551629066467, 0.12811711430549622, -0.21494020521640778, 0.13175825774669647, -0.6420546770095825, 0.20757554471492767, 0.02629900723695755, 0.33022964000701904, 0.6401030421257019, -0.13071110844612122, -0.523949384689331, -0.5168166160583496, 0.5114352107048035, -0.5220706462860107, -0.1538267284631729, -0.6083632111549377, -0.3480449914932251, 0.49239659309387207, 0.1966218799352646, 0.0992831438779831, 0.05325043201446533, -0.631201982498169, 1.8217494487762451, -0.29344287514686584, 0.12802289426326752, 0.08258740603923798, 0.016256064176559448, -0.37704870104789734, -0.04356326162815094, 0.6372736692428589, 0.48840877413749695, 0.272987961769104, -0.7726441621780396, 0.5392103791236877, 1.3314937353134155, 0.41667479276657104, 1.066273808479309, 0.8410907983779907, 0.6538645625114441, -0.009301457554101944, 1.1383556127548218, 0.406830370426178, 0.11875458061695099, 0.8521302938461304, -0.9291556477546692, -0.3315723240375519, 0.06675206124782562, 0.6697210669517517, -0.7047576904296875, 0.3003292381763458, -0.42023950815200806, 1.1293187141418457, -0.21494647860527039, -0.810844898223877, 0.12881293892860413, 0.32353490591049194, 0.10222376883029938, -0.1640567034482956, 0.7513620853424072, -1.0187090635299683, 0.09898090362548828, -0.39771348237991333, 0.007959548383951187, 1.0159744024276733, -0.5687612891197205, 0.7137994766235352, -0.24092641472816467, 0.6893751621246338, 0.15604528784751892, -0.17229202389717102, -0.6808972358703613, 0.6280951499938965, -0.6015906929969788, -0.028292927891016006, -0.910516083240509, 0.10609181970357895, -0.5499609708786011, -0.8351746201515198, 0.018306046724319458, -0.501406192779541, 0.501248300075531, 1.5307703018188477, 0.790751576423645, -0.518417239189148, -0.11995480209589005, 0.4364398121833801, -0.4732719659805298, -0.42253175377845764, -0.3992049992084503, -0.21048757433891296, -0.042700037360191345, -0.0890328586101532, 1.0077520608901978, -0.37196195125579834, -0.11626535654067993, 0.28865915536880493, -0.7173899412155151, -0.37050846219062805, 0.06729823350906372, 0.3070525825023651, -0.25523197650909424, -0.3458593785762787, 0.09002503007650375, -0.9050841331481934, 0.3092655837535858, -0.960699737071991, 0.7941892743110657, -0.4803168475627899, -0.7081713676452637, 0.783125102519989, 0.15784406661987305, 0.10367565602064133, -0.15112027525901794, -0.5450232028961182, 0.2228386402130127, 0.5840972065925598, 0.11982067674398422, -0.12794360518455505, -0.33598288893699646, -0.8365335464477539, -0.14814350008964539, -0.06367137283086777, 0.07780507951974869, -0.20960676670074463, -0.1594608724117279, -0.3678111135959625, -0.02825750783085823, 0.16607581079006195, 0.253740131855011, 0.6564023494720459, -0.2140389084815979, -0.7609843015670776, -0.08196355402469635, -0.18908239901065826, 0.8349761366844177, 1.0050458908081055, 1.167157769203186, -0.10786840319633484, 0.11020894348621368, 0.07415376603603363, -0.07642745971679688, -0.5849108695983887, -0.21120519936084747, 0.49614694714546204, 0.2614092528820038, 0.15379686653614044, -0.22352880239486694, -0.47694075107574463, -0.34580597281455994, -0.45582717657089233, 0.4286160469055176, 0.3644315302371979, 0.5661938190460205, -0.6041949987411499, 0.09782661497592926, -1.1605068445205688, 1.0535266399383545, -0.6083322763442993, 0.8370609879493713, 0.3842564821243286, -0.029020749032497406, -0.9518671035766602, 1.1023399829864502, -0.395938515663147, -0.36281150579452515, -0.4897387623786926, 0.19329504668712616, 0.05733247101306915, -0.7068710923194885, 0.14744867384433746, -0.5346531867980957, -0.53751540184021, 0.8720835447311401, -0.04055190831422806, -0.5870468616485596, -0.1518893539905548, -0.25054165720939636, -0.006249949336051941, 0.23449687659740448, 0.48333287239074707, -0.22860552370548248, 0.8541321754455566, 0.1761106252670288, 0.8079366683959961, -0.3407834470272064, 0.08038277924060822, 0.693375289440155, 0.4461080729961395, 0.04533877968788147, 0.6733002662658691, -0.3003079891204834, 0.40762102603912354, 0.2917206585407257, -0.1856435090303421, -0.591578483581543, -0.13274464011192322, 0.3628244400024414, -0.2811964452266693, 0.09234467893838882, 0.3979749381542206, 0.7495850920677185, -0.006340160965919495, -0.8675464987754822, 0.024574605748057365, 0.0693545788526535, -0.44907164573669434, -0.038971975445747375, 0.017126142978668213, -0.1517314612865448, -0.16134707629680634, -0.18033869564533234, 0.4428365230560303, -0.2926497459411621, 0.8331233263015747, -0.1911531388759613, -0.028047926723957062, -0.16208848357200623, 0.4385123550891876, -0.07450675964355469, 0.7437555193901062, -0.5513746738433838, 0.13893543183803558, 0.07622143626213074, 0.23246833682060242, -0.0403837189078331, 0.42515888810157776, 0.04034891724586487, 0.510153591632843, 0.571908712387085, -0.051826804876327515, 0.16722750663757324, -0.22305290400981903, -1.3302613496780396, 0.5159748792648315, -0.5475801825523376, -0.4638918936252594, -0.239648699760437, -0.21110516786575317, 1.5537114143371582, 0.033111728727817535, -0.057568542659282684, -0.06959051638841629, -0.6354563236236572, 0.2629421651363373, 0.044048041105270386, -0.002020057290792465, -0.1536330133676529, 0.2946063280105591, -0.841010332107544, 0.9007841348648071, 0.08698061853647232, 0.21846038103103638, 0.23723670840263367, -0.4923819601535797, -0.6269066333770752, 0.6675707101821899, -0.3941274881362915, -1.0194872617721558, -0.07787977904081345, 0.714406430721283, -0.19727180898189545, 0.5480683445930481, -0.40308818221092224, 0.7003788948059082, 0.06617961823940277, -0.5690310001373291, 0.9854152202606201, 0.13205739855766296, -0.6837460994720459, -0.016487907618284225, 0.7666739225387573, 0.08447206020355225, 0.8296528458595276, 0.8015338182449341, 0.452104777097702, -1.243248462677002, 0.07941478490829468, 0.3040224313735962, 0.15966267883777618, 0.5040884017944336, -0.40750300884246826, -0.5001286268234253, -0.2718905806541443, 0.7049247026443481, -0.43699124455451965, -0.45020541548728943, -0.23725008964538574, 0.3656730651855469, -1.066718578338623, -0.22619935870170593, -0.366551011800766, 0.9219439625740051, 0.5431156158447266, 0.06651662290096283, 0.42464083433151245, -0.0426565520465374, 0.009558992460370064, -0.2331477850675583, -0.11509110033512115, -0.6207706332206726, 0.5178679823875427, 0.6219524145126343, -0.036659881472587585, 0.5793454647064209, 0.07487953454256058, -0.37710052728652954, 1.0113753080368042, -0.43986767530441284, 0.09045937657356262, -0.47908735275268555, -0.20755471289157867, -0.3534351885318756, -0.064054936170578, -0.4513666033744812, -0.024092938750982285, -0.03368730843067169, 0.9331395626068115, -0.2622852325439453, 0.21273492276668549, -0.5866363644599915, -0.21634544432163239, -0.5736904740333557, -0.08402717113494873, 0.0952601358294487, 0.37274307012557983, 0.8256945610046387, -0.08388311415910721, -0.009063825011253357, -0.09851057827472687, -0.336679071187973, 0.38739854097366333, 0.5965774059295654, -0.15024670958518982, 0.18931789696216583, -0.4839598536491394, 0.5095526576042175, 0.2067948430776596, -0.3411065340042114, -0.1743224859237671, -0.5003973245620728, 0.9430020451545715, 0.9040472507476807, 1.1649386882781982, -0.5278058052062988, 0.5845066905021667, 0.5140967965126038, -0.55877685546875, -0.02644410729408264, 0.5538554191589355, -0.31528735160827637, -0.3874802589416504, -0.9152523279190063, -0.9364075660705566, -0.8493423461914062, 0.0893721953034401, 0.24457761645317078, 0.30320581793785095, 0.06009351462125778, -0.5845472812652588, -0.30541181564331055, -0.3872843086719513, -0.6434738636016846, -0.22187326848506927, 0.15032726526260376, -0.1506030112504959, -0.24535280466079712, -0.4440169632434845, -0.6381856203079224, -0.061711639165878296, -0.5450965762138367, 0.14750342071056366, -0.45864731073379517, 0.3075730502605438, 0.25005513429641724, 0.27470389008522034, -0.10984809696674347, -0.5716466903686523, -0.4360177516937256, 0.7849507331848145, -0.37603145837783813, 0.52618008852005, 0.576639711856842, -0.1479676067829132, -0.3244361877441406, 0.5027150511741638, -0.3981652557849884, 0.47566428780555725, 0.4409908354282379, -0.5249443650245667, -0.4711034595966339, -0.042308151721954346, 0.12265221774578094, 1.3734833002090454, -0.18811945617198944, -0.6540945768356323, -0.16294097900390625, 1.0064818859100342, 0.12880070507526398, 0.876839280128479, -0.0779031366109848, 0.6143486499786377, 0.002329692244529724, 1.0430588722229004, 0.3405463993549347, 0.14438505470752716, -0.9865083694458008, -0.3801204562187195, 0.6786485910415649, 0.8815252780914307, 0.4288146197795868, -0.8932639956474304, 0.26127421855926514, 0.7248205542564392, 0.14927086234092712, 0.09101491421461105, 0.39503228664398193, 0.5348401069641113, -1.3036177158355713, 0.3568115830421448, -0.5872741937637329, 0.4703882932662964, 0.8683149814605713, 0.1391671895980835, -0.37926340103149414, -0.3260551989078522, 0.12001235783100128, -0.48235535621643066, 0.10094267129898071, 0.7825520038604736, 0.041246265172958374, 0.6113253831863403, -0.20808017253875732, 0.30706465244293213, 0.12790945172309875, -0.5706517100334167, 1.0547113418579102, 0.1569903939962387, 0.21282130479812622, -0.5827317833900452, 0.0652582049369812, 0.5743958950042725, -0.644508957862854, 0.2546798884868622, -0.5793996453285217, 0.1848934143781662, 0.4339669942855835, -0.7029335498809814, -0.2381628006696701, 0.3245789110660553, 0.09353268146514893, 0.8054862022399902, 0.46907439827919006, 0.3856962323188782, -0.1942761242389679, 0.5548854470252991, 0.3799128234386444, -0.6718651056289673, 0.2580351233482361, -0.8169455528259277, -0.1702897995710373, -0.2316921353340149, 0.1721479743719101, -0.1289198100566864, -0.7561989426612854, 0.3625623881816864, -0.6128504276275635, 0.4965062737464905, -0.0016617216169834137, 0.18575462698936462, -0.2951427400112152, -0.571571409702301, -0.7184184193611145, -0.04987812042236328, 0.06517156958580017, 0.14111942052841187, -0.0972151905298233, 0.05337467044591904, 0.9137480854988098, -1.1459225416183472, 0.2477913200855255, 0.732826828956604, -0.7018506526947021, 0.2584807276725769, -0.31073111295700073, -0.5789929032325745, 0.4111035466194153, 0.6775371432304382, 0.5713362097740173, 0.38874295353889465, -0.27846449613571167, 0.3030223250389099, 0.10196658968925476, 0.3209978938102722, -0.20746423304080963, -0.32854875922203064, -0.16885417699813843, 0.30599138140678406, -0.20895379781723022, -0.23948505520820618, -0.9860671758651733, -1.7616171836853027, 0.058809176087379456, 0.1299797147512436, -0.8839169144630432, 0.5964206457138062, 0.013665933161973953, 0.4208238422870636, 0.7808412909507751, -0.4765374958515167, -0.2486121952533722, -0.06533606350421906, 0.16726115345954895, -1.2050728797912598, -0.3749389350414276, 0.34369292855262756, -0.27585935592651367, 0.05337674915790558, -0.43862542510032654, -0.33051684498786926, -0.22570645809173584, 0.20164276659488678, -0.8242130875587463, 0.7308163046836853, 1.0084047317504883, 0.24230413138866425, -0.6444383859634399, 0.41914793848991394, 0.5262641310691833, -0.1282777190208435, -0.8029281497001648, 0.5876655578613281, -0.4997040629386902, -0.007044505327939987, -0.5897259712219238, -0.5282332301139832, 0.023816749453544617, -0.5297044515609741, 0.3551814556121826, 1.114821195602417, 0.8630697727203369, -0.04474366456270218, -0.5546115636825562, -0.5189532041549683, -0.46001195907592773, 0.28095608949661255, 0.33726799488067627, 0.641005277633667, -0.8625892400741577, -0.5970315933227539, -0.5314521193504333, -0.2850257158279419, -0.15879422426223755, -0.19159628450870514, 0.3384493589401245, -0.49953120946884155, -0.34733346104621887, -0.38556620478630066, 0.5263682007789612, 0.3420981466770172, 0.6781797409057617, 0.13534584641456604, -0.2523912191390991, -0.4805903136730194, -0.8425882458686829, 0.2605070471763611, -0.5154222846031189, -0.32655245065689087, -0.2046016901731491, 0.05404438078403473, -0.7976523041725159, -0.0005620718002319336, 0.5518403053283691, -0.09702054411172867, -0.6346479654312134, -0.9087492823600769, -0.7427171468734741, 0.18145012855529785, 0.45169198513031006, 0.7372990250587463, -0.27280181646347046, -0.7805764079093933, 0.9502635598182678, -0.33203718066215515, 0.19446322321891785, 0.4968985915184021, -0.43627968430519104, 0.14053384959697723, -0.5970167517662048, -0.6403963565826416, 0.1932041198015213, 0.050935447216033936, 0.34335899353027344, 1.3556989431381226, 0.40654417872428894, 0.7481155395507812, -0.2828253507614136, -0.10763673484325409, -0.8813460469245911, 0.9621602296829224, -0.1933884620666504, -0.1229231059551239, -0.01194964349269867, -0.6691271662712097, -0.06320875883102417, 0.6273743510246277, 0.7173893451690674, -0.3442201614379883, 0.10361157357692719, -0.9468862414360046, -0.2812938392162323, -0.6700311303138733, 0.5609244108200073, 0.1409444510936737, 0.35042011737823486, -0.29689598083496094, 0.3785289525985718, 0.6792494654655457, 0.027551285922527313, -0.42029640078544617, 0.3350537121295929, -0.2542019784450531, -0.692712664604187, 0.22583819925785065, 1.3557645082473755, 0.8211520314216614, -0.47266003489494324, 1.3812899589538574, 1.5768365859985352, 0.2754930555820465, 0.8160741925239563, 0.10434088855981827, -0.43003013730049133, -0.1334563046693802, -0.6597832441329956, -0.4422478973865509, -0.4860641360282898, 0.6076415181159973, 0.05701902136206627, -0.7566660642623901, -0.4005407691001892, 1.1817593574523926, 0.2884332239627838, -0.26167505979537964, 0.6595911979675293, -0.720391571521759, -1.0708980560302734, 0.10328088700771332, 0.14686675369739532, -0.15713109076023102, 0.23562990128993988, 1.3327515125274658, 0.11732587963342667, -0.08835530281066895, 0.20283539593219757, -0.6627146005630493, 0.08904317766427994, 0.1919398307800293, 1.0471426248550415, -0.29140734672546387, -0.6110328435897827, -0.03921043127775192, 0.5988931655883789, -0.3408304452896118, -0.1568450927734375, -0.7067925930023193, -0.13074471056461334, -0.26239287853240967, 0.22360019385814667, 0.005022943019866943, 0.003166869282722473, -0.5290611386299133, 0.7864060401916504, -0.2829086184501648, -0.7223684787750244, 0.2283174991607666, 0.8581104278564453, 0.5848749279975891, -0.08126979321241379, 0.8336308002471924, -0.2757182717323303, -0.3628268837928772, -0.5200691223144531, -0.2458270639181137, -0.4669559895992279, -0.5303564667701721, -0.22905002534389496, 0.8132160902023315, 0.3085813522338867, 0.05217374861240387, 0.11657558381557465, -0.09811529517173767, 0.30661913752555847, -0.24582146108150482, -0.6219694018363953, -0.21770593523979187, 0.4457564949989319, -0.032413750886917114, -0.4606595039367676, -0.002501983195543289, -0.10721288621425629, -0.1393037587404251, 0.2365768551826477, -0.4250025749206543, 0.1574489176273346, 0.11209645867347717, -0.396292507648468, -0.5141019821166992, 0.21336403489112854, -0.30274128913879395, 0.49707916378974915, -0.3433641493320465, 0.35748645663261414, -0.054575201123952866, -0.3977026343345642, -0.9285554885864258, -0.6094220876693726, -0.6608864068984985, -0.1694784015417099, 0.10257217288017273, 0.1541077047586441, -0.6455691456794739, -0.8061432838439941, -0.4155051112174988, 0.4193355441093445, 0.19418588280677795, 0.3742806017398834, -0.18392938375473022, -0.05790251865983009, -0.6628649830818176, -0.27853959798812866, -0.19577206671237946, -0.21850410103797913, 0.9644045829772949, 0.8520920276641846, 1.1294286251068115, 0.2838123142719269, 0.003596477210521698, 0.22262881696224213, 0.7076681852340698, -0.2920573055744171, -0.8729479908943176, -1.1842548847198486, -0.4654066562652588, -0.5607843399047852]"
